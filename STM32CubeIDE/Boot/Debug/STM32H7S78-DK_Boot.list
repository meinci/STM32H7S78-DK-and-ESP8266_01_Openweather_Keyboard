
STM32H7S78-DK_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009620  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080098d0  080098d0  0000a8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800991c  0800991c  0000b00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800991c  0800991c  0000b00c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800991c  0800991c  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800991c  0800991c  0000a91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009920  08009920  0000a920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  08009924  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2400000c  08009930  0000b00c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20000000  20000000  0000c000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bec  00000000  00000000  0000b03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003328  00000000  00000000  00023c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00026f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc7  00000000  00000000  00027ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003206e  00000000  00000000  00028aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e1a  00000000  00000000  0005ab1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00138b57  00000000  00000000  00070937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a948e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef0  00000000  00000000  001a94d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b3  00000000  00000000  001ad3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400000c 	.word	0x2400000c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080098b8 	.word	0x080098b8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000010 	.word	0x24000010
 80002ec:	080098b8 	.word	0x080098b8

080002f0 <MX_EXTMEM_MANAGER_Init>:
/**
  * Init External memory manager
  * @retval None
  */
void MX_EXTMEM_MANAGER_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */

  /* USER CODE END MX_EXTMEM_Init_PreTreatment */
  HAL_RCCEx_EnableClockProtection(RCC_CLOCKPROTECT_XSPI);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f005 facf 	bl	8005898 <HAL_RCCEx_EnableClockProtection>

  /* Initialization of the memory parameters */
  memset(extmem_list_config, 0x0, sizeof(extmem_list_config));
 80002fa:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80002fe:	2100      	movs	r1, #0
 8000300:	4832      	ldr	r0, [pc, #200]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000302:	f009 fa9f 	bl	8009844 <memset>

  /* EXTMEMORY_1 */
  extmem_list_config[0].MemType = EXTMEM_NOR_SFDP;
 8000306:	4b31      	ldr	r3, [pc, #196]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
  extmem_list_config[0].Handle = (void*)&hxspi2;
 800030c:	4b2f      	ldr	r3, [pc, #188]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 800030e:	4a30      	ldr	r2, [pc, #192]	@ (80003d0 <MX_EXTMEM_MANAGER_Init+0xe0>)
 8000310:	605a      	str	r2, [r3, #4]
  extmem_list_config[0].ConfigType = EXTMEM_LINK_CONFIG_8LINES;
 8000312:	4b2e      	ldr	r3, [pc, #184]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000314:	2203      	movs	r2, #3
 8000316:	721a      	strb	r2, [r3, #8]

  /* EXTMEMORY_2 */
  extmem_list_config[1].MemType = EXTMEM_PSRAM;
 8000318:	4b2c      	ldr	r3, [pc, #176]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 800031a:	2202      	movs	r2, #2
 800031c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
  extmem_list_config[1].Handle = (void*)&hxspi1;
 8000320:	4b2a      	ldr	r3, [pc, #168]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000322:	4a2c      	ldr	r2, [pc, #176]	@ (80003d4 <MX_EXTMEM_MANAGER_Init+0xe4>)
 8000324:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  extmem_list_config[1].ConfigType = EXTMEM_LINK_CONFIG_16LINES;
 8000328:	4b28      	ldr	r3, [pc, #160]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 800032a:	2204      	movs	r2, #4
 800032c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

  extmem_list_config[1].PsramObject.psram_public.MemorySize = HAL_XSPI_SIZE_256MB;
 8000330:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000332:	2218      	movs	r2, #24
 8000334:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
  extmem_list_config[1].PsramObject.psram_public.FreqMax = 200 * 1000000u;
 8000338:	4b24      	ldr	r3, [pc, #144]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 800033a:	4a27      	ldr	r2, [pc, #156]	@ (80003d8 <MX_EXTMEM_MANAGER_Init+0xe8>)
 800033c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  extmem_list_config[1].PsramObject.psram_public.NumberOfConfig = 1u;
 8000340:	4b22      	ldr	r3, [pc, #136]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000342:	2201      	movs	r2, #1
 8000344:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114

  /* Config */
  extmem_list_config[1].PsramObject.psram_public.config[0].WriteMask = 0x40u;
 8000348:	4b20      	ldr	r3, [pc, #128]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 800034a:	2240      	movs	r2, #64	@ 0x40
 800034c:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
  extmem_list_config[1].PsramObject.psram_public.config[0].WriteValue = 0x40u;
 8000350:	4b1e      	ldr	r3, [pc, #120]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000352:	2240      	movs	r2, #64	@ 0x40
 8000354:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
  extmem_list_config[1].PsramObject.psram_public.config[0].REGAddress = 0x08u;
 8000358:	4b1c      	ldr	r3, [pc, #112]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 800035a:	2208      	movs	r2, #8
 800035c:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

  /* Memory command configuration */
  extmem_list_config[1].PsramObject.psram_public.ReadREG           = 0x40u;
 8000360:	4b1a      	ldr	r3, [pc, #104]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000362:	2240      	movs	r2, #64	@ 0x40
 8000364:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
  extmem_list_config[1].PsramObject.psram_public.WriteREG          = 0xC0u;
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 800036a:	22c0      	movs	r2, #192	@ 0xc0
 800036c:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
  extmem_list_config[1].PsramObject.psram_public.ReadREGSize       = 2u;
 8000370:	4b16      	ldr	r3, [pc, #88]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000372:	2202      	movs	r2, #2
 8000374:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
  extmem_list_config[1].PsramObject.psram_public.REG_DummyCycle    = 4u;
 8000378:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 800037a:	2204      	movs	r2, #4
 800037c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
  extmem_list_config[1].PsramObject.psram_public.Write_command     = 0xA0u;
 8000380:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000382:	22a0      	movs	r2, #160	@ 0xa0
 8000384:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
  extmem_list_config[1].PsramObject.psram_public.Write_DummyCycle  = 4u;
 8000388:	4b10      	ldr	r3, [pc, #64]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 800038a:	2204      	movs	r2, #4
 800038c:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
  extmem_list_config[1].PsramObject.psram_public.Read_command      = 0x20u;
 8000390:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 8000392:	2220      	movs	r2, #32
 8000394:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
  extmem_list_config[1].PsramObject.psram_public.WrapRead_command  = 0x00u;
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 800039a:	2200      	movs	r2, #0
 800039c:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
  extmem_list_config[1].PsramObject.psram_public.Read_DummyCycle   = 4u;
 80003a0:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <MX_EXTMEM_MANAGER_Init+0xdc>)
 80003a2:	2204      	movs	r2, #4
 80003a4:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI2));
 80003a8:	2004      	movs	r0, #4
 80003aa:	f003 ff35 	bl	8004218 <HAL_RCCEx_GetPeriphCLKFreq>
 80003ae:	4603      	mov	r3, r0
 80003b0:	4619      	mov	r1, r3
 80003b2:	2000      	movs	r0, #0
 80003b4:	f006 fc98 	bl	8006ce8 <EXTMEM_Init>
  EXTMEM_Init(EXTMEMORY_2, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI1));
 80003b8:	2002      	movs	r0, #2
 80003ba:	f003 ff2d 	bl	8004218 <HAL_RCCEx_GetPeriphCLKFreq>
 80003be:	4603      	mov	r3, r0
 80003c0:	4619      	mov	r1, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	f006 fc90 	bl	8006ce8 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	24000108 	.word	0x24000108
 80003d0:	24000088 	.word	0x24000088
 80003d4:	24000028 	.word	0x24000028
 80003d8:	0bebc200 	.word	0x0bebc200

080003dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003e2:	4b3f      	ldr	r3, [pc, #252]	@ (80004e0 <main+0x104>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d11b      	bne.n	8000426 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003ee:	f3bf 8f4f 	dsb	sy
}
 80003f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f4:	f3bf 8f6f 	isb	sy
}
 80003f8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003fa:	4b39      	ldr	r3, [pc, #228]	@ (80004e0 <main+0x104>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000402:	f3bf 8f4f 	dsb	sy
}
 8000406:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000408:	f3bf 8f6f 	isb	sy
}
 800040c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800040e:	4b34      	ldr	r3, [pc, #208]	@ (80004e0 <main+0x104>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a33      	ldr	r2, [pc, #204]	@ (80004e0 <main+0x104>)
 8000414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000418:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800041a:	f3bf 8f4f 	dsb	sy
}
 800041e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000420:	f3bf 8f6f 	isb	sy
}
 8000424:	e000      	b.n	8000428 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000426:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000428:	4b2d      	ldr	r3, [pc, #180]	@ (80004e0 <main+0x104>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000430:	2b00      	cmp	r3, #0
 8000432:	d138      	bne.n	80004a6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000434:	4b2a      	ldr	r3, [pc, #168]	@ (80004e0 <main+0x104>)
 8000436:	2200      	movs	r2, #0
 8000438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800043c:	f3bf 8f4f 	dsb	sy
}
 8000440:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000442:	4b27      	ldr	r3, [pc, #156]	@ (80004e0 <main+0x104>)
 8000444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000448:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	0b5b      	lsrs	r3, r3, #13
 800044e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000452:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	08db      	lsrs	r3, r3, #3
 8000458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800045c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	015a      	lsls	r2, r3, #5
 8000462:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000466:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800046c:	491c      	ldr	r1, [pc, #112]	@ (80004e0 <main+0x104>)
 800046e:	4313      	orrs	r3, r2
 8000470:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	1e5a      	subs	r2, r3, #1
 8000478:	607a      	str	r2, [r7, #4]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d1ef      	bne.n	800045e <main+0x82>
    } while(sets-- != 0U);
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	1e5a      	subs	r2, r3, #1
 8000482:	60ba      	str	r2, [r7, #8]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1e5      	bne.n	8000454 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000488:	f3bf 8f4f 	dsb	sy
}
 800048c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800048e:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <main+0x104>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a13      	ldr	r2, [pc, #76]	@ (80004e0 <main+0x104>)
 8000494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000498:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800049a:	f3bf 8f4f 	dsb	sy
}
 800049e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
}
 80004a4:	e000      	b.n	80004a8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004a6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a8:	f000 fc28 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ac:	f000 f81a 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b0:	f000 f9d6 	bl	8000860 <MX_GPIO_Init>
  MX_HPDMA1_Init();
 80004b4:	f000 f8fe 	bl	80006b4 <MX_HPDMA1_Init>
  MX_XSPI1_Init();
 80004b8:	f000 f91c 	bl	80006f4 <MX_XSPI1_Init>
  MX_XSPI2_Init();
 80004bc:	f000 f976 	bl	80007ac <MX_XSPI2_Init>
  MX_FLASH_Init();
 80004c0:	f000 f8a3 	bl	800060a <MX_FLASH_Init>
  MX_SBS_Init();
 80004c4:	f000 f90e 	bl	80006e4 <MX_SBS_Init>
  MX_EXTMEM_MANAGER_Init();
 80004c8:	f7ff ff12 	bl	80002f0 <MX_EXTMEM_MANAGER_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Launch the application */
  if (BOOT_OK != BOOT_Application())
 80004cc:	f006 fb44 	bl	8006b58 <BOOT_Application>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d002      	beq.n	80004dc <main+0x100>
  {
    Error_Handler();
 80004d6:	f000 f9f5 	bl	80008c4 <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <main+0x100>
 80004e0:	e000ed00 	.word	0xe000ed00

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0b0      	sub	sp, #192	@ 0xc0
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ee:	229c      	movs	r2, #156	@ 0x9c
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f009 f9a6 	bl	8009844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2220      	movs	r2, #32
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f009 f9a0 	bl	8009844 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000504:	2001      	movs	r0, #1
 8000506:	f001 fcc1 	bl	8001e8c <HAL_PWREx_ControlVoltageScaling>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x30>
  {
    Error_Handler();
 8000510:	f000 f9d8 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000514:	2301      	movs	r3, #1
 8000516:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000518:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800051c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 800051e:	2302      	movs	r3, #2
 8000520:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSE;
 8000522:	2302      	movs	r3, #2
 8000524:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLM = 4;
 8000526:	2304      	movs	r3, #4
 8000528:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLN = 100;
 800052a:	2364      	movs	r3, #100	@ 0x64
 800052c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLP = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 8000532:	2302      	movs	r3, #2
 8000534:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL1.PLLR = 2;
 8000536:	2302      	movs	r3, #2
 8000538:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL1.PLLS = 2;
 800053a:	2302      	movs	r3, #2
 800053c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL1.PLLT = 2;
 800053e:	2302      	movs	r3, #2
 8000540:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	2302      	movs	r3, #2
 800054c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLM = 6;
 800054e:	2306      	movs	r3, #6
 8000550:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLN = 100;
 8000552:	2364      	movs	r3, #100	@ 0x64
 8000554:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL2.PLLP = 2;
 8000556:	2302      	movs	r3, #2
 8000558:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLQ = 2;
 800055c:	2302      	movs	r3, #2
 800055e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLR = 2;
 8000562:	2302      	movs	r3, #2
 8000564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL2.PLLS = 2;
 8000568:	2302      	movs	r3, #2
 800056a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL2.PLLT = 2;
 800056e:	2302      	movs	r3, #2
 8000570:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSE;
 8000580:	2302      	movs	r3, #2
 8000582:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLM = 2;
 8000586:	2302      	movs	r3, #2
 8000588:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLN = 50;
 800058c:	2332      	movs	r3, #50	@ 0x32
 800058e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLP = 2;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLQ = 2;
 8000598:	2302      	movs	r3, #2
 800059a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLR = 24;
 800059e:	2318      	movs	r3, #24
 80005a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLS = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLT = 2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fcae 	bl	8001f1c <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80005c6:	f000 f97d 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	233f      	movs	r3, #63	@ 0x3f
 80005cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK4|RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005d6:	2308      	movs	r3, #8
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005da:	2304      	movs	r3, #4
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005de:	2340      	movs	r3, #64	@ 0x40
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV2;
 80005e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2137      	movs	r1, #55	@ 0x37
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 ffcc 	bl	8002590 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80005fe:	f000 f961 	bl	80008c4 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	37c0      	adds	r7, #192	@ 0xc0
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b08c      	sub	sp, #48	@ 0x30
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FLASH_Init 0 */

  /* USER CODE END FLASH_Init 0 */

  FLASH_OBProgramInitTypeDef pOBInit = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	222c      	movs	r2, #44	@ 0x2c
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f009 f914 	bl	8009844 <memset>

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  HAL_FLASHEx_OBGetConfig(&pOBInit);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f001 f868 	bl	80016f4 <HAL_FLASHEx_OBGetConfig>
  if ((pOBInit.USERConfig1 & OB_IWDG_SW) != OB_IWDG_SW||
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00e      	beq.n	800064c <MX_FLASH_Init+0x42>
(pOBInit.USERConfig1 & OB_XSPI1_HSLV_ENABLE) != OB_XSPI1_HSLV_ENABLE||
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if ((pOBInit.USERConfig1 & OB_IWDG_SW) != OB_IWDG_SW||
 8000634:	2b00      	cmp	r3, #0
 8000636:	d009      	beq.n	800064c <MX_FLASH_Init+0x42>
(pOBInit.USERConfig1 & OB_XSPI2_HSLV_ENABLE) != OB_XSPI2_HSLV_ENABLE||
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
(pOBInit.USERConfig1 & OB_XSPI1_HSLV_ENABLE) != OB_XSPI1_HSLV_ENABLE||
 800063e:	2b00      	cmp	r3, #0
 8000640:	d004      	beq.n	800064c <MX_FLASH_Init+0x42>
(pOBInit.USERConfig2 & OB_I2C_NI3C_I2C) != OB_I2C_NI3C_I2C)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
(pOBInit.USERConfig1 & OB_XSPI2_HSLV_ENABLE) != OB_XSPI2_HSLV_ENABLE||
 8000648:	2b00      	cmp	r3, #0
 800064a:	d12f      	bne.n	80006ac <MX_FLASH_Init+0xa2>
  {
  if (HAL_FLASH_Unlock() != HAL_OK)
 800064c:	f000 ff0a 	bl	8001464 <HAL_FLASH_Unlock>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_FLASH_Init+0x50>
  {
    Error_Handler();
 8000656:	f000 f935 	bl	80008c4 <Error_Handler>
  }
  if (HAL_FLASH_OB_Unlock() != HAL_OK)
 800065a:	f000 ff3d 	bl	80014d8 <HAL_FLASH_OB_Unlock>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_FLASH_Init+0x5e>
  {
    Error_Handler();
 8000664:	f000 f92e 	bl	80008c4 <Error_Handler>
  }
  pOBInit.OptionType = OPTIONBYTE_USER;
 8000668:	2302      	movs	r3, #2
 800066a:	607b      	str	r3, [r7, #4]
  pOBInit.USERType = OB_USER_IWDG_SW|OB_USER_XSPI1_HSLV
 800066c:	f241 0332 	movw	r3, #4146	@ 0x1032
 8000670:	613b      	str	r3, [r7, #16]
                              |OB_USER_XSPI2_HSLV|OB_USER_I2C_NI3C;
  pOBInit.USERConfig1 = OB_IWDG_SW|OB_XSPI1_HSLV_ENABLE
 8000672:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8000676:	617b      	str	r3, [r7, #20]
                              |OB_XSPI2_HSLV_ENABLE;
  pOBInit.USERConfig2 = OB_I2C_NI3C_I2C;
 8000678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800067c:	61bb      	str	r3, [r7, #24]
  if (HAL_FLASHEx_OBProgram(&pOBInit) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4618      	mov	r0, r3
 8000682:	f000 ffc1 	bl	8001608 <HAL_FLASHEx_OBProgram>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_FLASH_Init+0x86>
  {
    Error_Handler();
 800068c:	f000 f91a 	bl	80008c4 <Error_Handler>
  }
  if (HAL_FLASH_OB_Lock() != HAL_OK)
 8000690:	f000 ff48 	bl	8001524 <HAL_FLASH_OB_Lock>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_FLASH_Init+0x94>
  {
    Error_Handler();
 800069a:	f000 f913 	bl	80008c4 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 800069e:	f000 ff03 	bl	80014a8 <HAL_FLASH_Lock>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_FLASH_Init+0xa2>
  {
    Error_Handler();
 80006a8:	f000 f90c 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3730      	adds	r7, #48	@ 0x30
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <MX_HPDMA1_Init>:
  * @brief HPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HPDMA1_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HPDMA1_Init 0 */

  /* USER CODE END HPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_HPDMA1_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_HPDMA1_Init+0x2c>)
 80006bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80006c0:	4a07      	ldr	r2, [pc, #28]	@ (80006e0 <MX_HPDMA1_Init+0x2c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <MX_HPDMA1_Init+0x2c>)
 80006cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END HPDMA1_Init 1 */
  /* USER CODE BEGIN HPDMA1_Init 2 */

  /* USER CODE END HPDMA1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	58024400 	.word	0x58024400

080006e4 <MX_SBS_Init>:
  * @brief SBS Initialization Function
  * @param None
  * @retval None
  */
static void MX_SBS_Init(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END SBS_Init 1 */
  /* USER CODE BEGIN SBS_Init 2 */

  /* USER CODE END SBS_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
	...

080006f4 <MX_XSPI1_Init>:
  * @brief XSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI1_Init 0 */

  /* USER CODE END XSPI1_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI1_Init 1 */

  /* USER CODE END XSPI1_Init 1 */
  /* XSPI1 parameter configuration*/
  hxspi1.Instance = XSPI1;
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000706:	4a28      	ldr	r2, [pc, #160]	@ (80007a8 <MX_XSPI1_Init+0xb4>)
 8000708:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 2;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 800070c:	2202      	movs	r2, #2
 800070e:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000718:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800071c:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_256MB;
 800071e:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000720:	2218      	movs	r2, #24
 8000722:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 1;
 8000724:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000726:	2201      	movs	r2, #1
 8000728:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 800072a:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000730:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_32_BYTES;
 8000736:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000738:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800073c:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 800074c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_8KB;
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000754:	220a      	movs	r2, #10
 8000756:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 800075a:	2200      	movs	r2, #0
 800075c:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi1.Init.Refresh = 0;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000760:	2200      	movs	r2, #0
 8000762:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 8000766:	2200      	movs	r2, #0
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 800076c:	f005 f8f4 	bl	8005958 <HAL_XSPI_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_XSPI1_Init+0x86>
  {
    Error_Handler();
 8000776:	f000 f8a5 	bl	80008c4 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 800077a:	2310      	movs	r3, #16
 800077c:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_1;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_XSPIM_Config(&hxspi1, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	@ (80007a4 <MX_XSPI1_Init+0xb0>)
 800078c:	f005 fe84 	bl	8006498 <HAL_XSPIM_Config>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_XSPI1_Init+0xa6>
  {
    Error_Handler();
 8000796:	f000 f895 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI1_Init 2 */

  /* USER CODE END XSPI1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	24000028 	.word	0x24000028
 80007a8:	52005000 	.word	0x52005000

080007ac <MX_XSPI2_Init>:
  * @brief XSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  /* XSPI2 parameter configuration*/
  hxspi2.Instance = XSPI2;
 80007bc:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007be:	4a27      	ldr	r2, [pc, #156]	@ (800085c <MX_XSPI2_Init+0xb0>)
 80007c0:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 4;
 80007c2:	4b25      	ldr	r3, [pc, #148]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80007c8:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 80007ce:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80007d4:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007d8:	221a      	movs	r2, #26
 80007da:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 2;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007de:	2202      	movs	r2, #2
 80007e0:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 0;
 80007f4:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_XSPI2_Init+0xac>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <MX_XSPI2_Init+0xac>)
 8000802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000806:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_XSPI2_Init+0xac>)
 800080a:	2200      	movs	r2, #0
 800080c:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
 800080e:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_XSPI2_Init+0xac>)
 8000810:	2200      	movs	r2, #0
 8000812:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
 8000814:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_XSPI2_Init+0xac>)
 8000816:	2200      	movs	r2, #0
 8000818:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_XSPI2_Init+0xac>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
 8000820:	480d      	ldr	r0, [pc, #52]	@ (8000858 <MX_XSPI2_Init+0xac>)
 8000822:	f005 f899 	bl	8005958 <HAL_XSPI_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_XSPI2_Init+0x84>
  {
    Error_Handler();
 800082c:	f000 f84a 	bl	80008c4 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8000830:	2310      	movs	r3, #16
 8000832:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
 8000834:	2301      	movs	r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_XSPI2_Init+0xac>)
 8000842:	f005 fe29 	bl	8006498 <HAL_XSPIM_Config>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_XSPI2_Init+0xa4>
  {
    Error_Handler();
 800084c:	f000 f83a 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	24000088 	.word	0x24000088
 800085c:	5200a000 	.word	0x5200a000

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPION_CLK_ENABLE();
 8000866:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <MX_GPIO_Init+0x60>)
 8000868:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800086c:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <MX_GPIO_Init+0x60>)
 800086e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000872:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_GPIO_Init+0x60>)
 8000878:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOO_CLK_ENABLE();
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_GPIO_Init+0x60>)
 8000882:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000886:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <MX_GPIO_Init+0x60>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000890:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_GPIO_Init+0x60>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOP_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_GPIO_Init+0x60>)
 800089c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008a0:	4a07      	ldr	r2, [pc, #28]	@ (80008c0 <MX_GPIO_Init+0x60>)
 80008a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008aa:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <MX_GPIO_Init+0x60>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	58024400 	.word	0x58024400

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b0a8      	sub	sp, #160	@ 0xa0
 80008d4:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	229c      	movs	r2, #156	@ 0x9c
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f008 ffb1 	bl	8009844 <memset>

  /* Configure the system Power Supply */

  if (HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY) != HAL_OK)
 80008e2:	2004      	movs	r0, #4
 80008e4:	f001 fa80 	bl	8001de8 <HAL_PWREx_ConfigSupply>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_MspInit+0x22>
  {
    /* Initialization error */
    Error_Handler();
 80008ee:	f7ff ffe9 	bl	80008c4 <Error_Handler>

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SBS_CLK_ENABLE();
 80008f2:	4b32      	ldr	r3, [pc, #200]	@ (80009bc <HAL_MspInit+0xec>)
 80008f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80008f8:	4a30      	ldr	r2, [pc, #192]	@ (80009bc <HAL_MspInit+0xec>)
 80008fa:	f043 0302 	orr.w	r3, r3, #2
 80008fe:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000902:	4b2e      	ldr	r3, [pc, #184]	@ (80009bc <HAL_MspInit+0xec>)
 8000904:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2005      	movs	r0, #5
 8000912:	f000 fc08 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000916:	2005      	movs	r0, #5
 8000918:	f000 fc1f 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	2008      	movs	r0, #8
 8000922:	f000 fc00 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000926:	2008      	movs	r0, #8
 8000928:	f000 fc17 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	200a      	movs	r0, #10
 8000932:	f000 fbf8 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000936:	200a      	movs	r0, #10
 8000938:	f000 fc0f 	bl	800115a <HAL_NVIC_EnableIRQ>

  /* Enable the XSPIM_P1 interface */
  HAL_PWREx_EnableXSPIM1();
 800093c:	f001 face 	bl	8001edc <HAL_PWREx_EnableXSPIM1>

  /* Enable the XSPIM_P2 interface */
  HAL_PWREx_EnableXSPIM2();
 8000940:	f001 fadc 	bl	8001efc <HAL_PWREx_EnableXSPIM2>

  /* The CSI is used by the compensation cells and must be enabled before enabling the
     compensation cells.
     For more details refer to RM0477 [SBS I/O compensation cell management] chapter.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000944:	2310      	movs	r3, #16
 8000946:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000948:	2380      	movs	r3, #128	@ 0x80
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4618      	mov	r0, r3
 8000950:	f001 fae4 	bl	8001f1c <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_MspInit+0x8e>
  {
    Error_Handler();
 800095a:	f7ff ffb3 	bl	80008c4 <Error_Handler>
  }

  /* Configure the compensation cell */
  HAL_SBS_ConfigCompensationCell(SBS_IO_XSPI1_CELL, SBS_IO_CELL_CODE, 0U, 0U);
 800095e:	2300      	movs	r3, #0
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2004      	movs	r0, #4
 8000966:	f000 fa9b 	bl	8000ea0 <HAL_SBS_ConfigCompensationCell>
  HAL_SBS_ConfigCompensationCell(SBS_IO_XSPI2_CELL, SBS_IO_CELL_CODE, 0U, 0U);
 800096a:	2300      	movs	r3, #0
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2010      	movs	r0, #16
 8000972:	f000 fa95 	bl	8000ea0 <HAL_SBS_ConfigCompensationCell>

  /* Enable compensation cell */
  HAL_SBS_EnableCompensationCell(SBS_IO_XSPI1_CELL);
 8000976:	2004      	movs	r0, #4
 8000978:	f000 fa68 	bl	8000e4c <HAL_SBS_EnableCompensationCell>
  HAL_SBS_EnableCompensationCell(SBS_IO_XSPI2_CELL);
 800097c:	2010      	movs	r0, #16
 800097e:	f000 fa65 	bl	8000e4c <HAL_SBS_EnableCompensationCell>

  /* wait ready before enabled IO */
  while(HAL_SBS_GetCompensationCellReadyStatus(SBS_IO_XSPI1_CELL_READY) != 1U);
 8000982:	bf00      	nop
 8000984:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000988:	f000 fa74 	bl	8000e74 <HAL_SBS_GetCompensationCellReadyStatus>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d1f8      	bne.n	8000984 <HAL_MspInit+0xb4>
  while(HAL_SBS_GetCompensationCellReadyStatus(SBS_IO_XSPI2_CELL_READY) != 1U);
 8000992:	bf00      	nop
 8000994:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000998:	f000 fa6c 	bl	8000e74 <HAL_SBS_GetCompensationCellReadyStatus>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d1f8      	bne.n	8000994 <HAL_MspInit+0xc4>

  /* high speed low voltage config */
  HAL_SBS_EnableIOSpeedOptimize(SBS_IO_XSPI1_HSLV);
 80009a2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80009a6:	f000 facf 	bl	8000f48 <HAL_SBS_EnableIOSpeedOptimize>
  HAL_SBS_EnableIOSpeedOptimize(SBS_IO_XSPI2_HSLV);
 80009aa:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80009ae:	f000 facb 	bl	8000f48 <HAL_SBS_EnableIOSpeedOptimize>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	37a0      	adds	r7, #160	@ 0xa0
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	58024400 	.word	0x58024400

080009c0 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0b0      	sub	sp, #192	@ 0xc0
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009dc:	2284      	movs	r2, #132	@ 0x84
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f008 ff2f 	bl	8009844 <memset>
  if(hxspi->Instance==XSPI1)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a73      	ldr	r2, [pc, #460]	@ (8000bb8 <HAL_XSPI_MspInit+0x1f8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d17e      	bne.n	8000aee <HAL_XSPI_MspInit+0x12e>

  /* USER CODE END XSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI1;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_PLL2S;
 80009f4:	2310      	movs	r3, #16
 80009f6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fd07 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_XSPI_MspInit+0x4c>
    {
      Error_Handler();
 8000a08:	f7ff ff5c 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_XSPIM_CLK_ENABLED++;
 8000a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8000bbc <HAL_XSPI_MspInit+0x1fc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a6a      	ldr	r2, [pc, #424]	@ (8000bbc <HAL_XSPI_MspInit+0x1fc>)
 8000a14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
 8000a16:	4b69      	ldr	r3, [pc, #420]	@ (8000bbc <HAL_XSPI_MspInit+0x1fc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d10c      	bne.n	8000a38 <HAL_XSPI_MspInit+0x78>
      __HAL_RCC_XSPIM_CLK_ENABLE();
 8000a1e:	4b68      	ldr	r3, [pc, #416]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a20:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a24:	4a66      	ldr	r2, [pc, #408]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000a2e:	4b64      	ldr	r3, [pc, #400]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a30:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    __HAL_RCC_XSPI1_CLK_ENABLE();
 8000a38:	4b61      	ldr	r3, [pc, #388]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a3e:	4a60      	ldr	r2, [pc, #384]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a40:	f043 0320 	orr.w	r3, r3, #32
 8000a44:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000a48:	4b5d      	ldr	r3, [pc, #372]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOO_CLK_ENABLE();
 8000a52:	4b5b      	ldr	r3, [pc, #364]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a58:	4a59      	ldr	r2, [pc, #356]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a62:	4b57      	ldr	r3, [pc, #348]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOP_CLK_ENABLE();
 8000a6c:	4b54      	ldr	r3, [pc, #336]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a72:	4a53      	ldr	r2, [pc, #332]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a7c:	4b50      	ldr	r3, [pc, #320]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000a7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a82:	61bb      	str	r3, [r7, #24]
 8000a84:	69bb      	ldr	r3, [r7, #24]
    PO4     ------> XSPIM_P1_CLK
    PP6     ------> XSPIM_P1_IO6
    PO0     ------> XSPIM_P1_NCS1
    PP9     ------> XSPIM_P1_IO9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_0;
 8000a86:	231d      	movs	r3, #29
 8000a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
 8000a9e:	2309      	movs	r3, #9
 8000aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
 8000aa4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4846      	ldr	r0, [pc, #280]	@ (8000bc4 <HAL_XSPI_MspInit+0x204>)
 8000aac:	f001 f846 	bl	8001b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_2
 8000ab0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
 8000aca:	2309      	movs	r3, #9
 8000acc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOP, &GPIO_InitStruct);
 8000ad0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	483c      	ldr	r0, [pc, #240]	@ (8000bc8 <HAL_XSPI_MspInit+0x208>)
 8000ad8:	f001 f830 	bl	8001b3c <HAL_GPIO_Init>

    /* XSPI1 interrupt Init */
    HAL_NVIC_SetPriority(XSPI1_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2069      	movs	r0, #105	@ 0x69
 8000ae2:	f000 fb20 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(XSPI1_IRQn);
 8000ae6:	2069      	movs	r0, #105	@ 0x69
 8000ae8:	f000 fb37 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN XSPI2_MspInit 1 */

  /* USER CODE END XSPI2_MspInit 1 */
  }

}
 8000aec:	e060      	b.n	8000bb0 <HAL_XSPI_MspInit+0x1f0>
  else if(hxspi->Instance==XSPI2)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a36      	ldr	r2, [pc, #216]	@ (8000bcc <HAL_XSPI_MspInit+0x20c>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d15b      	bne.n	8000bb0 <HAL_XSPI_MspInit+0x1f0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
 8000af8:	2304      	movs	r3, #4
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_PLL2S;
 8000afc:	2340      	movs	r3, #64	@ 0x40
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fc83 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_XSPI_MspInit+0x154>
      Error_Handler();
 8000b10:	f7ff fed8 	bl	80008c4 <Error_Handler>
    HAL_RCC_XSPIM_CLK_ENABLED++;
 8000b14:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <HAL_XSPI_MspInit+0x1fc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4a28      	ldr	r2, [pc, #160]	@ (8000bbc <HAL_XSPI_MspInit+0x1fc>)
 8000b1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
 8000b1e:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <HAL_XSPI_MspInit+0x1fc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d10c      	bne.n	8000b40 <HAL_XSPI_MspInit+0x180>
      __HAL_RCC_XSPIM_CLK_ENABLE();
 8000b26:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000b28:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000b2c:	4a24      	ldr	r2, [pc, #144]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b32:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000b36:	4b22      	ldr	r3, [pc, #136]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000b38:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_XSPI2_CLK_ENABLE();
 8000b40:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000b42:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000b48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b4c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000b52:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPION_CLK_ENABLE();
 8000b5a:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000b5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b60:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000b62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b66:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_XSPI_MspInit+0x200>)
 8000b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_11
 8000b74:	f640 737f 	movw	r3, #3967	@ 0xf7f
 8000b78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
 8000b8e:	2309      	movs	r3, #9
 8000b90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
 8000b94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <HAL_XSPI_MspInit+0x210>)
 8000b9c:	f000 ffce 	bl	8001b3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(XSPI2_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	206a      	movs	r0, #106	@ 0x6a
 8000ba6:	f000 fabe 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(XSPI2_IRQn);
 8000baa:	206a      	movs	r0, #106	@ 0x6a
 8000bac:	f000 fad5 	bl	800115a <HAL_NVIC_EnableIRQ>
}
 8000bb0:	bf00      	nop
 8000bb2:	37c0      	adds	r7, #192	@ 0xc0
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	52005000 	.word	0x52005000
 8000bbc:	240000e8 	.word	0x240000e8
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	58023800 	.word	0x58023800
 8000bc8:	58023c00 	.word	0x58023c00
 8000bcc:	5200a000 	.word	0x5200a000
 8000bd0:	58023400 	.word	0x58023400

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 f8bb 	bl	8000da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <FLASH_IRQHandler>:

/**
  * @brief This function handles FLASH interrupts.
  */
void FLASH_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000c44:	f000 fb48 	bl	80012d8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <XSPI1_IRQHandler>:

/**
  * @brief This function handles XSPI1 global interrupt.
  */
void XSPI1_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN XSPI1_IRQn 0 */

  /* USER CODE END XSPI1_IRQn 0 */
  HAL_XSPI_IRQHandler(&hxspi1);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <XSPI1_IRQHandler+0x10>)
 8000c62:	f004 ff61 	bl	8005b28 <HAL_XSPI_IRQHandler>
  /* USER CODE BEGIN XSPI1_IRQn 1 */

  /* USER CODE END XSPI1_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	24000028 	.word	0x24000028

08000c70 <XSPI2_IRQHandler>:

/**
  * @brief This function handles XSPI2 global interrupt.
  */
void XSPI2_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN XSPI2_IRQn 0 */

  /* USER CODE END XSPI2_IRQn 0 */
  HAL_XSPI_IRQHandler(&hxspi2);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <XSPI2_IRQHandler+0x10>)
 8000c76:	f004 ff57 	bl	8005b28 <HAL_XSPI_IRQHandler>
  /* USER CODE BEGIN XSPI2_IRQn 1 */

  /* USER CODE END XSPI2_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	24000088 	.word	0x24000088

08000c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c84:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c88:	f000 f826 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	@ (8000cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <LoopForever+0xe>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd0 <LoopForever+0x16>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f008 fdcf 	bl	8009854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff fb91 	bl	80003dc <main>

08000cba <LoopForever>:

LoopForever:
  b LoopForever
 8000cba:	e7fe      	b.n	8000cba <LoopForever>
  ldr   r0, =_estack
 8000cbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cc4:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
 8000cc8:	08009924 	.word	0x08009924
  ldr r2, =_sbss
 8000ccc:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
 8000cd0:	240003e8 	.word	0x240003e8

08000cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_2_IRQHandler>
	...

08000cd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d06:	2003      	movs	r0, #3
 8000d08:	f000 fa02 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0c:	200f      	movs	r0, #15
 8000d0e:	f000 f80d 	bl	8000d2c <HAL_InitTick>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	e001      	b.n	8000d22 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d1e:	f7ff fdd7 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d22:	79fb      	ldrb	r3, [r7, #7]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <HAL_InitTick+0x6c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d023      	beq.n	8000d88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d40:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <HAL_InitTick+0x70>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <HAL_InitTick+0x6c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fa0d 	bl	8001176 <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10f      	bne.n	8000d82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d809      	bhi.n	8000d7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f9d9 	bl	8001126 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d74:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_InitTick+0x74>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e007      	b.n	8000d8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e004      	b.n	8000d8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	e001      	b.n	8000d8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	24000008 	.word	0x24000008
 8000d9c:	24000000 	.word	0x24000000
 8000da0:	24000004 	.word	0x24000004

08000da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_IncTick+0x24>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <HAL_IncTick+0x24>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	24000008 	.word	0x24000008
 8000dc8:	240000ec 	.word	0x240000ec

08000dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <HAL_GetTick+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	240000ec 	.word	0x240000ec

08000de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff ffee 	bl	8000dcc <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfc:	d005      	beq.n	8000e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_Delay+0x44>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0a:	bf00      	nop
 8000e0c:	f7ff ffde 	bl	8000dcc <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d8f7      	bhi.n	8000e0c <HAL_Delay+0x28>
  {
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	24000008 	.word	0x24000008

08000e2c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_SuspendTick+0x1c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_SuspendTick+0x1c>)
 8000e36:	f023 0302 	bic.w	r3, r3, #2
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_SBS_EnableCompensationCell>:
  *            @arg SBS_IO_XSPI1_CELL Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL Compensation cell for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableCompensationCell(uint32_t Selection)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_SBS_EnableCompensationCell+0x24>)
 8000e56:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000e5a:	4905      	ldr	r1, [pc, #20]	@ (8000e70 <HAL_SBS_EnableCompensationCell+0x24>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	58000400 	.word	0x58000400

08000e74 <HAL_SBS_GetCompensationCellReadyStatus>:
  *            @arg SBS_IO_XSPI1_CELL_READY Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL_READY Compensation cell for the I/O of the XSPI2
  * @retval Ready status (1 or 0)
  */
uint32_t HAL_SBS_GetCompensationCellReadyStatus(uint32_t Selection)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL_READY(Selection));

  return (((SBS->CCCSR & Selection) == 0U) ? 0UL : 1UL);
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <HAL_SBS_GetCompensationCellReadyStatus+0x28>)
 8000e7e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bf14      	ite	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	2300      	moveq	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	58000400 	.word	0x58000400

08000ea0 <HAL_SBS_ConfigCompensationCell>:
  * @param  PmosValue In case SBS_IO_REGISTER_CODE is selected, it  provides the Pmos value
  *                   to apply in range 0 to 15 else this parameter is not used
  * @retval None
  */
void HAL_SBS_ConfigCompensationCell(uint32_t Selection, uint32_t Code, uint32_t NmosValue, uint32_t PmosValue)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));
  assert_param(IS_SBS_IO_COMPENSATION_CODE(Code));

  if (Code == SBS_IO_REGISTER_CODE)
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d121      	bne.n	8000ef8 <HAL_SBS_ConfigCompensationCell+0x58>
  {
    /* Check the parameters */
    assert_param(IS_SBS_IO_COMPENSATION_CELL_NMOS_VALUE(NmosValue));
    assert_param(IS_SBS_IO_COMPENSATION_CELL_PMOS_VALUE(PmosValue));

    offset = ((Selection == SBS_IO_ANALOG_CELL) ? 0U : ((Selection == SBS_IO_XSPI1_CELL) ? 8U : 16U));
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d006      	beq.n	8000ec8 <HAL_SBS_ConfigCompensationCell+0x28>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d101      	bne.n	8000ec4 <HAL_SBS_ConfigCompensationCell+0x24>
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	e002      	b.n	8000eca <HAL_SBS_ConfigCompensationCell+0x2a>
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	e000      	b.n	8000eca <HAL_SBS_ConfigCompensationCell+0x2a>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]

    MODIFY_REG(SBS->CCSWVALR, (0xFFU << offset), ((NmosValue << offset) | (PmosValue << (offset + 4U))));
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000ece:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8000ed2:	21ff      	movs	r1, #255	@ 0xff
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	4099      	lsls	r1, r3
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	fa00 f303 	lsl.w	r3, r0, r3
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	4914      	ldr	r1, [pc, #80]	@ (8000f44 <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	f8c1 3118 	str.w	r3, [r1, #280]	@ 0x118
  }

  MODIFY_REG(SBS->CCCSR, (Selection << 1U), (Code << (POSITION_VAL(Selection) + 1U)));
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000efa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	43db      	mvns	r3, r3
 8000f04:	401a      	ands	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa93 f3a3 	rbit	r3, r3
 8000f10:	613b      	str	r3, [r7, #16]
  return result;
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_SBS_ConfigCompensationCell+0x80>
    return 32U;
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	e003      	b.n	8000f28 <HAL_SBS_ConfigCompensationCell+0x88>
  return __builtin_clz(value);
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fab3 f383 	clz	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	4904      	ldr	r1, [pc, #16]	@ (8000f44 <HAL_SBS_ConfigCompensationCell+0xa4>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000f38:	bf00      	nop
 8000f3a:	3724      	adds	r7, #36	@ 0x24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	58000400 	.word	0x58000400

08000f48 <HAL_SBS_EnableIOSpeedOptimize>:
  *            @arg SBS_IO_XSPI1_HSLV High speed at low voltage for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_HSLV High speed at low voltage for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableIOSpeedOptimize(uint32_t Selection)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_IOHSLV(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 8000f52:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000f56:	4905      	ldr	r1, [pc, #20]	@ (8000f6c <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	58000400 	.word	0x58000400

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	05fa0000 	.word	0x05fa0000

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	@ (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	@ (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	@ (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff40 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff90 	bl	8001064 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5f 	bl	8001010 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32h7rsxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff33 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa4 	bl	80010cc <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001196:	f7ff fe19 	bl	8000dcc <HAL_GetTick>
 800119a:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e06b      	b.n	800127e <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d008      	beq.n	80011c4 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2220      	movs	r2, #32
 80011b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e05c      	b.n	800127e <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0204 	orr.w	r2, r2, #4
 80011d2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2205      	movs	r2, #5
 80011d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80011dc:	e020      	b.n	8001220 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80011de:	f7ff fdf5 	bl	8000dcc <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b05      	cmp	r3, #5
 80011ea:	d919      	bls.n	8001220 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f0:	f043 0210 	orr.w	r2, r3, #16
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001210:	2201      	movs	r2, #1
 8001212:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e02e      	b.n	800127e <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0d7      	beq.n	80011de <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0202 	orr.w	r2, r2, #2
 800123c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2204      	movs	r2, #4
 8001242:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800124e:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800125c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001260:	2b00      	cmp	r3, #0
 8001262:	d007      	beq.n	8001274 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001268:	2201      	movs	r2, #1
 800126a:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e018      	b.n	80012ca <HAL_DMA_Abort_IT+0x44>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d004      	beq.n	80012ae <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2220      	movs	r2, #32
 80012a8:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00d      	b.n	80012ca <HAL_DMA_Abort_IT+0x44>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2204      	movs	r2, #4
 80012b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6959      	ldr	r1, [r3, #20]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f242 0304 	movw	r3, #8196	@ 0x2004
 80012c4:	430b      	orrs	r3, r1
 80012c6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_FLASH_IRQHandler>:
/**
  * @brief  Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  uint32_t param = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Save Flash errors */
  error = FLASH->ISR & FLASH_FLAG_ISR_ERRORS;
 80012e2:	4b53      	ldr	r3, [pc, #332]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 80012e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012e6:	4b53      	ldr	r3, [pc, #332]	@ (8001434 <HAL_FLASH_IRQHandler+0x15c>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	603b      	str	r3, [r7, #0]
  error |= (FLASH->OPTISR & FLASH_FLAG_OPTISR_ERRORS);
 80012ec:	4b50      	ldr	r3, [pc, #320]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 80012ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80012f2:	f003 43b0 	and.w	r3, r3, #1476395008	@ 0x58000000
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	603b      	str	r3, [r7, #0]

  /* Set parameter of the callback */
  if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_SECTORS)
 80012fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b04      	cmp	r3, #4
 8001302:	d103      	bne.n	800130c <HAL_FLASH_IRQHandler+0x34>
  {
    param = pFlash.Sector;
 8001304:	4b4c      	ldr	r3, [pc, #304]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e008      	b.n	800131e <HAL_FLASH_IRQHandler+0x46>
  }
  else if ((pFlash.ProcedureOnGoing & FLASH_CR_PG) != 0U)
 800130c:	4b4a      	ldr	r3, [pc, #296]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <HAL_FLASH_IRQHandler+0x46>
  {
    param = pFlash.Address;
 8001318:	4b47      	ldr	r3, [pc, #284]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	607b      	str	r3, [r7, #4]
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }

  /* Clear operation bit on the on-going procedure */
  CLEAR_BIT(FLASH->CR, (pFlash.ProcedureOnGoing & ~(FLASH_WORD_SIZE_MASK)));
 800131e:	4b44      	ldr	r3, [pc, #272]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	4b45      	ldr	r3, [pc, #276]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800132a:	43db      	mvns	r3, r3
 800132c:	4940      	ldr	r1, [pc, #256]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 800132e:	4013      	ands	r3, r2
 8001330:	610b      	str	r3, [r1, #16]

  /* Check FLASH operation error flags */
  if (error != 0U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d016      	beq.n	8001366 <HAL_FLASH_IRQHandler+0x8e>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8001338:	4b3f      	ldr	r3, [pc, #252]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4313      	orrs	r3, r2
 8001340:	4a3d      	ldr	r2, [pc, #244]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 8001342:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    FLASH->ICR = (error & FLASH_FLAG_ISR_ERRORS);
 8001344:	493a      	ldr	r1, [pc, #232]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <HAL_FLASH_IRQHandler+0x15c>)
 800134a:	4013      	ands	r3, r2
 800134c:	628b      	str	r3, [r1, #40]	@ 0x28
    FLASH->OPTICR = (error & FLASH_FLAG_OPTISR_ERRORS);
 800134e:	4a38      	ldr	r2, [pc, #224]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f003 43b0 	and.w	r3, r3, #1476395008	@ 0x58000000
 8001356:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = 0U;
 800135a:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(param);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f875 	bl	8001450 <HAL_FLASH_OperationErrorCallback>
  }

  /* Check FLASH End of Operation flag  */
  if ((FLASH->ISR & FLASH_FLAG_EOP) != 0U)
 8001366:	4b32      	ldr	r3, [pc, #200]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 8001368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d028      	beq.n	80013c4 <HAL_FLASH_IRQHandler+0xec>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->ICR = FLASH_FLAG_EOP;
 8001372:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 8001374:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001378:	629a      	str	r2, [r3, #40]	@ 0x28

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_SECTORS)
 800137a:	4b2f      	ldr	r3, [pc, #188]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b04      	cmp	r3, #4
 8001380:	d11a      	bne.n	80013b8 <HAL_FLASH_IRQHandler+0xe0>
    {
      /* Nb of sectors to erase can be decreased */
      pFlash.NbSectorsToErase--;
 8001382:	4b2d      	ldr	r3, [pc, #180]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	3b01      	subs	r3, #1
 8001388:	4a2b      	ldr	r2, [pc, #172]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 800138a:	6153      	str	r3, [r2, #20]

      /* Check if there are still sectors to erase */
      if (pFlash.NbSectorsToErase != 0U)
 800138c:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00a      	beq.n	80013aa <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Increment sector number */
        pFlash.Sector++;
 8001394:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	3301      	adds	r3, #1
 800139a:	4a27      	ldr	r2, [pc, #156]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 800139c:	6113      	str	r3, [r2, #16]
        FLASH_SectorErase(pFlash.Sector);
 800139e:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f9e6 	bl	8001774 <FLASH_SectorErase>
 80013a8:	e009      	b.n	80013be <HAL_FLASH_IRQHandler+0xe6>
      }
      else
      {
        /* No more sectors to Erase */
        pFlash.ProcedureOnGoing = 0U;
 80013aa:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
        param = 0xFFFFFFFFU;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e002      	b.n	80013be <HAL_FLASH_IRQHandler+0xe6>
      }
    }
    else
    {
      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = 0U;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
    }

    /* FLASH EOP interrupt user callback */
    HAL_FLASH_EndOfOperationCallback(param);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f83c 	bl	800143c <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == 0U)
 80013c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d108      	bne.n	80013de <HAL_FLASH_IRQHandler+0x106>
  {
    /* Disable End of Operation and Error interrupts */
    CLEAR_BIT(FLASH->IER, (FLASH_IT_EOP | FLASH_IT_WRPERR | FLASH_IT_PGSERR | FLASH_IT_STRBERR | FLASH_IT_INCERR));
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 80013d2:	f423 133c 	bic.w	r3, r3, #3080192	@ 0x2f0000
 80013d6:	6213      	str	r3, [r2, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <HAL_FLASH_IRQHandler+0x160>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
  }

  /* Check ECC Correction Error */
  if ((FLASH->IER & FLASH_IT_SNECCERR) != 0U)
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_FLASH_IRQHandler+0x12a>
  {
    if ((FLASH->ISR & FLASH_FLAG_SNECCERR) != 0U)
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_FLASH_IRQHandler+0x12a>
    {
      /* Call User callback */
      HAL_FLASHEx_EccCorrectionCallback();
 80013f6:	f000 f9ae 	bl	8001756 <HAL_FLASHEx_EccCorrectionCallback>

      /* Clear ECC correction flag in order to allow new ECC error record */
      FLASH->ICR = FLASH_FLAG_SNECCERR;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 80013fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001400:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Check ECC Detection Error */
  if ((FLASH->IER & FLASH_IT_DBECCERR) != 0U)
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <HAL_FLASH_IRQHandler+0x14e>
  {
    if ((FLASH->ISR & FLASH_FLAG_DBECCERR) != 0U)
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_FLASH_IRQHandler+0x14e>
    {
      /* Call User callback */
      HAL_FLASHEx_EccDetectionCallback();
 800141a:	f000 f9a3 	bl	8001764 <HAL_FLASHEx_EccDetectionCallback>

      /* Clear ECC detection flag in order to allow new ECC error record */
      FLASH->ICR = FLASH_FLAG_DBECCERR;
 800141e:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <HAL_FLASH_IRQHandler+0x158>)
 8001420:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001424:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	52002000 	.word	0x52002000
 8001434:	113e0000 	.word	0x113e0000
 8001438:	240000f0 	.word	0x240000f0

0800143c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_FLASH_OperationErrorCallback>:
  *                 Sector Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_FLASH_Unlock+0x38>)
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00d      	beq.n	8001490 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_FLASH_Unlock+0x38>)
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_FLASH_Unlock+0x3c>)
 8001478:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <HAL_FLASH_Unlock+0x38>)
 800147c:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_FLASH_Unlock+0x40>)
 800147e:	605a      	str	r2, [r3, #4]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_FLASH_Unlock+0x38>)
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_FLASH_Unlock+0x2e>
    }
  }

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	52002000 	.word	0x52002000
 80014a0:	45670123 	.word	0x45670123
 80014a4:	cdef89ab 	.word	0xcdef89ab

080014a8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_FLASH_Lock+0x2c>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <HAL_FLASH_Lock+0x2c>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6113      	str	r3, [r2, #16]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_FLASH_Lock+0x2c>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <HAL_FLASH_Lock+0x22>
  }

  return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	52002000 	.word	0x52002000

080014d8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 80014dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <HAL_FLASH_OB_Unlock+0x40>)
 80014de:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d010      	beq.n	800150c <HAL_FLASH_OB_Unlock+0x34>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <HAL_FLASH_OB_Unlock+0x40>)
 80014ec:	4a0b      	ldr	r2, [pc, #44]	@ (800151c <HAL_FLASH_OB_Unlock+0x44>)
 80014ee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_FLASH_OB_Unlock+0x40>)
 80014f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <HAL_FLASH_OB_Unlock+0x48>)
 80014f6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <HAL_FLASH_OB_Unlock+0x40>)
 80014fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_FLASH_OB_Unlock+0x34>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_FLASH_OB_Unlock+0x36>
    }
  }

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	52002000 	.word	0x52002000
 800151c:	08192a3b 	.word	0x08192a3b
 8001520:	4c5d6e7f 	.word	0x4c5d6e7f

08001524 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <HAL_FLASH_OB_Lock+0x34>)
 800152a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <HAL_FLASH_OB_Lock+0x34>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <HAL_FLASH_OB_Lock+0x34>)
 800153a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_FLASH_OB_Lock+0x26>
  {
    return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_FLASH_OB_Lock+0x28>
  }

  return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	52002000 	.word	0x52002000

0800155c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8001564:	f7ff fc32 	bl	8000dcc <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
  uint32_t error;

  while ((FLASH->SR & FLASH_SR_QW) != 0U)
 8001570:	e00b      	b.n	800158a <FLASH_WaitForLastOperation+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d007      	beq.n	800158a <FLASH_WaitForLastOperation+0x2e>
    {
      if (HAL_GetTick() >= timeout)
 800157a:	f7ff fc27 	bl	8000dcc <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4293      	cmp	r3, r2
 8001584:	d801      	bhi.n	800158a <FLASH_WaitForLastOperation+0x2e>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e033      	b.n	80015f2 <FLASH_WaitForLastOperation+0x96>
  while ((FLASH->SR & FLASH_SR_QW) != 0U)
 800158a:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <FLASH_WaitForLastOperation+0xa0>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ed      	bne.n	8001572 <FLASH_WaitForLastOperation+0x16>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->ISR & FLASH_FLAG_ISR_ERRORS);
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <FLASH_WaitForLastOperation+0xa0>)
 8001598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <FLASH_WaitForLastOperation+0xa4>)
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  error |= (FLASH->OPTISR & FLASH_FLAG_OPTISR_ERRORS);
 80015a0:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <FLASH_WaitForLastOperation+0xa0>)
 80015a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80015a6:	f003 43b0 	and.w	r3, r3, #1476395008	@ 0x58000000
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]

  if (error != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <FLASH_WaitForLastOperation+0x80>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80015b6:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <FLASH_WaitForLastOperation+0xa8>)
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	4313      	orrs	r3, r2
 80015be:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <FLASH_WaitForLastOperation+0xa8>)
 80015c0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    FLASH->ICR = (error & FLASH_FLAG_ISR_ERRORS);
 80015c2:	490e      	ldr	r1, [pc, #56]	@ (80015fc <FLASH_WaitForLastOperation+0xa0>)
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <FLASH_WaitForLastOperation+0xa4>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	628b      	str	r3, [r1, #40]	@ 0x28
    FLASH->OPTICR = (error & FLASH_FLAG_OPTISR_ERRORS);
 80015cc:	4a0b      	ldr	r2, [pc, #44]	@ (80015fc <FLASH_WaitForLastOperation+0xa0>)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f003 43b0 	and.w	r3, r3, #1476395008	@ 0x58000000
 80015d4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e00a      	b.n	80015f2 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if ((FLASH->ISR & FLASH_FLAG_EOP) != 0U)
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <FLASH_WaitForLastOperation+0xa0>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    FLASH->ICR = FLASH_FLAG_EOP;
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <FLASH_WaitForLastOperation+0xa0>)
 80015ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* If there is no error flag set */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	52002000 	.word	0x52002000
 8001600:	113e0000 	.word	0x113e0000
 8001604:	240000f0 	.word	0x240000f0

08001608 <HAL_FLASHEx_OBProgram>:
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(const FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001610:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <HAL_FLASHEx_OBProgram+0xe4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_FLASHEx_OBProgram+0x14>
 8001618:	2302      	movs	r3, #2
 800161a:	e062      	b.n	80016e2 <HAL_FLASHEx_OBProgram+0xda>
 800161c:	4b33      	ldr	r3, [pc, #204]	@ (80016ec <HAL_FLASHEx_OBProgram+0xe4>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001622:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <HAL_FLASHEx_OBProgram+0xe4>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001628:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800162c:	f7ff ff96 	bl	800155c <FLASH_WaitForLastOperation>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]

  if ((status == HAL_OK) && (pOBInit->OptionType != 0U))
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d14f      	bne.n	80016da <HAL_FLASHEx_OBProgram+0xd2>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d04b      	beq.n	80016da <HAL_FLASHEx_OBProgram+0xd2>
  {
    /* Set PG_OPT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OPT);
 8001642:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <HAL_FLASHEx_OBProgram+0xe8>)
 8001644:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001648:	4a29      	ldr	r2, [pc, #164]	@ (80016f0 <HAL_FLASHEx_OBProgram+0xe8>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Write protection configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_FLASHEx_OBProgram+0x66>
    {
      /* Configure of Write protection on the selected area */
      FLASH_OB_WRPConfig(pOBInit->WRPState, pOBInit->WRPSector);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4619      	mov	r1, r3
 8001668:	4610      	mov	r0, r2
 800166a:	f000 f89b 	bl	80017a4 <FLASH_OB_WRPConfig>
    }

    /* User Configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <HAL_FLASHEx_OBProgram+0x84>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig1, pOBInit->USERConfig2);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68d8      	ldr	r0, [r3, #12]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6919      	ldr	r1, [r3, #16]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	461a      	mov	r2, r3
 8001688:	f000 f8b4 	bl	80017f4 <FLASH_OB_UserConfig>
    }

    /* HDP configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_HDP) != 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_FLASHEx_OBProgram+0xa0>
    {
      /* Configure the HDP Protection */
      FLASH_OB_HDPConfig(pOBInit->HDPStartPage, pOBInit->HDPEndPage);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f000 f99c 	bl	80019e0 <FLASH_OB_HDPConfig>
    }

    /* Non-volatile state configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_NV) != 0U)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <HAL_FLASHEx_OBProgram+0xb6>
    {
      /* Configure the non-volatile state */
      FLASH_OB_NVConfig(pOBInit->NVState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f9ab 	bl	8001a14 <FLASH_OB_NVConfig>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80016be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016c2:	f7ff ff4b 	bl	800155c <FLASH_WaitForLastOperation>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]

    /* Clear PG_OPT Bit */
    CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OPT);
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_FLASHEx_OBProgram+0xe8>)
 80016cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80016d0:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <HAL_FLASHEx_OBProgram+0xe8>)
 80016d2:	f023 0302 	bic.w	r3, r3, #2
 80016d6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <HAL_FLASHEx_OBProgram+0xe4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]

  return status;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	240000f0 	.word	0x240000f0
 80016f0:	52002000 	.word	0x52002000

080016f4 <HAL_FLASHEx_OBGetConfig>:
  *         Boot Address, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Get write protection on the selected area */
  FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1d1a      	adds	r2, r3, #4
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3308      	adds	r3, #8
 8001704:	4619      	mov	r1, r3
 8001706:	4610      	mov	r0, r2
 8001708:	f000 f99a 	bl	8001a40 <FLASH_OB_GetWRP>

  /* Get the user option bytes */
  FLASH_OB_GetUser(&(pOBInit->USERConfig1), &(pOBInit->USERConfig2));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f103 0210 	add.w	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3314      	adds	r3, #20
 8001716:	4619      	mov	r1, r3
 8001718:	4610      	mov	r0, r2
 800171a:	f000 f9b3 	bl	8001a84 <FLASH_OB_GetUser>

  /* Get the HDP Protection */
  FLASH_OB_GetHDP(&(pOBInit->HDPStartPage), &(pOBInit->HDPEndPage));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f103 0218 	add.w	r2, r3, #24
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	331c      	adds	r3, #28
 8001728:	4619      	mov	r1, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f000 f9c2 	bl	8001ab4 <FLASH_OB_GetHDP>

  /* Get the non-volatile state */
  pOBInit->NVState = FLASH_OB_GetNV();
 8001730:	f000 f9da 	bl	8001ae8 <FLASH_OB_GetNV>
 8001734:	4602      	mov	r2, r0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	621a      	str	r2, [r3, #32]

  /* Get the Root-Of-Trust configuration */
  pOBInit->ROTConfig = FLASH_OB_GetRoT();
 800173a:	f000 f9e3 	bl	8001b04 <FLASH_OB_GetRoT>
 800173e:	4602      	mov	r2, r0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the epoch */
  pOBInit->EPOCH = FLASH_OB_GetEpoch();
 8001744:	f000 f9ec 	bl	8001b20 <FLASH_OB_GetEpoch>
 8001748:	4602      	mov	r2, r0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_FLASHEx_EccCorrectionCallback>:
/**
  * @brief  FLASH ECC Correction interrupt callback.
  * @retval None
  */
__weak void HAL_FLASHEx_EccCorrectionCallback(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASHEx_EccCorrectionCallback could be implemented in the user file
   */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_FLASHEx_EccDetectionCallback>:
/**
  * @brief  FLASH ECC Detection interrupt callback.
  * @retval None
  */
__weak void HAL_FLASHEx_EccDetectionCallback(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASHEx_EccDetectionCallback could be implemented in the user file
   */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <FLASH_SectorErase>:
  * @param  Sector FLASH sector to erase
  *         This parameter must be a value between 0 and (max number of sectors in the bank - 1)
  * @retval None
  */
void FLASH_SectorErase(uint32_t Sector)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, (FLASH_CR_SSN | FLASH_CR_SER | FLASH_CR_START), \
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <FLASH_SectorErase+0x2c>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f423 72f2 	bic.w	r2, r3, #484	@ 0x1e4
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	019b      	lsls	r3, r3, #6
 8001788:	4313      	orrs	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <FLASH_SectorErase+0x2c>)
 800178c:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 8001790:	6113      	str	r3, [r2, #16]
             ((Sector << FLASH_CR_SSN_Pos) | FLASH_CR_SER | FLASH_CR_START));
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	52002000 	.word	0x52002000

080017a4 <FLASH_OB_WRPConfig>:
  * @param  WRPSector
  *
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPState, uint32_t WRPSector)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRPSTATE(WRPState));

  /* Configure the write protected area */
  if (WRPState == OB_WRPSTATE_DISABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <FLASH_OB_WRPConfig+0x24>
  {
    FLASH->WRPSRP |= (WRPSector & FLASH_WRPSRP_WRPS);
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <FLASH_OB_WRPConfig+0x4c>)
 80017b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	490c      	ldr	r1, [pc, #48]	@ (80017f0 <FLASH_OB_WRPConfig+0x4c>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
  }
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 80017c6:	e00c      	b.n	80017e2 <FLASH_OB_WRPConfig+0x3e>
  else if (WRPState == OB_WRPSTATE_ENABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d109      	bne.n	80017e2 <FLASH_OB_WRPConfig+0x3e>
    FLASH->WRPSRP &= (~(WRPSector & FLASH_WRPSRP_WRPS));
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <FLASH_OB_WRPConfig+0x4c>)
 80017d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	4905      	ldr	r1, [pc, #20]	@ (80017f0 <FLASH_OB_WRPConfig+0x4c>)
 80017dc:	4013      	ands	r3, r2
 80017de:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	52002000 	.word	0x52002000

080017f4 <FLASH_OB_UserConfig>:
  * @param  UserConfig1 The selected User Option Bytes values
  * @param  UserConfig2 The selected User Option Bytes values
  * @retval None
  */
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig1, uint32_t UserConfig2)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t optr_reg_val = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if ((UserType & OB_USER_BOR_LEV) != 0U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <FLASH_OB_UserConfig+0x32>
  {
    /* BOR level option byte should be modified */
    assert_param(IS_OB_USER_BOR_LEVEL(UserConfig1 & FLASH_OBW1SR_BOR_LEVEL));

    /* Set value and mask for BOR level option byte */
    optr_reg_val |= (UserConfig1 & FLASH_OBW1SR_BOR_LEVEL);
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	4313      	orrs	r3, r2
 800181c:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW1SR_BOR_LEVEL;
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f043 030c 	orr.w	r3, r3, #12
 8001824:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_IWDG_SW) != 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d009      	beq.n	8001844 <FLASH_OB_UserConfig+0x50>
  {
    /* IWDG1_HW option byte should be modified */
    assert_param(IS_OB_USER_IWDG(UserConfig1 & FLASH_OBW1SR_IWDG_HW));

    /* Set value and mask for IWDG1_HW option byte */
    optr_reg_val |= (UserConfig1 & FLASH_OBW1SR_IWDG_HW);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW1SR_IWDG_HW;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_NRST_STOP) != 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <FLASH_OB_UserConfig+0x6e>
  {
    /* NRST_STOP_D1 option byte should be modified */
    assert_param(IS_OB_USER_STOP(UserConfig1 & FLASH_OBW1SR_NRST_STOP));

    /* Set value and mask for NRST_STOP_D1 option byte */
    optr_reg_val |= (UserConfig1 & FLASH_OBW1SR_NRST_STOP);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW1SR_NRST_STOP;
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001860:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_NRST_STDBY) != 0U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <FLASH_OB_UserConfig+0x8c>
  {
    /* NRST_STBY_D1 option byte should be modified */
    assert_param(IS_OB_USER_STANDBY(UserConfig1 & FLASH_OBW1SR_NRST_STBY));

    /* Set value and mask for NRST_STBY_D1 option byte */
    optr_reg_val |= (UserConfig1 & FLASH_OBW1SR_NRST_STBY);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW1SR_NRST_STBY;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187e:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_XSPI1_HSLV) != 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <FLASH_OB_UserConfig+0xaa>
  {
    /* XSPI1_HSLV option byte should be modified */
    assert_param(IS_OB_USER_XSPI1_HSLV(UserConfig1 & FLASH_OBW1SR_XSPI1_HSLV));

    /* Set value and mask for XSPI1_HSLV option byte */
    optr_reg_val |= (UserConfig1 & FLASH_OBW1SR_XSPI1_HSLV);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW1SR_XSPI1_HSLV;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800189c:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_XSPI2_HSLV) != 0U)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d009      	beq.n	80018bc <FLASH_OB_UserConfig+0xc8>
  {
    /* XSPI2_HSLV option byte should be modified */
    assert_param(IS_OB_USER_XSPI2_HSLV(UserConfig1 & FLASH_OBW1SR_XSPI2_HSLV));

    /* Set value and mask for XSPI2_HSLV option byte */
    optr_reg_val |= (UserConfig1 & FLASH_OBW1SR_XSPI2_HSLV);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW1SR_XSPI2_HSLV;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ba:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_IWDG_STOP) != 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <FLASH_OB_UserConfig+0xe6>
  {
    /* IWDG_FZ_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig1 & FLASH_OBW1SR_IWDG_FZ_STOP));

    /* Set value and mask for IWDG_FZ_STOP option byte */
    optr_reg_val |= (UserConfig1 & FLASH_OBW1SR_IWDG_FZ_STOP);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW1SR_IWDG_FZ_STOP;
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d8:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <FLASH_OB_UserConfig+0x104>
  {
    /* IWDG_FZ_SDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig1 & FLASH_OBW1SR_IWDG_FZ_STBY));

    /* Set value and mask for IWDG_FZ_SDBY option byte */
    optr_reg_val |= (UserConfig1 & FLASH_OBW1SR_IWDG_FZ_STBY);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW1SR_IWDG_FZ_STBY;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018f6:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_VDDIO_HSLV) != 0U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <FLASH_OB_UserConfig+0x122>
  {
    /* VDDIO_HSLV option byte should be modified */
    assert_param(IS_OB_USER_VDDIO_HSLV(UserConfig1 & FLASH_OBW1SR_VDDIO_HSLV));

    /* Set value and mask for VDDIO_HSLV option byte */
    optr_reg_val |= (UserConfig1 & FLASH_OBW1SR_VDDIO_HSLV);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	4313      	orrs	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW1SR_VDDIO_HSLV;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001914:	613b      	str	r3, [r7, #16]
  }

  /* Configure the option bytes register 1 if necessary */
  if (optr_reg_mask != 0U)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00a      	beq.n	8001932 <FLASH_OB_UserConfig+0x13e>
  {
    MODIFY_REG(FLASH->OBW1SRP, optr_reg_mask, optr_reg_val);
 800191c:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <FLASH_OB_UserConfig+0x1e8>)
 800191e:	f8d3 2264 	ldr.w	r2, [r3, #612]	@ 0x264
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	492c      	ldr	r1, [pc, #176]	@ (80019dc <FLASH_OB_UserConfig+0x1e8>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	f8c1 3264 	str.w	r3, [r1, #612]	@ 0x264
  }

  optr_reg_val = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  optr_reg_mask = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]

  if ((UserType & OB_USER_ITCM_AXI_SHARE) != 0U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <FLASH_OB_UserConfig+0x164>
  {
    /* ITCM_AXI_SHARE option byte should be modified */
    assert_param(IS_OB_USER_ITCM_AXI_SHARE(UserConfig2 & FLASH_OBW2SR_ITCM_AXI_SHARE));

    /* Set value and mask for ITCM_AXI_SHARE option byte */
    optr_reg_val |= (UserConfig2 & FLASH_OBW2SR_ITCM_AXI_SHARE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW2SR_ITCM_AXI_SHARE;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f043 0307 	orr.w	r3, r3, #7
 8001956:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_DTCM_AXI_SHARE) != 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <FLASH_OB_UserConfig+0x182>
  {
    /* DTCM_AXI_SHARE option byte should be modified */
    assert_param(IS_OB_USER_DTCM_AXI_SHARE(UserConfig2 & FLASH_OBW2SR_DTCM_AXI_SHARE));

    /* Set value and mask for DTCM_AXI_SHARE option byte */
    optr_reg_val |= (UserConfig2 & FLASH_OBW2SR_DTCM_AXI_SHARE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW2SR_DTCM_AXI_SHARE;
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001974:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_SRAM_ECC) != 0U)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <FLASH_OB_UserConfig+0x1a0>
  {
    /* SRAM_ECC option byte should be modified */
    assert_param(IS_OB_USER_AXISRAM_ECC(UserConfig2 & FLASH_OBW2SR_ECC_ON_SRAM));

    /* Set value and mask for SRAM_ECC option byte */
    optr_reg_val |= (UserConfig2 & FLASH_OBW2SR_ECC_ON_SRAM);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	4313      	orrs	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW2SR_ECC_ON_SRAM;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001992:	613b      	str	r3, [r7, #16]
  }

  if ((UserType & OB_USER_I2C_NI3C) != 0U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <FLASH_OB_UserConfig+0x1be>
  {
    /* I2C_NI3C option byte should be modified */
    assert_param(IS_OB_USER_I2C_NI3C(UserConfig2 & FLASH_OBW2SR_I2C_NI3C));

    /* Set value and mask for I2C_NI3C option byte */
    optr_reg_val |= (UserConfig2 & FLASH_OBW2SR_I2C_NI3C);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]
    optr_reg_mask |= FLASH_OBW2SR_I2C_NI3C;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019b0:	613b      	str	r3, [r7, #16]
  }

  /* Configure the option bytes register 2 if necessary */
  if (optr_reg_mask != 0U)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00a      	beq.n	80019ce <FLASH_OB_UserConfig+0x1da>
  {
    MODIFY_REG(FLASH->OBW2SRP, optr_reg_mask, optr_reg_val);
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <FLASH_OB_UserConfig+0x1e8>)
 80019ba:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	401a      	ands	r2, r3
 80019c4:	4905      	ldr	r1, [pc, #20]	@ (80019dc <FLASH_OB_UserConfig+0x1e8>)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	f8c1 326c 	str.w	r3, [r1, #620]	@ 0x26c
  }
}
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	52002000 	.word	0x52002000

080019e0 <FLASH_OB_HDPConfig>:
  * @param  HDPEndPage
  *
  * @retval None
  */
static void FLASH_OB_HDPConfig(uint32_t HDPStartPage, uint32_t HDPEndPage)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_HDP_PAGE(HDPStartPage));
  assert_param(IS_OB_HDP_PAGE(HDPEndPage));

  MODIFY_REG(FLASH->HDPSRP, (FLASH_HDPSRP_HDP_AREA_START | FLASH_HDPSRP_HDP_AREA_END), \
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <FLASH_OB_HDPConfig+0x30>)
 80019ec:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80019f0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	0419      	lsls	r1, r3, #16
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	430b      	orrs	r3, r1
 80019fc:	4904      	ldr	r1, [pc, #16]	@ (8001a10 <FLASH_OB_HDPConfig+0x30>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f8c1 3234 	str.w	r3, [r1, #564]	@ 0x234
             (HDPStartPage | (HDPEndPage << FLASH_HDPSRP_HDP_AREA_END_Pos)));
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	52002000 	.word	0x52002000

08001a14 <FLASH_OB_NVConfig>:
  * @param  NVState
  *
  * @retval None
  */
static void FLASH_OB_NVConfig(uint32_t NVState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_OB_NVSTATE(NVState));

  MODIFY_REG(FLASH->NVSRP, FLASH_NVSRP_NVSTATE, NVState);
 8001a1c:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <FLASH_OB_NVConfig+0x28>)
 8001a1e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001a22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001a26:	4905      	ldr	r1, [pc, #20]	@ (8001a3c <FLASH_OB_NVConfig+0x28>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	f8c1 3204 	str.w	r3, [r1, #516]	@ 0x204
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	52002000 	.word	0x52002000

08001a40 <FLASH_OB_GetWRP>:
  * @param  WRPSector
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  if ((FLASH->WRPSR & FLASH_WRPSR_WRPS) == FLASH_WRPSR_WRPS)
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <FLASH_OB_GetWRP+0x40>)
 8001a4c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2bff      	cmp	r3, #255	@ 0xff
 8001a54:	d103      	bne.n	8001a5e <FLASH_OB_GetWRP+0x1e>
  {
    /* All sectors aren't write protected */
    *WRPState = OB_WRPSTATE_DISABLE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
  {
    /* Some sectors are write protected */
    *WRPState = OB_WRPSTATE_ENABLE;
    *WRPSector = ((~(FLASH->WRPSR)) & FLASH_WRPSR_WRPS);
  }
}
 8001a5c:	e009      	b.n	8001a72 <FLASH_OB_GetWRP+0x32>
    *WRPState = OB_WRPSTATE_ENABLE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
    *WRPSector = ((~(FLASH->WRPSR)) & FLASH_WRPSR_WRPS);
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <FLASH_OB_GetWRP+0x40>)
 8001a66:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	601a      	str	r2, [r3, #0]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	52002000 	.word	0x52002000

08001a84 <FLASH_OB_GetUser>:
  *         The return value can be a combination of
  *
  * @retval None
  */
static void FLASH_OB_GetUser(uint32_t *UserConfig1, uint32_t *UserConfig2)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  *UserConfig1 = FLASH->OBW1SR;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <FLASH_OB_GetUser+0x2c>)
 8001a90:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	601a      	str	r2, [r3, #0]
  *UserConfig2 = FLASH->OBW2SR;
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <FLASH_OB_GetUser+0x2c>)
 8001a9a:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	52002000 	.word	0x52002000

08001ab4 <FLASH_OB_GetHDP>:
  *         The return value can be a combination of
  *
  * @retval None
  */
static void FLASH_OB_GetHDP(uint32_t *HDPStartPage, uint32_t *HDPEndPage)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  *HDPStartPage = (FLASH->HDPSR & FLASH_HDPSR_HDP_AREA_START);
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <FLASH_OB_GetHDP+0x30>)
 8001ac0:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	601a      	str	r2, [r3, #0]
  *HDPEndPage = ((FLASH->HDPSR & FLASH_HDPSR_HDP_AREA_END) >> FLASH_HDPSR_HDP_AREA_END_Pos);
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <FLASH_OB_GetHDP+0x30>)
 8001acc:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	601a      	str	r2, [r3, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	52002000 	.word	0x52002000

08001ae8 <FLASH_OB_GetNV>:
  * @brief  Return the FLASH Non-volatile state Option Bytes value.
  *
  * @retval Value of Non-volatile state
  */
static uint32_t FLASH_OB_GetNV(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return (FLASH->NVSR & FLASH_NVSR_NVSTATE);
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <FLASH_OB_GetNV+0x18>)
 8001aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001af2:	b2db      	uxtb	r3, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	52002000 	.word	0x52002000

08001b04 <FLASH_OB_GetRoT>:
  * @brief  Return the FLASH RoT Option Bytes value.
  *
  * @retval Value of the RoT
  */
static uint32_t FLASH_OB_GetRoT(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return (FLASH->ROTSR & (FLASH_ROTSR_OEM_PROVD | FLASH_ROTSR_DBG_AUTH | FLASH_ROTSR_IROT_SELECT));
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <FLASH_OB_GetRoT+0x18>)
 8001b0a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001b0e:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	52002000 	.word	0x52002000

08001b20 <FLASH_OB_GetEpoch>:
  * @brief  Return the FLASH Epoch Option Bytes value.
  *
  * @retval Value of the Epoch
  */
static uint32_t FLASH_OB_GetEpoch(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return (FLASH->EPOCHSR & FLASH_EPOCHSR_EPOCH);
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <FLASH_OB_GetEpoch+0x18>)
 8001b26:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
 8001b2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	52002000 	.word	0x52002000

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	e139      	b.n	8001dc0 <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 812b 	beq.w	8001dba <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d005      	beq.n	8001b7c <HAL_GPIO_Init+0x40>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d130      	bne.n	8001bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 0201 	and.w	r2, r3, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d017      	beq.n	8001c1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d123      	bne.n	8001c6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	6939      	ldr	r1, [r7, #16]
 8001c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0203 	and.w	r2, r3, #3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8085 	beq.w	8001dba <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
 8001cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8001de0 <HAL_GPIO_Init+0x2a4>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	334c      	adds	r3, #76	@ 0x4c
 8001cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0a9a      	lsrs	r2, r3, #10
 8001cd8:	4b42      	ldr	r3, [pc, #264]	@ (8001de4 <HAL_GPIO_Init+0x2a8>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	f002 0203 	and.w	r2, r2, #3
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	4093      	lsls	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 8001cec:	493c      	ldr	r1, [pc, #240]	@ (8001de0 <HAL_GPIO_Init+0x2a4>)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	334c      	adds	r3, #76	@ 0x4c
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001db0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f47f aebe 	bne.w	8001b4c <HAL_GPIO_Init+0x10>
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	371c      	adds	r7, #28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	58000400 	.word	0x58000400
 8001de4:	0029ff7f 	.word	0x0029ff7f

08001de8 <HAL_PWREx_ConfigSupply>:
  *        PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO and PWR_SMPS_1V8_SUPPLIES_EXT are used
  *        only for lines that supports SMPS regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Check if supply source was configured */
  if ((PWR->CSR2 & (PWR_CSR2_SDEN | PWR_CSR2_LDOEN | PWR_CSR2_BYPASS)) != (PWR_CSR2_SDEN | PWR_CSR2_LDOEN))
 8001df0:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <HAL_PWREx_ConfigSupply+0xa0>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d00a      	beq.n	8001e12 <HAL_PWREx_ConfigSupply+0x2a>
  {
    /* Check supply configuration */
    if ((PWR->CSR2 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001dfc:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <HAL_PWREx_ConfigSupply+0xa0>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d001      	beq.n	8001e0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e038      	b.n	8001e80 <HAL_PWREx_ConfigSupply+0x98>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e036      	b.n	8001e80 <HAL_PWREx_ConfigSupply+0x98>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CSR2, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e12:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_PWREx_ConfigSupply+0xa0>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f023 021f 	bic.w	r2, r3, #31
 8001e1a:	491b      	ldr	r1, [pc, #108]	@ (8001e88 <HAL_PWREx_ConfigSupply+0xa0>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e22:	f7fe ffd3 	bl	8000dcc <HAL_GetTick>
 8001e26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001e28:	e009      	b.n	8001e3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e2a:	f7fe ffcf 	bl	8000dcc <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e38:	d901      	bls.n	8001e3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e020      	b.n	8001e80 <HAL_PWREx_ConfigSupply+0x98>
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001e3e:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_PWREx_ConfigSupply+0xa0>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0ef      	beq.n	8001e2a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b1e      	cmp	r3, #30
 8001e4e:	d002      	beq.n	8001e56 <HAL_PWREx_ConfigSupply+0x6e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b1d      	cmp	r3, #29
 8001e54:	d113      	bne.n	8001e7e <HAL_PWREx_ConfigSupply+0x96>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick();
 8001e56:	f7fe ffb9 	bl	8000dcc <HAL_GetTick>
 8001e5a:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8001e5c:	e009      	b.n	8001e72 <HAL_PWREx_ConfigSupply+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e5e:	f7fe ffb5 	bl	8000dcc <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e6c:	d901      	bls.n	8001e72 <HAL_PWREx_ConfigSupply+0x8a>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e006      	b.n	8001e80 <HAL_PWREx_ConfigSupply+0x98>
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8001e72:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_PWREx_ConfigSupply+0xa0>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0ef      	beq.n	8001e5e <HAL_PWREx_ConfigSupply+0x76>
      }
    }
  }
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	58024800 	.word	0x58024800

08001e8c <HAL_PWREx_ControlVoltageScaling>:
  * @note When exiting from Stop mode or Standby mode, the Run mode voltage
  *       scaling is reset to the default VOS low value.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Set the voltage range */
  MODIFY_REG(PWR->CSR4, PWR_CSR4_VOS, VoltageScaling);
 8001e94:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	f023 0201 	bic.w	r2, r3, #1
 8001e9c:	490e      	ldr	r1, [pc, #56]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	614b      	str	r3, [r1, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea4:	f7fe ff92 	bl	8000dcc <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 8001eaa:	e009      	b.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001eac:	f7fe ff8e 	bl	8000dcc <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eba:	d901      	bls.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x34>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e006      	b.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x42>
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ef      	beq.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x20>
    }
  }

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	58024800 	.word	0x58024800

08001edc <HAL_PWREx_EnableXSPIM1>:
  * @note   The XSPIM_P1 supply must be stable prior to setting
            this bit.
  * @retval None.
  */
void HAL_PWREx_EnableXSPIM1(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CSR2, PWR_CSR2_EN_XSPIM1);
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_PWREx_EnableXSPIM1+0x1c>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <HAL_PWREx_EnableXSPIM1+0x1c>)
 8001ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	58024800 	.word	0x58024800

08001efc <HAL_PWREx_EnableXSPIM2>:
  * @note   The XSPIM_P2 supply must be stable prior to setting
            this bit.
  * @retval None.
  */
void HAL_PWREx_EnableXSPIM2(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CSR2, PWR_CSR2_EN_XSPIM2);
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_PWREx_EnableXSPIM2+0x1c>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_PWREx_EnableXSPIM2+0x1c>)
 8001f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f0a:	60d3      	str	r3, [r2, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	58024800 	.word	0x58024800

08001f1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t pllsrc;
  uint32_t pllrdy;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e328      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4b97      	ldr	r3, [pc, #604]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f36:	61fb      	str	r3, [r7, #28]
  pllsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f38:	4b94      	ldr	r3, [pc, #592]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	61bb      	str	r3, [r7, #24]
  pllrdy = RCC->CR & (RCC_CR_PLL1RDY | RCC_CR_PLL2RDY | RCC_CR_PLL3RDY);
 8001f42:	4b92      	ldr	r3, [pc, #584]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 8001f4a:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 809c 	beq.w	8002092 <HAL_RCC_OscConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x50>
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_OscConfig+0x5e>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x5e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f040 808e 	bne.w	8002092 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e302      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x76>
 8001f84:	4b81      	ldr	r3, [pc, #516]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a80      	ldr	r2, [pc, #512]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e058      	b.n	8002044 <HAL_RCC_OscConfig+0x128>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d112      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xa4>
 8001f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a7b      	ldr	r2, [pc, #492]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b79      	ldr	r3, [pc, #484]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a78      	ldr	r2, [pc, #480]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fac:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b76      	ldr	r3, [pc, #472]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a75      	ldr	r2, [pc, #468]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e041      	b.n	8002044 <HAL_RCC_OscConfig+0x128>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc8:	d112      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xd4>
 8001fca:	4b70      	ldr	r3, [pc, #448]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6f      	ldr	r2, [pc, #444]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6c      	ldr	r2, [pc, #432]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fdc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a69      	ldr	r2, [pc, #420]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e029      	b.n	8002044 <HAL_RCC_OscConfig+0x128>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8001ff8:	d112      	bne.n	8002020 <HAL_RCC_OscConfig+0x104>
 8001ffa:	4b64      	ldr	r3, [pc, #400]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a63      	ldr	r2, [pc, #396]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b61      	ldr	r3, [pc, #388]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a60      	ldr	r2, [pc, #384]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800200c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b5e      	ldr	r3, [pc, #376]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5d      	ldr	r2, [pc, #372]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e011      	b.n	8002044 <HAL_RCC_OscConfig+0x128>
 8002020:	4b5a      	ldr	r3, [pc, #360]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a59      	ldr	r2, [pc, #356]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b57      	ldr	r3, [pc, #348]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a56      	ldr	r2, [pc, #344]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b54      	ldr	r3, [pc, #336]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a53      	ldr	r2, [pc, #332]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800203e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002042:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7fe fec2 	bl	8000dcc <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d019      	beq.n	8002086 <HAL_RCC_OscConfig+0x16a>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002054:	f7fe feba 	bl	8000dcc <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	@ 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e28c      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002066:	4b49      	ldr	r3, [pc, #292]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x138>
 8002072:	e00e      	b.n	8002092 <HAL_RCC_OscConfig+0x176>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002074:	f7fe feaa 	bl	8000dcc <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	@ 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x16a>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e27c      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002086:	4b41      	ldr	r3, [pc, #260]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 809e 	beq.w	80021dc <HAL_RCC_OscConfig+0x2c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x196>
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d047      	beq.n	800213c <HAL_RCC_OscConfig+0x220>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSI)))
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d144      	bne.n	800213c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e260      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, calibration is allowed, divider update also unless used for any enabled PLL */
      else
      {
        /* HSI must not be used as reference clock for any enabled PLL clock source */
        tmpreg1 = (RCC->CR & RCC_CR_HSIDIV);
 80020be:	4b33      	ldr	r3, [pc, #204]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0318 	and.w	r3, r3, #24
 80020c6:	60fb      	str	r3, [r7, #12]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_OscConfig+0x1c6>
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1c6>
            (tmpreg1 != RCC_OscInitStruct->HSIDiv))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e24e      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
        }

        assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

        /* Set the Internal High Speed oscillator new divider */
        __HAL_RCC_HSI_CONFIG(RCC_HSI_ON | RCC_OscInitStruct->HSIDiv);
 80020e2:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0219 	bic.w	r2, r3, #25
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	4a26      	ldr	r2, [pc, #152]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6013      	str	r3, [r2, #0]

        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_OscConfig+0x1f6>
        {
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020fe:	4b23      	ldr	r3, [pc, #140]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	08db      	lsrs	r3, r3, #3
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	4a21      	ldr	r2, [pc, #132]	@ (8002190 <HAL_RCC_OscConfig+0x274>)
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a21      	ldr	r2, [pc, #132]	@ (8002194 <HAL_RCC_OscConfig+0x278>)
 8002110:	6013      	str	r3, [r2, #0]
        }
        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002112:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <HAL_RCC_OscConfig+0x27c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fe08 	bl	8000d2c <HAL_InitTick>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e22c      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
        }
      }
      /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
      __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b19      	ldr	r3, [pc, #100]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	4915      	ldr	r1, [pc, #84]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
 800213a:	e04f      	b.n	80021dc <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d032      	beq.n	80021aa <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState | RCC_OscInitStruct->HSIDiv);
 8002144:	4b11      	ldr	r3, [pc, #68]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 0219 	bic.w	r2, r3, #25
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68d9      	ldr	r1, [r3, #12]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	430b      	orrs	r3, r1
 8002156:	490d      	ldr	r1, [pc, #52]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	4908      	ldr	r1, [pc, #32]	@ (800218c <HAL_RCC_OscConfig+0x270>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fe2c 	bl	8000dcc <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002176:	e011      	b.n	800219c <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002178:	f7fe fe28 	bl	8000dcc <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d90a      	bls.n	800219c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1fa      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
 800218a:	bf00      	nop
 800218c:	58024400 	.word	0x58024400
 8002190:	03d09000 	.word	0x03d09000
 8002194:	24000000 	.word	0x24000000
 8002198:	24000004 	.word	0x24000004
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219c:	4b95      	ldr	r3, [pc, #596]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0e7      	beq.n	8002178 <HAL_RCC_OscConfig+0x25c>
 80021a8:	e018      	b.n	80021dc <HAL_RCC_OscConfig+0x2c0>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021aa:	4b92      	ldr	r3, [pc, #584]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a91      	ldr	r2, [pc, #580]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7fe fe09 	bl	8000dcc <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80021be:	f7fe fe05 	bl	8000dcc <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e1d7      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d0:	4b88      	ldr	r3, [pc, #544]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f0      	bne.n	80021be <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d045      	beq.n	8002274 <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));

    /* When the CSI is used as system clock it will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d005      	beq.n	80021fa <HAL_RCC_OscConfig+0x2de>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_OscConfig+0x2ea>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_CSI)))
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if (RCC_OscInitStruct->CSIState == RCC_CSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d138      	bne.n	8002274 <HAL_RCC_OscConfig+0x358>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e1bc      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d019      	beq.n	8002242 <HAL_RCC_OscConfig+0x326>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800220e:	4b79      	ldr	r3, [pc, #484]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a78      	ldr	r2, [pc, #480]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 8002214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fdd7 	bl	8000dcc <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x318>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002222:	f7fe fdd3 	bl	8000dcc <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1a5      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002234:	4b6f      	ldr	r3, [pc, #444]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x306>
 8002240:	e018      	b.n	8002274 <HAL_RCC_OscConfig+0x358>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002242:	4b6c      	ldr	r3, [pc, #432]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a6b      	ldr	r2, [pc, #428]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 8002248:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800224c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7fe fdbd 	bl	8000dcc <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002256:	f7fe fdb9 	bl	8000dcc <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e18b      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002268:	4b62      	ldr	r3, [pc, #392]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d036      	beq.n	80022ee <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d019      	beq.n	80022bc <HAL_RCC_OscConfig+0x3a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002288:	4b5a      	ldr	r3, [pc, #360]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 800228a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800228c:	4a59      	ldr	r2, [pc, #356]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7fe fd9a 	bl	8000dcc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x392>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800229c:	f7fe fd96 	bl	8000dcc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x392>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e168      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ae:	4b51      	ldr	r3, [pc, #324]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80022b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x380>
 80022ba:	e018      	b.n	80022ee <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022bc:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80022be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c0:	4a4c      	ldr	r2, [pc, #304]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe fd80 	bl	8000dcc <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80022d0:	f7fe fd7c 	bl	8000dcc <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e14e      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e2:	4b44      	ldr	r3, [pc, #272]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80022e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d036      	beq.n	8002368 <HAL_RCC_OscConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d019      	beq.n	8002336 <HAL_RCC_OscConfig+0x41a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002302:	4b3c      	ldr	r3, [pc, #240]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a3b      	ldr	r2, [pc, #236]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 8002308:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800230c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800230e:	f7fe fd5d 	bl	8000dcc <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x40c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002316:	f7fe fd59 	bl	8000dcc <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x40c>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e12b      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002328:	4b32      	ldr	r3, [pc, #200]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x3fa>
 8002334:	e018      	b.n	8002368 <HAL_RCC_OscConfig+0x44c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002336:	4b2f      	ldr	r3, [pc, #188]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a2e      	ldr	r2, [pc, #184]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 800233c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002340:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002342:	f7fe fd43 	bl	8000dcc <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x440>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800234a:	f7fe fd3f 	bl	8000dcc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e111      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800235c:	4b25      	ldr	r3, [pc, #148]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 809b 	beq.w	80024ac <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <HAL_RCC_OscConfig+0x4dc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1f      	ldr	r2, [pc, #124]	@ (80023f8 <HAL_RCC_OscConfig+0x4dc>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002380:	6013      	str	r3, [r2, #0]

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x47c>
 800238a:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238e:	4a19      	ldr	r2, [pc, #100]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6713      	str	r3, [r2, #112]	@ 0x70
 8002396:	e05a      	b.n	800244e <HAL_RCC_OscConfig+0x532>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d112      	bne.n	80023c6 <HAL_RCC_OscConfig+0x4aa>
 80023a0:	4b14      	ldr	r3, [pc, #80]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a4:	4a13      	ldr	r2, [pc, #76]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ac:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b0:	4a10      	ldr	r2, [pc, #64]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023b8:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023bc:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023be:	f023 0304 	bic.w	r3, r3, #4
 80023c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c4:	e043      	b.n	800244e <HAL_RCC_OscConfig+0x532>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d116      	bne.n	80023fc <HAL_RCC_OscConfig+0x4e0>
 80023ce:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d2:	4a08      	ldr	r2, [pc, #32]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023de:	4a05      	ldr	r2, [pc, #20]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e6:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ea:	4a02      	ldr	r2, [pc, #8]	@ (80023f4 <HAL_RCC_OscConfig+0x4d8>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f2:	e02c      	b.n	800244e <HAL_RCC_OscConfig+0x532>
 80023f4:	58024400 	.word	0x58024400
 80023f8:	58024800 	.word	0x58024800
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b85      	cmp	r3, #133	@ 0x85
 8002402:	d112      	bne.n	800242a <HAL_RCC_OscConfig+0x50e>
 8002404:	4b60      	ldr	r3, [pc, #384]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002408:	4a5f      	ldr	r2, [pc, #380]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002410:	4b5d      	ldr	r3, [pc, #372]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002414:	4a5c      	ldr	r2, [pc, #368]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800241a:	6713      	str	r3, [r2, #112]	@ 0x70
 800241c:	4b5a      	ldr	r3, [pc, #360]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002420:	4a59      	ldr	r2, [pc, #356]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	@ 0x70
 8002428:	e011      	b.n	800244e <HAL_RCC_OscConfig+0x532>
 800242a:	4b57      	ldr	r3, [pc, #348]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242e:	4a56      	ldr	r2, [pc, #344]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6713      	str	r3, [r2, #112]	@ 0x70
 8002436:	4b54      	ldr	r3, [pc, #336]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243a:	4a53      	ldr	r2, [pc, #332]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	6713      	str	r3, [r2, #112]	@ 0x70
 8002442:	4b51      	ldr	r3, [pc, #324]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	4a50      	ldr	r2, [pc, #320]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002448:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800244c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d015      	beq.n	8002482 <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7fe fcb9 	bl	8000dcc <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x558>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fcb5 	bl	8000dcc <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e085      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002474:	4b44      	ldr	r3, [pc, #272]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ee      	beq.n	800245e <HAL_RCC_OscConfig+0x542>
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe fca3 	bl	8000dcc <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x584>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fc9f 	bl	8000dcc <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e06f      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a0:	4b39      	ldr	r3, [pc, #228]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_OscConfig+0x56e>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if (RCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d042      	beq.n	800253a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b18      	cmp	r3, #24
 80024b8:	d131      	bne.n	800251e <HAL_RCC_OscConfig+0x602>
    {
      /* No PLL off possible */
      if (RCC_OscInitStruct->PLL1.PLLState == RCC_PLL_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5aa>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e05c      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos);
 80024c6:	4b30      	ldr	r3, [pc, #192]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 80024c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ca:	08db      	lsrs	r3, r3, #3
 80024cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024d0:	60fb      	str	r3, [r7, #12]

        if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d02e      	beq.n	800253a <HAL_RCC_OscConfig+0x61e>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Disable PLL1FRACLE */
          __HAL_RCC_PLL1_FRACN_DISABLE();
 80024dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	4a29      	ldr	r2, [pc, #164]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024e8:	f7fe fc70 	bl	8000dcc <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80024ee:	bf00      	nop
 80024f0:	f7fe fc6c 	bl	8000dcc <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d0f9      	beq.n	80024f0 <HAL_RCC_OscConfig+0x5d4>
          {
            /* Do nothing */
          }

          /* Configure PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80024fc:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 80024fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002500:	4b22      	ldr	r3, [pc, #136]	@ (800258c <HAL_RCC_OscConfig+0x670>)
 8002502:	4013      	ands	r3, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002508:	00d2      	lsls	r2, r2, #3
 800250a:	491f      	ldr	r1, [pc, #124]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	634b      	str	r3, [r1, #52]	@ 0x34

          /* Enable PLL1FRACLE to latch new value . */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8002510:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	4a1c      	ldr	r2, [pc, #112]	@ (8002588 <HAL_RCC_OscConfig+0x66c>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800251c:	e00d      	b.n	800253a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Initialize PLL1T to 1 to use common PLL initialization function */
      RCC_OscInitStruct->PLL1.PLLT = 1U;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	645a      	str	r2, [r3, #68]	@ 0x44
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(RCC_OscInitStruct->PLL1)) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3324      	adds	r3, #36	@ 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	2000      	movs	r0, #0
 800252c:	f000 fc88 	bl	8002e40 <RCC_PLL_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e022      	b.n	8002580 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL2.PLLState));

  if (RCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCC_OscConfig+0x63c>
  {
    if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(RCC_OscInitStruct->PLL2)) != HAL_OK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	334c      	adds	r3, #76	@ 0x4c
 8002546:	4619      	mov	r1, r3
 8002548:	2001      	movs	r0, #1
 800254a:	f000 fc79 	bl	8002e40 <RCC_PLL_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RCC_OscConfig+0x63c>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e013      	b.n	8002580 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL3.PLLState));

  if (RCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <HAL_RCC_OscConfig+0x662>
  {
    /* Initialize PLL3T to 1 to use common PLL initialization function */
    RCC_OscInitStruct->PLL3.PLLT = 1U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(RCC_OscInitStruct->PLL3)) != HAL_OK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3374      	adds	r3, #116	@ 0x74
 800256c:	4619      	mov	r1, r3
 800256e:	2002      	movs	r0, #2
 8002570:	f000 fc66 	bl	8002e40 <RCC_PLL_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x662>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_RCC_OscConfig+0x664>
    }
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	58024400 	.word	0x58024400
 800258c:	ffff0007 	.word	0xffff0007

08002590 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e182      	b.n	80028aa <HAL_RCC_ClockConfig+0x31a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b8a      	ldr	r3, [pc, #552]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d910      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b87      	ldr	r3, [pc, #540]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80025ba:	4985      	ldr	r1, [pc, #532]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b83      	ldr	r3, [pc, #524]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e16a      	b.n	80028aa <HAL_RCC_ClockConfig+0x31a>
  }

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d010      	beq.n	8002602 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	4b7b      	ldr	r3, [pc, #492]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d908      	bls.n	8002602 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025f0:	4b78      	ldr	r3, [pc, #480]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f023 0207 	bic.w	r2, r3, #7
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	4975      	ldr	r1, [pc, #468]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	4b70      	ldr	r3, [pc, #448]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800261a:	429a      	cmp	r2, r3
 800261c:	d908      	bls.n	8002630 <HAL_RCC_ClockConfig+0xa0>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800261e:	4b6d      	ldr	r3, [pc, #436]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	496a      	ldr	r1, [pc, #424]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800262c:	4313      	orrs	r3, r2
 800262e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d010      	beq.n	800265e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	4b64      	ldr	r3, [pc, #400]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002648:	429a      	cmp	r2, r3
 800264a:	d908      	bls.n	800265e <HAL_RCC_ClockConfig+0xce>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 800264c:	4b61      	ldr	r3, [pc, #388]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	495e      	ldr	r1, [pc, #376]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800265a:	4313      	orrs	r3, r2
 800265c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d010      	beq.n	800268c <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	4b59      	ldr	r3, [pc, #356]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002676:	429a      	cmp	r2, r3
 8002678:	d908      	bls.n	800268c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 800267a:	4b56      	ldr	r3, [pc, #344]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4953      	ldr	r1, [pc, #332]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002688:	4313      	orrs	r3, r2
 800268a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d010      	beq.n	80026ba <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	4b4d      	ldr	r3, [pc, #308]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d908      	bls.n	80026ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b4a      	ldr	r3, [pc, #296]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f023 020f 	bic.w	r2, r3, #15
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4947      	ldr	r1, [pc, #284]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d055      	beq.n	8002772 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    MODIFY_REG(RCC->CDCFGR, RCC_CDCFGR_CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026c6:	4b43      	ldr	r3, [pc, #268]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f023 020f 	bic.w	r2, r3, #15
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4940      	ldr	r1, [pc, #256]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	618b      	str	r3, [r1, #24]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e0:	4b3c      	ldr	r3, [pc, #240]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d121      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0dc      	b.n	80028aa <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026f8:	4b36      	ldr	r3, [pc, #216]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d115      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0d0      	b.n	80028aa <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002710:	4b30      	ldr	r3, [pc, #192]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0c4      	b.n	80028aa <HAL_RCC_ClockConfig+0x31a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002720:	4b2c      	ldr	r3, [pc, #176]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0bc      	b.n	80028aa <HAL_RCC_ClockConfig+0x31a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002730:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f023 0207 	bic.w	r2, r3, #7
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4925      	ldr	r1, [pc, #148]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800273e:	4313      	orrs	r3, r2
 8002740:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002742:	f7fe fb43 	bl	8000dcc <HAL_GetTick>
 8002746:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002748:	e00a      	b.n	8002760 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800274a:	f7fe fb3f 	bl	8000dcc <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e0a4      	b.n	80028aa <HAL_RCC_ClockConfig+0x31a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002760:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	429a      	cmp	r2, r3
 8002770:	d1eb      	bne.n	800274a <HAL_RCC_ClockConfig+0x1ba>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d010      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	429a      	cmp	r2, r3
 800278c:	d208      	bcs.n	80027a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f023 020f 	bic.w	r2, r3, #15
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	490e      	ldr	r1, [pc, #56]	@ (80027d4 <HAL_RCC_ClockConfig+0x244>)
 800279c:	4313      	orrs	r3, r2
 800279e:	61cb      	str	r3, [r1, #28]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d214      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80027b6:	4906      	ldr	r1, [pc, #24]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <HAL_RCC_ClockConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e06c      	b.n	80028aa <HAL_RCC_ClockConfig+0x31a>
 80027d0:	52002000 	.word	0x52002000
 80027d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d010      	beq.n	8002806 <HAL_RCC_ClockConfig+0x276>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	4b32      	ldr	r3, [pc, #200]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d208      	bcs.n	8002806 <HAL_RCC_ClockConfig+0x276>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027f4:	4b2f      	ldr	r3, [pc, #188]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f023 0207 	bic.w	r2, r3, #7
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	492c      	ldr	r1, [pc, #176]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 8002802:	4313      	orrs	r3, r2
 8002804:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d010      	beq.n	8002834 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	4b27      	ldr	r3, [pc, #156]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800281e:	429a      	cmp	r2, r3
 8002820:	d208      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x2a4>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002822:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4921      	ldr	r1, [pc, #132]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 8002830:	4313      	orrs	r3, r2
 8002832:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d010      	beq.n	8002862 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	4b1b      	ldr	r3, [pc, #108]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800284c:	429a      	cmp	r2, r3
 800284e:	d208      	bcs.n	8002862 <HAL_RCC_ClockConfig+0x2d2>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8002850:	4b18      	ldr	r3, [pc, #96]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4915      	ldr	r1, [pc, #84]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 800285e:	4313      	orrs	r3, r2
 8002860:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	d010      	beq.n	8002890 <HAL_RCC_ClockConfig+0x300>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800287a:	429a      	cmp	r2, r3
 800287c:	d208      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x300>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 800287e:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	490a      	ldr	r1, [pc, #40]	@ (80028b4 <HAL_RCC_ClockConfig+0x324>)
 800288c:	4313      	orrs	r3, r2
 800288e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable with the System CPU clock */
  SystemCoreClock = HAL_RCC_GetSysClockFreq();
 8002890:	f000 f816 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8002894:	4603      	mov	r3, r0
 8002896:	4a08      	ldr	r2, [pc, #32]	@ (80028b8 <HAL_RCC_ClockConfig+0x328>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800289a:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <HAL_RCC_ClockConfig+0x32c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fa44 	bl	8000d2c <HAL_InitTick>
 80028a4:	4603      	mov	r3, r0
 80028a6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80028a8:	7afb      	ldrb	r3, [r7, #11]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	58024400 	.word	0x58024400
 80028b8:	24000000 	.word	0x24000000
 80028bc:	24000004 	.word	0x24000004

080028c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b08b      	sub	sp, #44	@ 0x2c
 80028c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c6:	4baa      	ldr	r3, [pc, #680]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ce:	2b18      	cmp	r3, #24
 80028d0:	f200 8136 	bhi.w	8002b40 <HAL_RCC_GetSysClockFreq+0x280>
 80028d4:	a201      	add	r2, pc, #4	@ (adr r2, 80028dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80028d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028da:	bf00      	nop
 80028dc:	08002941 	.word	0x08002941
 80028e0:	08002b41 	.word	0x08002b41
 80028e4:	08002b41 	.word	0x08002b41
 80028e8:	08002b41 	.word	0x08002b41
 80028ec:	08002b41 	.word	0x08002b41
 80028f0:	08002b41 	.word	0x08002b41
 80028f4:	08002b41 	.word	0x08002b41
 80028f8:	08002b41 	.word	0x08002b41
 80028fc:	08002967 	.word	0x08002967
 8002900:	08002b41 	.word	0x08002b41
 8002904:	08002b41 	.word	0x08002b41
 8002908:	08002b41 	.word	0x08002b41
 800290c:	08002b41 	.word	0x08002b41
 8002910:	08002b41 	.word	0x08002b41
 8002914:	08002b41 	.word	0x08002b41
 8002918:	08002b41 	.word	0x08002b41
 800291c:	0800296d 	.word	0x0800296d
 8002920:	08002b41 	.word	0x08002b41
 8002924:	08002b41 	.word	0x08002b41
 8002928:	08002b41 	.word	0x08002b41
 800292c:	08002b41 	.word	0x08002b41
 8002930:	08002b41 	.word	0x08002b41
 8002934:	08002b41 	.word	0x08002b41
 8002938:	08002b41 	.word	0x08002b41
 800293c:	08002973 	.word	0x08002973
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002940:	4b8b      	ldr	r3, [pc, #556]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800294c:	4b88      	ldr	r3, [pc, #544]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	08db      	lsrs	r3, r3, #3
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	4a87      	ldr	r2, [pc, #540]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 800295e:	e0f2      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
      break;
 8002964:	e0ef      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002966:	4b84      	ldr	r3, [pc, #528]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8002968:	623b      	str	r3, [r7, #32]
      break;
 800296a:	e0ec      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800296c:	4b83      	ldr	r3, [pc, #524]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x2bc>)
 800296e:	623b      	str	r3, [r7, #32]
      break;
 8002970:	e0e9      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002972:	4b7f      	ldr	r3, [pc, #508]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 800297c:	4b7c      	ldr	r3, [pc, #496]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002986:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002988:	4b79      	ldr	r3, [pc, #484]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 8002992:	4b77      	ldr	r3, [pc, #476]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002996:	08db      	lsrs	r3, r3, #3
 8002998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029aa:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80c2 	beq.w	8002b3a <HAL_RCC_GetSysClockFreq+0x27a>
      {
        switch (pllsource)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d064      	beq.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1c6>
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	f200 8083 	bhi.w	8002aca <HAL_RCC_GetSysClockFreq+0x20a>
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x112>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d038      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x182>
 80029d0:	e07b      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x20a>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80029d2:	4b67      	ldr	r3, [pc, #412]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02d      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80029de:	4b64      	ldr	r3, [pc, #400]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	4a62      	ldr	r2, [pc, #392]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	ee07 3a90 	vmov	s15, r3
 8002a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a08:	4b59      	ldr	r3, [pc, #356]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a18:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a1c:	eddf 5a58 	vldr	s11, [pc, #352]	@ 8002b80 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a34:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 8002a38:	e069      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a40:	e065      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4c:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002b84 <HAL_RCC_GetSysClockFreq+0x2c4>
 8002a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a54:	4b46      	ldr	r3, [pc, #280]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a64:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a68:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002b80 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002a84:	e043      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a90:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002b88 <HAL_RCC_GetSysClockFreq+0x2c8>
 8002a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a98:	4b35      	ldr	r3, [pc, #212]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aa8:	ed97 6a04 	vldr	s12, [r7, #16]
 8002aac:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002b80 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ab8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002ac8:	e021      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad4:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002b84 <HAL_RCC_GetSysClockFreq+0x2c4>
 8002ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002adc:	4b24      	ldr	r3, [pc, #144]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aec:	ed97 6a04 	vldr	s12, [r7, #16]
 8002af0:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8002b80 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002afc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b08:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002b0c:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 8002b0e:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	0a5b      	lsrs	r3, r3, #9
 8002b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b26:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b32:	ee17 3a90 	vmov	r3, s15
 8002b36:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b38:	e005      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	623b      	str	r3, [r7, #32]
      break;
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 8002b40:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8002b42:	623b      	str	r3, [r7, #32]
      break;
 8002b44:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 8002b46:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b07      	cmp	r3, #7
 8002b54:	d905      	bls.n	8002b62 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3b07      	subs	r3, #7
 8002b5a:	6a3a      	ldr	r2, [r7, #32]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b60:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002b62:	6a3b      	ldr	r3, [r7, #32]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	372c      	adds	r7, #44	@ 0x2c
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	58024400 	.word	0x58024400
 8002b74:	03d09000 	.word	0x03d09000
 8002b78:	003d0900 	.word	0x003d0900
 8002b7c:	016e3600 	.word	0x016e3600
 8002b80:	46000000 	.word	0x46000000
 8002b84:	4a742400 	.word	0x4a742400
 8002b88:	4bb71b00 	.word	0x4bb71b00

08002b8c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 8002b92:	4a10      	ldr	r2, [pc, #64]	@ (8002bd4 <HAL_RCC_GetHCLKFreq+0x48>)
 8002b94:	463b      	mov	r3, r7
 8002b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b9a:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 8002b9e:	f7ff fe8f 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8002ba2:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <HAL_RCC_GetHCLKFreq+0x4c>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d909      	bls.n	8002bc8 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	3b08      	subs	r3, #8
 8002bb8:	3310      	adds	r3, #16
 8002bba:	443b      	add	r3, r7
 8002bbc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	40d3      	lsrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	080098d0 	.word	0x080098d0
 8002bd8:	58024400 	.word	0x58024400

08002bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8002be2:	f7ff ffd3 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002be6:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
 8002be8:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <HAL_RCC_GetPCLK1Freq+0x34>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d905      	bls.n	8002c04 <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	3b03      	subs	r3, #3
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	58024400 	.word	0x58024400

08002c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK2 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8002c1a:	f7ff ffb7 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002c1e:	6078      	str	r0, [r7, #4]
  /* APB2 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE2) >> RCC_APBCFGR_PPRE2_Pos;
 8002c20:	4b09      	ldr	r3, [pc, #36]	@ (8002c48 <HAL_RCC_GetPCLK2Freq+0x34>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d905      	bls.n	8002c3e <HAL_RCC_GetPCLK2Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	3b03      	subs	r3, #3
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8002c3e:	687b      	ldr	r3, [r7, #4]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	58024400 	.word	0x58024400

08002c4c <HAL_RCC_GetPCLK4Freq>:
  * @note   Each time PCLK4 changes, this function must be called to update the
  *         right PCLK4 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK4 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK4Freq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK4 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8002c52:	f7ff ff9b 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002c56:	6078      	str	r0, [r7, #4]
  /* APB4 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE4) >> RCC_APBCFGR_PPRE4_Pos;
 8002c58:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_GetPCLK4Freq+0x34>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d905      	bls.n	8002c76 <HAL_RCC_GetPCLK4Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	3b03      	subs	r3, #3
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
 8002c74:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8002c76:	687b      	ldr	r3, [r7, #4]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	58024400 	.word	0x58024400

08002c84 <HAL_RCC_GetPLL1QFreq>:
/**
  * @brief  Return the PLL1Q frequency.
  * @retval PLL1Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1QFreq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL1Q divider */
  pllq = ((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVQ) >> RCC_PLL1DIVR1_DIVQ_Pos) + 1U;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <HAL_RCC_GetPLL1QFreq+0x28>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c94:	3301      	adds	r3, #1
 8002c96:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1Q one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllq);
 8002c98:	f000 fa28 	bl	80030ec <RCC_PLL1_GetVCOOutputFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	58024400 	.word	0x58024400

08002cb0 <HAL_RCC_GetPLL2PFreq>:
/**
  * @brief  Return the PLL2P frequency.
  * @retval PLL2P frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2PFreq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
  uint32_t pllp;

  /* PLL2P divider */
  pllp = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVP) >> RCC_PLL2DIVR1_DIVP_Pos) + 1U;
 8002cb6:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <HAL_RCC_GetPLL2PFreq+0x28>)
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cba:	0a5b      	lsrs	r3, r3, #9
 8002cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2P one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllp);
 8002cc4:	f000 fa98 	bl	80031f8 <RCC_PLL2_GetVCOOutputFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	58024400 	.word	0x58024400

08002cdc <HAL_RCC_GetPLL2QFreq>:
/**
  * @brief  Return the PLL2Q frequency.
  * @retval PLL2Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2QFreq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL2Q divider */
  pllq = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVQ) >> RCC_PLL2DIVR1_DIVQ_Pos) + 1U;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <HAL_RCC_GetPLL2QFreq+0x28>)
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	0c1b      	lsrs	r3, r3, #16
 8002ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cec:	3301      	adds	r3, #1
 8002cee:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2Q one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllq);
 8002cf0:	f000 fa82 	bl	80031f8 <RCC_PLL2_GetVCOOutputFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	58024400 	.word	0x58024400

08002d08 <HAL_RCC_GetPLL2RFreq>:
/**
  * @brief  Return the PLL2R frequency.
  * @retval PLL2R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2RFreq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL2R divider */
  pllr = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVR) >> RCC_PLL2DIVR1_DIVR_Pos) + 1U;
 8002d0e:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <HAL_RCC_GetPLL2RFreq+0x28>)
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	0e1b      	lsrs	r3, r3, #24
 8002d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d18:	3301      	adds	r3, #1
 8002d1a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2R one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllr);
 8002d1c:	f000 fa6c 	bl	80031f8 <RCC_PLL2_GetVCOOutputFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	58024400 	.word	0x58024400

08002d34 <HAL_RCC_GetPLL2SFreq>:
/**
  * @brief  Return the PLL2S frequency.
  * @retval PLL2S frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2SFreq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
  uint32_t plls;

  /* PLL2S divider */
  plls = ((RCC->PLL2DIVR2 & RCC_PLL2DIVR2_DIVS) >> RCC_PLL2DIVR2_DIVS_Pos) + 1U;
 8002d3a:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <HAL_RCC_GetPLL2SFreq+0x28>)
 8002d3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	3301      	adds	r3, #1
 8002d46:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2R one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / plls);
 8002d48:	f000 fa56 	bl	80031f8 <RCC_PLL2_GetVCOOutputFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	58024400 	.word	0x58024400

08002d60 <HAL_RCC_GetPLL2TFreq>:
/**
  * @brief  Return the PLL2T frequency.
  * @retval PLL2T frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2TFreq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
  uint32_t pllt;

  /* PLL2T divider */
  pllt = ((RCC->PLL2DIVR2 & RCC_PLL2DIVR2_DIVT) >> RCC_PLL2DIVR2_DIVT_Pos) + 1U;
 8002d66:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <HAL_RCC_GetPLL2TFreq+0x2c>)
 8002d68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	3301      	adds	r3, #1
 8002d74:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2T one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllt);
 8002d76:	f000 fa3f 	bl	80031f8 <RCC_PLL2_GetVCOOutputFreq>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	58024400 	.word	0x58024400

08002d90 <HAL_RCC_GetPLL3PFreq>:
/**
  * @brief  Return the PLL3P frequency.
  * @retval PLL3P frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3PFreq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  uint32_t pllp;

  /* PLL3P divider */
  pllp = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVP) >> RCC_PLL3DIVR1_DIVP_Pos) + 1U;
 8002d96:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <HAL_RCC_GetPLL3PFreq+0x28>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	0a5b      	lsrs	r3, r3, #9
 8002d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002da0:	3301      	adds	r3, #1
 8002da2:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3P one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllp);
 8002da4:	f000 faae 	bl	8003304 <RCC_PLL3_GetVCOOutputFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	58024400 	.word	0x58024400

08002dbc <HAL_RCC_GetPLL3QFreq>:
/**
  * @brief  Return the PLL3Q frequency.
  * @retval PLL3Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3QFreq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL3Q divider */
  pllq = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVQ) >> RCC_PLL3DIVR1_DIVQ_Pos) + 1U;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <HAL_RCC_GetPLL3QFreq+0x28>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dcc:	3301      	adds	r3, #1
 8002dce:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3Q one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllq);
 8002dd0:	f000 fa98 	bl	8003304 <RCC_PLL3_GetVCOOutputFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	58024400 	.word	0x58024400

08002de8 <HAL_RCC_GetPLL3RFreq>:
/**
  * @brief  Return the PLL3R frequency.
  * @retval PLL3R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3RFreq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL3R divider */
  pllr = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVR) >> RCC_PLL3DIVR1_DIVR_Pos) + 1U;
 8002dee:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <HAL_RCC_GetPLL3RFreq+0x28>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	0e1b      	lsrs	r3, r3, #24
 8002df4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df8:	3301      	adds	r3, #1
 8002dfa:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3R one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllr);
 8002dfc:	f000 fa82 	bl	8003304 <RCC_PLL3_GetVCOOutputFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	58024400 	.word	0x58024400

08002e14 <HAL_RCC_GetPLL3SFreq>:
/**
  * @brief  Return the PLL3S frequency.
  * @retval PLL3S frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3SFreq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  uint32_t plls;

  /* PLL3S divider */
  plls = ((RCC->PLL3DIVR2 & RCC_PLL3DIVR2_DIVS) >> RCC_PLL3DIVR2_DIVS_Pos) + 1U;
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <HAL_RCC_GetPLL3SFreq+0x28>)
 8002e1c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	3301      	adds	r3, #1
 8002e26:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3S one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / plls);
 8002e28:	f000 fa6c 	bl	8003304 <RCC_PLL3_GetVCOOutputFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	58024400 	.word	0x58024400

08002e40 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_divr1_reg;
  __IO uint32_t *p_rcc_pll_divr2_reg;
  __IO uint32_t *p_rcc_pll_fracr_reg;
  HAL_StatusTypeDef ret = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tickstart;
  uint32_t pllsrc;
  uint32_t pllvco;

  p_rcc_pll_divr1_reg = &(RCC->PLL1DIVR1) + (((uint32_t)0x02) * PLLnumber);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	00da      	lsls	r2, r3, #3
 8002e54:	4b9a      	ldr	r3, [pc, #616]	@ (80030c0 <RCC_PLL_Config+0x280>)
 8002e56:	4413      	add	r3, r2
 8002e58:	61fb      	str	r3, [r7, #28]
  p_rcc_pll_divr2_reg = &(RCC->PLL1DIVR2) + (((uint32_t)0x01) * PLLnumber);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	009a      	lsls	r2, r3, #2
 8002e5e:	4b99      	ldr	r3, [pc, #612]	@ (80030c4 <RCC_PLL_Config+0x284>)
 8002e60:	4413      	add	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]

  /* Disable the post-dividers */
  CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1PEN | RCC_PLLCFGR_PLL1QEN | RCC_PLLCFGR_PLL1REN | RCC_PLLCFGR_PLL1SEN |
 8002e64:	4b98      	ldr	r3, [pc, #608]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002e66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	4a92      	ldr	r2, [pc, #584]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002e80:	400b      	ands	r3, r1
 8002e82:	62d3      	str	r3, [r2, #44]	@ 0x2c
                           0x00000200U) /* Hardcoded because no definition in CMSIS */
            << ((RCC_PLLCFGR_PLL2PEN_Pos - RCC_PLLCFGR_PLL1PEN_Pos)*PLLnumber));

  /* Ensure PLLx is disabled */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002e84:	4b90      	ldr	r3, [pc, #576]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	498c      	ldr	r1, [pc, #560]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e9c:	f7fd ff96 	bl	8000dcc <HAL_GetTick>
 8002ea0:	6178      	str	r0, [r7, #20]

  /* Wait till PLLx is disabled */
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 8002ea2:	e008      	b.n	8002eb6 <RCC_PLL_Config+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002ea4:	f7fd ff92 	bl	8000dcc <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b32      	cmp	r3, #50	@ 0x32
 8002eb0:	d901      	bls.n	8002eb6 <RCC_PLL_Config+0x76>
    {
      return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0ff      	b.n	80030b6 <RCC_PLL_Config+0x276>
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 8002eb6:	4b84      	ldr	r3, [pc, #528]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1eb      	bne.n	8002ea4 <RCC_PLL_Config+0x64>
    }
  }

  if (pPLLInit->PLLState == RCC_PLL_ON)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	f040 80dd 	bne.w	8003090 <RCC_PLL_Config+0x250>
    assert_param(IS_RCC_PLLQ_VALUE(pPLLInit->PLLQ));
    assert_param(IS_RCC_PLLR_VALUE(pPLLInit->PLLR));
    assert_param(IS_RCC_PLLS_VALUE(pPLLInit->PLLS));
    assert_param(IS_RCC_PLLT_VALUE(pPLLInit->PLLT));

    pllsrc = pPLLInit->PLLSource;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	613b      	str	r3, [r7, #16]

    /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
    if (pllsrc == RCC_PLLSOURCE_HSI)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <RCC_PLL_Config+0xb6>
    {
      /* Clock source is HSI or HSI/HSIDIV */
      pllvco = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002ee2:	4b79      	ldr	r3, [pc, #484]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	08db      	lsrs	r3, r3, #3
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	4a77      	ldr	r2, [pc, #476]	@ (80030cc <RCC_PLL_Config+0x28c>)
 8002eee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef4:	e007      	b.n	8002f06 <RCC_PLL_Config+0xc6>
    }
    else if (pllsrc == RCC_PLLSOURCE_HSE)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d102      	bne.n	8002f02 <RCC_PLL_Config+0xc2>
    {
      /* Clock source is HSE */
      pllvco = HSE_VALUE;
 8002efc:	4b74      	ldr	r3, [pc, #464]	@ (80030d0 <RCC_PLL_Config+0x290>)
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f00:	e001      	b.n	8002f06 <RCC_PLL_Config+0xc6>
    }
    else
    {
      /* Clock source is CSI */
      pllvco = CSI_VALUE;
 8002f02:	4b74      	ldr	r3, [pc, #464]	@ (80030d4 <RCC_PLL_Config+0x294>)
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Compute VCO input frequency depending on M divider */
    pllvco = (pllvco / pPLLInit->PLLM);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
    assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllvco));

    if (pllvco >= RCC_PLL_INPUTRANGE2_FREQMAX)
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	4a70      	ldr	r2, [pc, #448]	@ (80030d8 <RCC_PLL_Config+0x298>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d302      	bcc.n	8002f20 <RCC_PLL_Config+0xe0>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE3 | RCC_PLL_VCO_HIGH;
 8002f1a:	2318      	movs	r3, #24
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1e:	e00f      	b.n	8002f40 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE1_FREQMAX)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	4a6e      	ldr	r2, [pc, #440]	@ (80030dc <RCC_PLL_Config+0x29c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d902      	bls.n	8002f2e <RCC_PLL_Config+0xee>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE2 | RCC_PLL_VCO_HIGH;
 8002f28:	2310      	movs	r3, #16
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2c:	e008      	b.n	8002f40 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE0_FREQMAX)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	4a6b      	ldr	r2, [pc, #428]	@ (80030e0 <RCC_PLL_Config+0x2a0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d902      	bls.n	8002f3c <RCC_PLL_Config+0xfc>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE1 | RCC_PLL_VCO_HIGH;
 8002f36:	2308      	movs	r3, #8
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3a:	e001      	b.n	8002f40 <RCC_PLL_Config+0x100>
    }
    else
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE0 | RCC_PLL_VCO_LOW;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    pllvco = (pllvco << ((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos) * PLLnumber));
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Configure PLL source and PLLM divider */
    MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | (RCC_PLLCKSELR_DIVM1 << ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))), \
 8002f54:	4b5c      	ldr	r3, [pc, #368]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002f56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	f043 0303 	orr.w	r3, r3, #3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	3304      	adds	r3, #4
 8002f76:	4099      	lsls	r1, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	4952      	ldr	r1, [pc, #328]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	628b      	str	r3, [r1, #40]	@ 0x28
               pllsrc | (pPLLInit->PLLM << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))));

    if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) != pllsrc)
 8002f82:	4b51      	ldr	r3, [pc, #324]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <RCC_PLL_Config+0x154>
    {
      /* There is another PLL activated with another source */
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e090      	b.n	80030b6 <RCC_PLL_Config+0x276>
    }

    /* Configure VCO input range, VCO selection and clear FRACEN */
    MODIFY_REG(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1RGE | RCC_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN) << (((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos)*PLLnumber)), \
 8002f94:	4b4c      	ldr	r3, [pc, #304]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002f96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	221b      	movs	r2, #27
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	ea01 0203 	and.w	r2, r1, r3
 8002fb0:	4945      	ldr	r1, [pc, #276]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c
               pllvco);

    /* Configure PLLN, PLLP, PLLQ, PLLR, PLLS and PLLT dividers */
    WRITE_REG(*p_rcc_pll_divr1_reg, ((pPLLInit->PLLN - 1U) |
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	1e5a      	subs	r2, r3, #1
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	025b      	lsls	r3, r3, #9
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLP - 1U) << RCC_PLL1DIVR1_DIVP_Pos) |
                                     ((pPLLInit->PLLQ - 1U) << RCC_PLL1DIVR1_DIVQ_Pos) |
                                     ((pPLLInit->PLLR - 1U) << RCC_PLL1DIVR1_DIVR_Pos)));
    WRITE_REG(*p_rcc_pll_divr2_reg, ((pPLLInit->PLLS - 1U) |
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	1e5a      	subs	r2, r3, #1
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLT - 1U) << RCC_PLL2DIVR2_DIVT_Pos)));

    if (PLLnumber == RCC_PLL1_CONFIG)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d105      	bne.n	8003006 <RCC_PLL_Config+0x1c6>
    {
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1PEN);
 8002ffa:	4b33      	ldr	r3, [pc, #204]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8002ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffe:	4a32      	ldr	r2, [pc, #200]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8003000:	f043 0320 	orr.w	r3, r3, #32
 8003004:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    if (pPLLInit->PLLFractional != 0U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01c      	beq.n	8003048 <RCC_PLL_Config+0x208>
    {
      assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));

      p_rcc_pll_fracr_reg = &(RCC->PLL1FRACR) + (((uint32_t)0x02) * PLLnumber);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	00da      	lsls	r2, r3, #3
 8003012:	4b34      	ldr	r3, [pc, #208]	@ (80030e4 <RCC_PLL_Config+0x2a4>)
 8003014:	4413      	add	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

      /* Configure PLLFRACN */
      MODIFY_REG(*p_rcc_pll_fracr_reg, RCC_PLL1FRACR_FRACN, pPLLInit->PLLFractional << RCC_PLL1FRACR_FRACN_Pos);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b32      	ldr	r3, [pc, #200]	@ (80030e8 <RCC_PLL_Config+0x2a8>)
 800301e:	4013      	ands	r3, r2
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003024:	00d2      	lsls	r2, r2, #3
 8003026:	431a      	orrs	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	601a      	str	r2, [r3, #0]

      /* Enable PLLFRACLE */
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN << ((RCC_PLLCFGR_PLL2FRACEN_Pos - RCC_PLLCFGR_PLL1FRACEN_Pos)*PLLnumber));
 800302c:	4b26      	ldr	r3, [pc, #152]	@ (80030c8 <RCC_PLL_Config+0x288>)
 800302e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	2201      	movs	r2, #1
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	4a21      	ldr	r2, [pc, #132]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8003044:	430b      	orrs	r3, r1
 8003046:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable the PLLx */
    SET_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8003048:	4b1f      	ldr	r3, [pc, #124]	@ (80030c8 <RCC_PLL_Config+0x288>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	491b      	ldr	r1, [pc, #108]	@ (80030c8 <RCC_PLL_Config+0x288>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800305e:	f7fd feb5 	bl	8000dcc <HAL_GetTick>
 8003062:	6178      	str	r0, [r7, #20]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8003064:	e008      	b.n	8003078 <RCC_PLL_Config+0x238>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003066:	f7fd feb1 	bl	8000dcc <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b32      	cmp	r3, #50	@ 0x32
 8003072:	d901      	bls.n	8003078 <RCC_PLL_Config+0x238>
      {
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e01e      	b.n	80030b6 <RCC_PLL_Config+0x276>
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8003078:	4b13      	ldr	r3, [pc, #76]	@ (80030c8 <RCC_PLL_Config+0x288>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0eb      	beq.n	8003066 <RCC_PLL_Config+0x226>
 800308e:	e010      	b.n	80030b2 <RCC_PLL_Config+0x272>
    }
  }
  else
  {
    /* Disable outputs to save power when PLLx is off */
    MODIFY_REG(RCC->PLLCKSELR, ((RCC_PLLCKSELR_DIVM1 << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber)))
 8003090:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <RCC_PLL_Config+0x288>)
 8003092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	3304      	adds	r3, #4
 800309a:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	f043 0303 	orr.w	r3, r3, #3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4013      	ands	r3, r2
 80030aa:	4a07      	ldr	r2, [pc, #28]	@ (80030c8 <RCC_PLL_Config+0x288>)
 80030ac:	f043 0303 	orr.w	r3, r3, #3
 80030b0:	6293      	str	r3, [r2, #40]	@ 0x28
                                | RCC_PLLCKSELR_PLLSRC), RCC_PLLSOURCE_NONE);
  }

  return ret;
 80030b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3728      	adds	r7, #40	@ 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	58024430 	.word	0x58024430
 80030c4:	580244c0 	.word	0x580244c0
 80030c8:	58024400 	.word	0x58024400
 80030cc:	03d09000 	.word	0x03d09000
 80030d0:	016e3600 	.word	0x016e3600
 80030d4:	003d0900 	.word	0x003d0900
 80030d8:	007a1200 	.word	0x007a1200
 80030dc:	003d08ff 	.word	0x003d08ff
 80030e0:	001e847f 	.word	0x001e847f
 80030e4:	58024434 	.word	0x58024434
 80030e8:	ffff0007 	.word	0xffff0007

080030ec <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static uint32_t RCC_PLL1_GetVCOOutputFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	@ 0x24
 80030f0:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL1 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 80030f2:	4b3c      	ldr	r3, [pc, #240]	@ (80031e4 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 80030f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f6:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL1DIVR1;
 80030f8:	4b3a      	ldr	r3, [pc, #232]	@ (80031e4 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL1 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003106:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL1DIVR1_DIVN) + 1U;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	3301      	adds	r3, #1
 8003110:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <RCC_PLL1_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	e05c      	b.n	80031d6 <RCC_PLL1_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
 800311c:	4b31      	ldr	r3, [pc, #196]	@ (80031e4 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 800311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d006      	beq.n	8003136 <RCC_PLL1_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos;
 8003128:	4b2e      	ldr	r3, [pc, #184]	@ (80031e4 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 800312a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312c:	08db      	lsrs	r3, r3, #3
 800312e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e001      	b.n	800313a <RCC_PLL1_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d019      	beq.n	8003178 <RCC_PLL1_GetVCOOutputFreq+0x8c>
 8003144:	2b02      	cmp	r3, #2
 8003146:	d81d      	bhi.n	8003184 <RCC_PLL1_GetVCOOutputFreq+0x98>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <RCC_PLL1_GetVCOOutputFreq+0x66>
 800314c:	2b01      	cmp	r3, #1
 800314e:	d016      	beq.n	800317e <RCC_PLL1_GetVCOOutputFreq+0x92>
 8003150:	e018      	b.n	8003184 <RCC_PLL1_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8003152:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <RCC_PLL1_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 800315e:	4b21      	ldr	r3, [pc, #132]	@ (80031e4 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	08db      	lsrs	r3, r3, #3
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	4a1f      	ldr	r2, [pc, #124]	@ (80031e8 <RCC_PLL1_GetVCOOutputFreq+0xfc>)
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8003170:	e00b      	b.n	800318a <RCC_PLL1_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
      break;
 8003176:	e008      	b.n	800318a <RCC_PLL1_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8003178:	4b1c      	ldr	r3, [pc, #112]	@ (80031ec <RCC_PLL1_GetVCOOutputFreq+0x100>)
 800317a:	61fb      	str	r3, [r7, #28]
      break;
 800317c:	e005      	b.n	800318a <RCC_PLL1_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL1 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 800317e:	4b1c      	ldr	r3, [pc, #112]	@ (80031f0 <RCC_PLL1_GetVCOOutputFreq+0x104>)
 8003180:	61fb      	str	r3, [r7, #28]
      break;
 8003182:	e002      	b.n	800318a <RCC_PLL1_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	61fb      	str	r3, [r7, #28]
      break;
 8003188:	bf00      	nop
  }
  
  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	ee07 3a90 	vmov	s15, r3
 8003190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80031b6:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 80031f4 <RCC_PLL1_GetVCOOutputFreq+0x108>
 80031ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c6:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80031ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80031ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d2:	ee17 3a90 	vmov	r3, s15
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	58024400 	.word	0x58024400
 80031e8:	03d09000 	.word	0x03d09000
 80031ec:	016e3600 	.word	0x016e3600
 80031f0:	003d0900 	.word	0x003d0900
 80031f4:	46000000 	.word	0x46000000

080031f8 <RCC_PLL2_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_PLL2_GetVCOOutputFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	@ 0x24
 80031fc:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL2 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 80031fe:	4b3c      	ldr	r3, [pc, #240]	@ (80032f0 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8003200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003202:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL2DIVR1;
 8003204:	4b3a      	ldr	r3, [pc, #232]	@ (80032f0 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL2 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	0b1b      	lsrs	r3, r3, #12
 800320e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003212:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL2DIVR1_DIVN) + 1U;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321a:	3301      	adds	r3, #1
 800321c:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <RCC_PLL2_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	e05c      	b.n	80032e2 <RCC_PLL2_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) != 0U)
 8003228:	4b31      	ldr	r3, [pc, #196]	@ (80032f0 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <RCC_PLL2_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN) >> RCC_PLL2FRACR_FRACN_Pos;
 8003234:	4b2e      	ldr	r3, [pc, #184]	@ (80032f0 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	e001      	b.n	8003246 <RCC_PLL2_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d019      	beq.n	8003284 <RCC_PLL2_GetVCOOutputFreq+0x8c>
 8003250:	2b02      	cmp	r3, #2
 8003252:	d81d      	bhi.n	8003290 <RCC_PLL2_GetVCOOutputFreq+0x98>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <RCC_PLL2_GetVCOOutputFreq+0x66>
 8003258:	2b01      	cmp	r3, #1
 800325a:	d016      	beq.n	800328a <RCC_PLL2_GetVCOOutputFreq+0x92>
 800325c:	e018      	b.n	8003290 <RCC_PLL2_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL2 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800325e:	4b24      	ldr	r3, [pc, #144]	@ (80032f0 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <RCC_PLL2_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 800326a:	4b21      	ldr	r3, [pc, #132]	@ (80032f0 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	08db      	lsrs	r3, r3, #3
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	4a1f      	ldr	r2, [pc, #124]	@ (80032f4 <RCC_PLL2_GetVCOOutputFreq+0xfc>)
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 800327c:	e00b      	b.n	8003296 <RCC_PLL2_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
      break;
 8003282:	e008      	b.n	8003296 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL2 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8003284:	4b1c      	ldr	r3, [pc, #112]	@ (80032f8 <RCC_PLL2_GetVCOOutputFreq+0x100>)
 8003286:	61fb      	str	r3, [r7, #28]
      break;
 8003288:	e005      	b.n	8003296 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL2 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 800328a:	4b1c      	ldr	r3, [pc, #112]	@ (80032fc <RCC_PLL2_GetVCOOutputFreq+0x104>)
 800328c:	61fb      	str	r3, [r7, #28]
      break;
 800328e:	e002      	b.n	8003296 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
      break;
 8003294:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	ee07 3a90 	vmov	s15, r3
 800329c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	ee07 3a90 	vmov	s15, r3
 80032b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80032c2:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8003300 <RCC_PLL2_GetVCOOutputFreq+0x108>
 80032c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d2:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80032d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032de:	ee17 3a90 	vmov	r3, s15
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3724      	adds	r7, #36	@ 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	58024400 	.word	0x58024400
 80032f4:	03d09000 	.word	0x03d09000
 80032f8:	016e3600 	.word	0x016e3600
 80032fc:	003d0900 	.word	0x003d0900
 8003300:	46000000 	.word	0x46000000

08003304 <RCC_PLL3_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL3 VCO output frequency
  * @retval Value of PLL3 VCO output frequency
  */
static uint32_t RCC_PLL3_GetVCOOutputFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	@ 0x24
 8003308:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL3 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 800330a:	4b3c      	ldr	r3, [pc, #240]	@ (80033fc <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800330c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330e:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL3DIVR1;
 8003310:	4b3a      	ldr	r3, [pc, #232]	@ (80033fc <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL3 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	0d1b      	lsrs	r3, r3, #20
 800331a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800331e:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL3DIVR1_DIVN) + 1U;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	3301      	adds	r3, #1
 8003328:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <RCC_PLL3_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	e05c      	b.n	80033ee <RCC_PLL3_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) != 0U)
 8003334:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8003336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003338:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <RCC_PLL3_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN) >> RCC_PLL3FRACR_FRACN_Pos;
 8003340:	4b2e      	ldr	r3, [pc, #184]	@ (80033fc <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	08db      	lsrs	r3, r3, #3
 8003346:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e001      	b.n	8003352 <RCC_PLL3_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d019      	beq.n	8003390 <RCC_PLL3_GetVCOOutputFreq+0x8c>
 800335c:	2b02      	cmp	r3, #2
 800335e:	d81d      	bhi.n	800339c <RCC_PLL3_GetVCOOutputFreq+0x98>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <RCC_PLL3_GetVCOOutputFreq+0x66>
 8003364:	2b01      	cmp	r3, #1
 8003366:	d016      	beq.n	8003396 <RCC_PLL3_GetVCOOutputFreq+0x92>
 8003368:	e018      	b.n	800339c <RCC_PLL3_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL3 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800336a:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <RCC_PLL3_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8003376:	4b21      	ldr	r3, [pc, #132]	@ (80033fc <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	08db      	lsrs	r3, r3, #3
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	4a1f      	ldr	r2, [pc, #124]	@ (8003400 <RCC_PLL3_GetVCOOutputFreq+0xfc>)
 8003382:	fa22 f303 	lsr.w	r3, r2, r3
 8003386:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8003388:	e00b      	b.n	80033a2 <RCC_PLL3_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
      break;
 800338e:	e008      	b.n	80033a2 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL3 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8003390:	4b1c      	ldr	r3, [pc, #112]	@ (8003404 <RCC_PLL3_GetVCOOutputFreq+0x100>)
 8003392:	61fb      	str	r3, [r7, #28]
      break;
 8003394:	e005      	b.n	80033a2 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL3 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8003396:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <RCC_PLL3_GetVCOOutputFreq+0x104>)
 8003398:	61fb      	str	r3, [r7, #28]
      break;
 800339a:	e002      	b.n	80033a2 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
      break;
 80033a0:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80033ce:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 800340c <RCC_PLL3_GetVCOOutputFreq+0x108>
 80033d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033de:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 80033e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ea:	ee17 3a90 	vmov	r3, s15
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3724      	adds	r7, #36	@ 0x24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	58024400 	.word	0x58024400
 8003400:	03d09000 	.word	0x03d09000
 8003404:	016e3600 	.word	0x016e3600
 8003408:	003d0900 	.word	0x003d0900
 800340c:	46000000 	.word	0x46000000

08003410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003418:	2300      	movs	r3, #0
 800341a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800341c:	2300      	movs	r3, #0
 800341e:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8081 	beq.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800342e:	4b8c      	ldr	r3, [pc, #560]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003436:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d029      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x82>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	429a      	cmp	r2, r3
 800344a:	d022      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344c:	4b85      	ldr	r3, [pc, #532]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a84      	ldr	r2, [pc, #528]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003456:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003458:	4b82      	ldr	r3, [pc, #520]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	75fb      	strb	r3, [r7, #23]
 8003468:	e013      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800346a:	4b7d      	ldr	r3, [pc, #500]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003472:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 8003474:	4b7a      	ldr	r3, [pc, #488]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003478:	4a79      	ldr	r2, [pc, #484]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347e:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003480:	4b77      	ldr	r3, [pc, #476]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003484:	4a76      	ldr	r2, [pc, #472]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800348a:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 800348c:	4a74      	ldr	r2, [pc, #464]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d149      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800349c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034a0:	d115      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fd fc93 	bl	8000dcc <HAL_GetTick>
 80034a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a8:	e00b      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fd fc8f 	bl	8000dcc <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d902      	bls.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	75fb      	strb	r3, [r7, #23]
            break;
 80034c0:	e005      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c2:	4b67      	ldr	r3, [pc, #412]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ed      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d128      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d8:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00c      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xea>
 80034e0:	4b5f      	ldr	r3, [pc, #380]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ec:	0919      	lsrs	r1, r3, #4
 80034ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034f0:	400b      	ands	r3, r1
 80034f2:	495b      	ldr	r1, [pc, #364]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	610b      	str	r3, [r1, #16]
 80034f8:	e005      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80034fa:	4b59      	ldr	r3, [pc, #356]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	4a58      	ldr	r2, [pc, #352]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003500:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003504:	6113      	str	r3, [r2, #16]
 8003506:	4b56      	ldr	r3, [pc, #344]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003508:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800350e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003512:	4953      	ldr	r1, [pc, #332]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003514:	4313      	orrs	r3, r2
 8003516:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 8003518:	4b51      	ldr	r3, [pc, #324]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351c:	4a50      	ldr	r2, [pc, #320]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800351e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003522:	6713      	str	r3, [r2, #112]	@ 0x70
 8003524:	e004      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	75bb      	strb	r3, [r7, #22]
 800352a:	e001      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d030      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d819      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003544:	a201      	add	r2, pc, #4	@ (adr r2, 800354c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354a:	bf00      	nop
 800354c:	0800357f 	.word	0x0800357f
 8003550:	0800355d 	.word	0x0800355d
 8003554:	0800356b 	.word	0x0800356b
 8003558:	0800357f 	.word	0x0800357f
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800355c:	4b40      	ldr	r3, [pc, #256]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	4a3f      	ldr	r2, [pc, #252]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003566:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8003568:	e00a      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 800356a:	4b3d      	ldr	r3, [pc, #244]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	4a3c      	ldr	r2, [pc, #240]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003574:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8003576:	e003      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	75fb      	strb	r3, [r7, #23]
        break;
 800357c:	e000      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 800357e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003580:	7dfb      	ldrb	r3, [r7, #23]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003586:	4b36      	ldr	r3, [pc, #216]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358a:	f023 0203 	bic.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4933      	ldr	r1, [pc, #204]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003594:	4313      	orrs	r3, r2
 8003596:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003598:	e001      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d00c      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d811      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d10d      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80035be:	4b28      	ldr	r3, [pc, #160]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c2:	4a27      	ldr	r2, [pc, #156]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80035c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 80035ca:	e00a      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80035cc:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d0:	4a23      	ldr	r2, [pc, #140]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80035d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
        break;
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 80035e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 80035e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80035ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	491a      	ldr	r1, [pc, #104]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80035fa:	e001      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d031      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b80      	cmp	r3, #128	@ 0x80
 8003612:	d00c      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003614:	2b80      	cmp	r3, #128	@ 0x80
 8003616:	d811      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x232>
 800361c:	2b40      	cmp	r3, #64	@ 0x40
 800361e:	d10d      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8003620:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	4a0e      	ldr	r2, [pc, #56]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003626:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800362a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 800362c:	e00a      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 800362e:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	4a0b      	ldr	r2, [pc, #44]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003638:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 800363a:	e003      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
        break;
 8003640:	e000      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8003642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d110      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 800364a:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800364c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	4902      	ldr	r1, [pc, #8]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003658:	4313      	orrs	r3, r2
 800365a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800365c:	e008      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400
 8003664:	58024800 	.word	0x58024800
 8003668:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800367c:	4b93      	ldr	r3, [pc, #588]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800367e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003680:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	4990      	ldr	r1, [pc, #576]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d026      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d007      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80036a6:	e00d      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80036a8:	4b88      	ldr	r3, [pc, #544]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	4a87      	ldr	r2, [pc, #540]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80036ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 80036b4:	e009      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80036b6:	4b85      	ldr	r3, [pc, #532]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	4a84      	ldr	r2, [pc, #528]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80036bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 80036c2:	e002      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	75fb      	strb	r3, [r7, #23]
        break;
 80036c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 80036d0:	4b7e      	ldr	r3, [pc, #504]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80036d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d4:	f023 0204 	bic.w	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036dc:	497b      	ldr	r1, [pc, #492]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80036e2:	e001      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d02e      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036fc:	d019      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80036fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003702:	d813      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800370c:	d007      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800370e:	e00d      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003710:	4b6e      	ldr	r3, [pc, #440]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	4a6d      	ldr	r2, [pc, #436]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800371a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 800371c:	e00a      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800371e:	4b6b      	ldr	r3, [pc, #428]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	4a6a      	ldr	r2, [pc, #424]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003724:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003728:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
        break;
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8003732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800373a:	4b64      	ldr	r3, [pc, #400]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	4961      	ldr	r1, [pc, #388]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800374c:	e001      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d03f      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003766:	d02a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003768:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800376c:	d824      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800376e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003772:	d024      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003778:	d81e      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800377a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800377e:	d01e      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003780:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003784:	d818      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003786:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800378a:	d00e      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800378c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003790:	d812      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d013      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800379a:	d10d      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800379c:	4b4b      	ldr	r3, [pc, #300]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a0:	4a4a      	ldr	r2, [pc, #296]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80037a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 80037a8:	e00a      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80037aa:	4b48      	ldr	r3, [pc, #288]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	4a47      	ldr	r2, [pc, #284]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80037b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 80037b6:	e003      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	75fb      	strb	r3, [r7, #23]
        break;
 80037bc:	e000      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 80037be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 80037c6:	4b41      	ldr	r3, [pc, #260]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ca:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	493e      	ldr	r1, [pc, #248]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80037d8:	e001      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037da:	7dfb      	ldrb	r3, [r7, #23]
 80037dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037ea:	4b38      	ldr	r3, [pc, #224]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80037ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4935      	ldr	r1, [pc, #212]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 8003808:	4b30      	ldr	r3, [pc, #192]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800380a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	492d      	ldr	r1, [pc, #180]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d020      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00c      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800382e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003832:	d106      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8003834:	4b25      	ldr	r3, [pc, #148]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	4a24      	ldr	r2, [pc, #144]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800383a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800383e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8003840:	e003      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
        break;
 8003846:	e000      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 8003848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8003850:	4b1e      	ldr	r3, [pc, #120]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003854:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	491b      	ldr	r1, [pc, #108]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003862:	e001      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	7dfb      	ldrb	r3, [r7, #23]
 8003866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003870:	2b00      	cmp	r3, #0
 8003872:	d02f      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800387c:	d00e      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800387e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003882:	d812      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d013      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800388c:	d10d      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800388e:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003892:	4a0e      	ldr	r2, [pc, #56]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003898:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800389a:	e00a      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800389c:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	4a0a      	ldr	r2, [pc, #40]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038a8:	e003      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	75fb      	strb	r3, [r7, #23]
        break;
 80038ae:	e000      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 80038b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038b8:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80038ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	4901      	ldr	r1, [pc, #4]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	650b      	str	r3, [r1, #80]	@ 0x50
 80038ca:	e003      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80038cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d02c      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038e8:	d017      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80038ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038ee:	d811      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80038f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f4:	d011      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80038f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038fa:	d80b      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00c      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003904:	d106      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003906:	4b97      	ldr	r3, [pc, #604]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	4a96      	ldr	r2, [pc, #600]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800390c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003910:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 8003912:	e003      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	75fb      	strb	r3, [r7, #23]
        break;
 8003918:	e000      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800391a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 8003922:	4b90      	ldr	r3, [pc, #576]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003926:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392e:	498d      	ldr	r1, [pc, #564]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003930:	4313      	orrs	r3, r2
 8003932:	650b      	str	r3, [r1, #80]	@ 0x50
 8003934:	e001      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02c      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800394e:	d017      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003950:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003954:	d811      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800395a:	d011      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800395c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003960:	d80b      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00c      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800396a:	d106      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800396c:	4b7d      	ldr	r3, [pc, #500]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	4a7c      	ldr	r2, [pc, #496]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003972:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003976:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 8003978:	e003      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
        break;
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8003980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 8003988:	4b76      	ldr	r3, [pc, #472]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800398a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	4973      	ldr	r1, [pc, #460]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003996:	4313      	orrs	r3, r2
 8003998:	650b      	str	r3, [r1, #80]	@ 0x50
 800399a:	e001      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d045      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b4:	d02a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80039b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039ba:	d824      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80039bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039c0:	d026      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80039c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039c6:	d81e      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80039c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039cc:	d022      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80039ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039d2:	d818      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80039d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d8:	d00e      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80039da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039de:	d812      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d019      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e8:	d10d      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80039ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ee:	4a5d      	ldr	r2, [pc, #372]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039f6:	e010      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80039f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	4a59      	ldr	r2, [pc, #356]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80039fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a02:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a04:	e009      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
        break;
 8003a0a:	e006      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003a0c:	bf00      	nop
 8003a0e:	e004      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003a10:	bf00      	nop
 8003a12:	e002      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a20:	4b50      	ldr	r3, [pc, #320]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a24:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2c:	494d      	ldr	r1, [pc, #308]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	650b      	str	r3, [r1, #80]	@ 0x50
 8003a32:	e001      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d045      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003a4c:	d02a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8003a4e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003a52:	d824      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a58:	d026      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x698>
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5e:	d81e      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003a60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a64:	d022      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8003a66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a6a:	d818      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a70:	d00e      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003a72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a76:	d812      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d019      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8003a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a80:	d10d      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003a82:	4b38      	ldr	r3, [pc, #224]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	4a37      	ldr	r2, [pc, #220]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8003a8e:	e010      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003a90:	4b34      	ldr	r3, [pc, #208]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a94:	4a33      	ldr	r2, [pc, #204]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003a96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8003a9c:	e009      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
        break;
 8003aa2:	e006      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8003aa4:	bf00      	nop
 8003aa6:	e004      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8003aa8:	bf00      	nop
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8003aac:	bf00      	nop
 8003aae:	e000      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8003ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac4:	4927      	ldr	r1, [pc, #156]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	658b      	str	r3, [r1, #88]	@ 0x58
 8003aca:	e001      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d047      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003ae4:	d02a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003ae6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003aea:	d824      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003aec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003af0:	d026      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x730>
 8003af2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003af6:	d81e      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003af8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003afc:	d022      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8003afe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b02:	d818      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b08:	d00e      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8003b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b0e:	d812      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d019      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x738>
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b18:	d10d      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003b1a:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	4a11      	ldr	r2, [pc, #68]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8003b26:	e010      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003b28:	4b0e      	ldr	r3, [pc, #56]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003b2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8003b34:	e009      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
        break;
 8003b3a:	e006      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003b3c:	bf00      	nop
 8003b3e:	e004      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003b40:	bf00      	nop
 8003b42:	e002      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 8003b50:	4b04      	ldr	r3, [pc, #16]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	4901      	ldr	r1, [pc, #4]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	658b      	str	r3, [r1, #88]	@ 0x58
 8003b62:	e003      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8003b64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d034      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	2b05      	cmp	r3, #5
 8003b7e:	d81d      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8003b80:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <HAL_RCCEx_PeriphCLKConfig+0x778>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003bc3 	.word	0x08003bc3
 8003b8c:	08003ba1 	.word	0x08003ba1
 8003b90:	08003baf 	.word	0x08003baf
 8003b94:	08003bc3 	.word	0x08003bc3
 8003b98:	08003bc3 	.word	0x08003bc3
 8003b9c:	08003bc3 	.word	0x08003bc3
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003ba0:	4b91      	ldr	r3, [pc, #580]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	4a90      	ldr	r2, [pc, #576]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003baa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003bae:	4b8e      	ldr	r3, [pc, #568]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb2:	4a8d      	ldr	r2, [pc, #564]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
        break;
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 8003bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bca:	4b87      	ldr	r3, [pc, #540]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	4984      	ldr	r1, [pc, #528]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	658b      	str	r3, [r1, #88]	@ 0x58
 8003bdc:	e001      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003bee:	4b7e      	ldr	r3, [pc, #504]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	4a7d      	ldr	r2, [pc, #500]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003bf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d021      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x806>
 8003c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003c14:	e006      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003c16:	4b74      	ldr	r3, [pc, #464]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1a:	4a73      	ldr	r2, [pc, #460]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003c1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c20:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 8003c22:	e003      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
        break;
 8003c28:	e000      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8003c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 8003c32:	4b6d      	ldr	r3, [pc, #436]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c36:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c3e:	496a      	ldr	r1, [pc, #424]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003c44:	e001      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d043      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c5e:	d02c      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8003c60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c64:	d826      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003c66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c6a:	d028      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8003c6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c70:	d820      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003c72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c76:	d016      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8003c78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c7c:	d81a      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c86:	d007      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003c88:	e014      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003c8a:	4b57      	ldr	r3, [pc, #348]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	4a56      	ldr	r2, [pc, #344]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c96:	e013      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003c98:	4b53      	ldr	r3, [pc, #332]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	4a52      	ldr	r2, [pc, #328]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ca4:	e00c      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003ca6:	4b50      	ldr	r3, [pc, #320]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	4a4f      	ldr	r2, [pc, #316]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003cac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
        break;
 8003cb8:	e002      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8003cba:	bf00      	nop
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8003cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc6:	4b48      	ldr	r3, [pc, #288]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cca:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd2:	4945      	ldr	r1, [pc, #276]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	654b      	str	r3, [r1, #84]	@ 0x54
 8003cd8:	e001      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d04b      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cee:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003cf2:	d032      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003cf4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003cf8:	d82c      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003cfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cfe:	d02e      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003d00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d04:	d826      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003d06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d0a:	d02a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003d0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d10:	d820      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003d12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d16:	d016      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x936>
 8003d18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d1c:	d81a      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8003d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d26:	d007      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x928>
 8003d28:	e014      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d34:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d36:	e015      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003d38:	4b2b      	ldr	r3, [pc, #172]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d42:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d44:	e00e      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003d46:	4b28      	ldr	r3, [pc, #160]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	4a27      	ldr	r2, [pc, #156]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003d4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d52:	e007      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	75fb      	strb	r3, [r7, #23]
        break;
 8003d58:	e004      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003d5a:	bf00      	nop
 8003d5c:	e002      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6e:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d76:	491c      	ldr	r1, [pc, #112]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	654b      	str	r3, [r1, #84]	@ 0x54
 8003d7c:	e001      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d03e      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d96:	d029      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8003d98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d9c:	d820      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003d9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003da2:	d016      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003da4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003da8:	d81a      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8003dae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003db2:	d007      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8003db4:	e014      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003db6:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dba:	4a0b      	ldr	r2, [pc, #44]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dc2:	e014      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003dc4:	4b08      	ldr	r3, [pc, #32]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	4a07      	ldr	r2, [pc, #28]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003dca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dce:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dd0:	e00d      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003dd2:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	4a04      	ldr	r2, [pc, #16]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003dd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dde:	e006      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
        break;
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003de6:	bf00      	nop
 8003de8:	58024400 	.word	0x58024400
        break;
 8003dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003df4:	4b8e      	ldr	r3, [pc, #568]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e00:	498b      	ldr	r1, [pc, #556]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	650b      	str	r3, [r1, #80]	@ 0x50
 8003e06:	e001      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d043      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e20:	d02c      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e26:	d826      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e2c:	d028      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e32:	d820      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e38:	d016      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e3e:	d81a      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8003e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e48:	d007      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 8003e4a:	e014      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003e4c:	4b78      	ldr	r3, [pc, #480]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	4a77      	ldr	r2, [pc, #476]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e56:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e58:	e013      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003e5a:	4b75      	ldr	r3, [pc, #468]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5e:	4a74      	ldr	r2, [pc, #464]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e64:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e66:	e00c      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003e68:	4b71      	ldr	r3, [pc, #452]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	4a70      	ldr	r2, [pc, #448]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e72:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003e74:	e005      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
        break;
 8003e7a:	e002      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8003e88:	4b69      	ldr	r3, [pc, #420]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e94:	4966      	ldr	r1, [pc, #408]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	654b      	str	r3, [r1, #84]	@ 0x54
 8003e9a:	e001      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d03c      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	2b40      	cmp	r3, #64	@ 0x40
 8003eb2:	d026      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8003eb4:	2b40      	cmp	r3, #64	@ 0x40
 8003eb6:	d821      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003eb8:	2b30      	cmp	r3, #48	@ 0x30
 8003eba:	d024      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003ebc:	2b30      	cmp	r3, #48	@ 0x30
 8003ebe:	d81d      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d014      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d819      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	d007      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8003ed0:	e014      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003ed2:	4b57      	ldr	r3, [pc, #348]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	4a56      	ldr	r2, [pc, #344]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003edc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003ede:	e013      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003ee0:	4b53      	ldr	r3, [pc, #332]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	4a52      	ldr	r2, [pc, #328]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003eec:	e00c      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003eee:	4b50      	ldr	r3, [pc, #320]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef2:	4a4f      	ldr	r2, [pc, #316]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ef4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003efa:	e005      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
        break;
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 8003f0e:	4b48      	ldr	r3, [pc, #288]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1a:	4945      	ldr	r1, [pc, #276]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	650b      	str	r3, [r1, #80]	@ 0x50
 8003f20:	e001      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d03c      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f36:	2b50      	cmp	r3, #80	@ 0x50
 8003f38:	d022      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003f3a:	2b50      	cmp	r3, #80	@ 0x50
 8003f3c:	d81d      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003f3e:	2b40      	cmp	r3, #64	@ 0x40
 8003f40:	d020      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003f42:	2b40      	cmp	r3, #64	@ 0x40
 8003f44:	d819      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003f46:	2b30      	cmp	r3, #48	@ 0x30
 8003f48:	d01e      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003f4a:	2b30      	cmp	r3, #48	@ 0x30
 8003f4c:	d815      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d00c      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d811      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d018      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d10d      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003f5e:	4b34      	ldr	r3, [pc, #208]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	4a33      	ldr	r2, [pc, #204]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f68:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8003f6a:	e010      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003f6c:	4b30      	ldr	r3, [pc, #192]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f70:	4a2f      	ldr	r2, [pc, #188]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8003f78:	e009      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
        break;
 8003f7e:	e006      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f80:	bf00      	nop
 8003f82:	e004      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f84:	bf00      	nop
 8003f86:	e002      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f8e:	7dfb      	ldrb	r3, [r7, #23]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f94:	4b26      	ldr	r3, [pc, #152]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa0:	4923      	ldr	r1, [pc, #140]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	654b      	str	r3, [r1, #84]	@ 0x54
 8003fa6:	e001      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d03f      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fbc:	2b50      	cmp	r3, #80	@ 0x50
 8003fbe:	d022      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003fc0:	2b50      	cmp	r3, #80	@ 0x50
 8003fc2:	d81d      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003fc4:	2b40      	cmp	r3, #64	@ 0x40
 8003fc6:	d020      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003fc8:	2b40      	cmp	r3, #64	@ 0x40
 8003fca:	d819      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003fcc:	2b30      	cmp	r3, #48	@ 0x30
 8003fce:	d01e      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003fd0:	2b30      	cmp	r3, #48	@ 0x30
 8003fd2:	d815      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d00c      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d811      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d018      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d10d      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003fe4:	4b12      	ldr	r3, [pc, #72]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	4a11      	ldr	r2, [pc, #68]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fee:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ff0:	e010      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ffe:	e009      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
        break;
 8004004:	e006      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8004006:	bf00      	nop
 8004008:	e004      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 800400a:	bf00      	nop
 800400c:	e002      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8004012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004014:	7dfb      	ldrb	r3, [r7, #23]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10c      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800401a:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004026:	4902      	ldr	r1, [pc, #8]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004028:	4313      	orrs	r3, r2
 800402a:	658b      	str	r3, [r1, #88]	@ 0x58
 800402c:	e004      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800402e:	bf00      	nop
 8004030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d034      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004048:	2b05      	cmp	r3, #5
 800404a:	d81d      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800404c:	a201      	add	r2, pc, #4	@ (adr r2, 8004054 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	0800408f 	.word	0x0800408f
 8004058:	0800406d 	.word	0x0800406d
 800405c:	0800407b 	.word	0x0800407b
 8004060:	0800408f 	.word	0x0800408f
 8004064:	0800408f 	.word	0x0800408f
 8004068:	0800408f 	.word	0x0800408f
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 800406c:	4b69      	ldr	r3, [pc, #420]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	4a68      	ldr	r2, [pc, #416]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8004078:	e00a      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800407a:	4b66      	ldr	r3, [pc, #408]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	4a65      	ldr	r2, [pc, #404]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004084:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8004086:	e003      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	75fb      	strb	r3, [r7, #23]
        break;
 800408c:	e000      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 800408e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004096:	4b5f      	ldr	r3, [pc, #380]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8004098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409a:	f023 0207 	bic.w	r2, r3, #7
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a2:	495c      	ldr	r1, [pc, #368]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	654b      	str	r3, [r1, #84]	@ 0x54
 80040a8:	e001      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d033      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d81c      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80040c2:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	08004103 	.word	0x08004103
 80040cc:	080040e1 	.word	0x080040e1
 80040d0:	080040ef 	.word	0x080040ef
 80040d4:	08004103 	.word	0x08004103
 80040d8:	08004103 	.word	0x08004103
 80040dc:	08004103 	.word	0x08004103
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80040e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 80040ec:	e00a      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80040ee:	4b49      	ldr	r3, [pc, #292]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	4a48      	ldr	r2, [pc, #288]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 80040fa:	e003      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
        break;
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 8004102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800410a:	4b42      	ldr	r3, [pc, #264]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800410c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004116:	493f      	ldr	r1, [pc, #252]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8004118:	4313      	orrs	r3, r2
 800411a:	650b      	str	r3, [r1, #80]	@ 0x50
 800411c:	e001      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d027      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004136:	d008      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800413c:	d80c      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004148:	e006      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 800414a:	4b32      	ldr	r3, [pc, #200]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414e:	4a31      	ldr	r2, [pc, #196]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004154:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 8004156:	e003      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
        break;
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800415e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004160:	7dfb      	ldrb	r3, [r7, #23]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 8004166:	4b2b      	ldr	r3, [pc, #172]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8004168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004172:	4928      	ldr	r1, [pc, #160]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8004174:	4313      	orrs	r3, r2
 8004176:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8004178:	e001      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417a:	7dfb      	ldrb	r3, [r7, #23]
 800417c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	da2c      	bge.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800418a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800418e:	d017      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8004190:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004194:	d811      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8004196:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800419a:	d011      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 800419c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a0:	d80b      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00c      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80041a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041aa:	d106      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80041ac:	4b19      	ldr	r3, [pc, #100]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	4a18      	ldr	r2, [pc, #96]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 80041b8:	e003      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
        break;
 80041be:	e000      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 80041c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 80041c8:	4b12      	ldr	r3, [pc, #72]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80041ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041d4:	490f      	ldr	r1, [pc, #60]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80041da:	e001      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 80041ec:	4b09      	ldr	r3, [pc, #36]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041fa:	4906      	ldr	r1, [pc, #24]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 8004200:	7dbb      	ldrb	r3, [r7, #22]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	58024400 	.word	0x58024400

08004218 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_USART234578 : USART2/3/5/7/8 peripheral clock
  *            @arg RCC_PERIPHCLK_USBOTGFS    : USBOTGFS peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0; /* Set to 0 for returned value if no source clock */
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
  uint32_t clocksource;
  uint32_t ethclocksource;
  uint32_t prescaler;

  switch (PeriphClk)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800422a:	f001 82db 	beq.w	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15cc>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004234:	f201 8326 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423e:	f001 8298 	beq.w	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x155a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004248:	f201 831c 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004252:	f001 822a 	beq.w	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800425c:	f201 8312 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004266:	f001 81bb 	beq.w	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004270:	f201 8308 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800427a:	f001 8139 	beq.w	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004284:	f201 82fe 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800428e:	f001 80bf 	beq.w	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004298:	f201 82f4 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042a2:	f001 8069 	beq.w	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042ac:	f201 82ea 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042b6:	f001 8007 	beq.w	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042c0:	f201 82e0 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ca:	f000 87a2 	beq.w	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0xffa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042d4:	f201 82d6 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042de:	f000 877a 	beq.w	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042e8:	f201 82cc 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042f2:	f000 8713 	beq.w	800511c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042fc:	f201 82c2 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004306:	f000 86ad 	beq.w	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004310:	f201 82b8 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800431a:	f000 8644 	beq.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004324:	f201 82ae 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800432e:	f000 861c 	beq.w	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004338:	f201 82a4 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004342:	f000 8606 	beq.w	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800434c:	f201 829a 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004356:	f000 8592 	beq.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004360:	f201 8290 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800436a:	f000 8519 	beq.w	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004374:	f201 8286 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437e:	f000 84a3 	beq.w	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004388:	f201 827c 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004392:	f000 842d 	beq.w	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439c:	f201 8272 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a6:	f000 83c5 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b0:	f201 8268 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ba:	f000 8365 	beq.w	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c4:	f201 825e 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ce:	f000 831d 	beq.w	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d8:	f201 8254 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e2:	f000 82ed 	beq.w	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ec:	f201 824a 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b80      	cmp	r3, #128	@ 0x80
 80043f4:	f000 8291 	beq.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b80      	cmp	r3, #128	@ 0x80
 80043fc:	f201 8242 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b20      	cmp	r3, #32
 8004404:	d84c      	bhi.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f001 823b 	beq.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3b01      	subs	r3, #1
 8004412:	2b1f      	cmp	r3, #31
 8004414:	f201 8236 	bhi.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004418:	a201      	add	r2, pc, #4	@ (adr r2, 8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	080044ad 	.word	0x080044ad
 8004424:	0800457b 	.word	0x0800457b
 8004428:	08005885 	.word	0x08005885
 800442c:	0800460b 	.word	0x0800460b
 8004430:	08005885 	.word	0x08005885
 8004434:	08005885 	.word	0x08005885
 8004438:	08005885 	.word	0x08005885
 800443c:	080046a3 	.word	0x080046a3
 8004440:	08005885 	.word	0x08005885
 8004444:	08005885 	.word	0x08005885
 8004448:	08005885 	.word	0x08005885
 800444c:	08005885 	.word	0x08005885
 8004450:	08005885 	.word	0x08005885
 8004454:	08005885 	.word	0x08005885
 8004458:	08005885 	.word	0x08005885
 800445c:	08004745 	.word	0x08004745
 8004460:	08005885 	.word	0x08005885
 8004464:	08005885 	.word	0x08005885
 8004468:	08005885 	.word	0x08005885
 800446c:	08005885 	.word	0x08005885
 8004470:	08005885 	.word	0x08005885
 8004474:	08005885 	.word	0x08005885
 8004478:	08005885 	.word	0x08005885
 800447c:	08005885 	.word	0x08005885
 8004480:	08005885 	.word	0x08005885
 8004484:	08005885 	.word	0x08005885
 8004488:	08005885 	.word	0x08005885
 800448c:	08005885 	.word	0x08005885
 8004490:	08005885 	.word	0x08005885
 8004494:	08005885 	.word	0x08005885
 8004498:	08005885 	.word	0x08005885
 800449c:	080047b1 	.word	0x080047b1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	f000 81fb 	beq.w	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      }
      break;

    default:
      /* Nothing to do, frequency is by default set to 0 */
      break;
 80044a8:	f001 b9ec 	b.w	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
      clocksource = __HAL_RCC_GET_FMC_SOURCE();
 80044ac:	4ba1      	ldr	r3, [pc, #644]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80044ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80044b2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80044b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80044ba:	d004      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80044bc:	4b9d      	ldr	r3, [pc, #628]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80044be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	e001      	b.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 80044c6:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80044ca:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d80e      	bhi.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d844      	bhi.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80044d8:	a201      	add	r2, pc, #4	@ (adr r2, 80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	080044fb 	.word	0x080044fb
 80044e4:	08004503 	.word	0x08004503
 80044e8:	08004517 	.word	0x08004517
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80044f6:	d02e      	beq.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          break;
 80044f8:	e033      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          frequency = HAL_RCC_GetHCLKFreq();
 80044fa:	f7fe fb47 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 80044fe:	6178      	str	r0, [r7, #20]
          break;
 8004500:	e039      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004502:	4b8c      	ldr	r3, [pc, #560]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02c      	beq.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPLL1QFreq();
 800450e:	f7fe fbb9 	bl	8002c84 <HAL_RCC_GetPLL1QFreq>
 8004512:	6178      	str	r0, [r7, #20]
          break;
 8004514:	e028      	b.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004516:	4b87      	ldr	r3, [pc, #540]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d025      	beq.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
            frequency = HAL_RCC_GetPLL2RFreq();
 8004522:	f7fe fbf1 	bl	8002d08 <HAL_RCC_GetPLL2RFreq>
 8004526:	6178      	str	r0, [r7, #20]
          break;
 8004528:	e021      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800452a:	4b82      	ldr	r3, [pc, #520]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01e      	beq.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004536:	4b7f      	ldr	r3, [pc, #508]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d018      	beq.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004542:	4b7c      	ldr	r3, [pc, #496]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	08db      	lsrs	r3, r3, #3
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	4a7a      	ldr	r2, [pc, #488]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	617b      	str	r3, [r7, #20]
          break;
 8004554:	e00e      	b.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 8004556:	f7fe fb19 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 800455a:	4603      	mov	r3, r0
 800455c:	089b      	lsrs	r3, r3, #2
 800455e:	617b      	str	r3, [r7, #20]
          break;
 8004560:	e009      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 8004562:	bf00      	nop
 8004564:	f001 b993 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004568:	bf00      	nop
 800456a:	f001 b990 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800456e:	bf00      	nop
 8004570:	f001 b98d 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004574:	bf00      	nop
      break;
 8004576:	f001 b98a 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_XSPI1_SOURCE();
 800457a:	4b6e      	ldr	r3, [pc, #440]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800457c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004580:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d004      	beq.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8004588:	4b6a      	ldr	r3, [pc, #424]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800458a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004590:	e000      	b.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004592:	2340      	movs	r3, #64	@ 0x40
 8004594:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b40      	cmp	r3, #64	@ 0x40
 800459a:	d027      	beq.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b40      	cmp	r3, #64	@ 0x40
 80045a0:	d82a      	bhi.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d017      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d824      	bhi.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d004      	beq.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
          break;
 80045ba:	e01d      	b.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          frequency = HAL_RCC_GetHCLKFreq();
 80045bc:	f7fe fae6 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 80045c0:	6178      	str	r0, [r7, #20]
          break;
 80045c2:	e020      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 80045c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d016      	beq.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = HAL_RCC_GetPLL2SFreq();
 80045d0:	f7fe fbb0 	bl	8002d34 <HAL_RCC_GetPLL2SFreq>
 80045d4:	6178      	str	r0, [r7, #20]
          break;
 80045d6:	e012      	b.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 80045d8:	4b56      	ldr	r3, [pc, #344]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00f      	beq.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
            frequency = HAL_RCC_GetPLL2TFreq();
 80045e4:	f7fe fbbc 	bl	8002d60 <HAL_RCC_GetPLL2TFreq>
 80045e8:	6178      	str	r0, [r7, #20]
          break;
 80045ea:	e00b      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 80045ec:	f7fe face 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 80045f0:	4603      	mov	r3, r0
 80045f2:	089b      	lsrs	r3, r3, #2
 80045f4:	617b      	str	r3, [r7, #20]
          break;
 80045f6:	e006      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          break;
 80045f8:	bf00      	nop
 80045fa:	f001 b948 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045fe:	bf00      	nop
 8004600:	f001 b945 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004604:	bf00      	nop
      break;
 8004606:	f001 b942 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_XSPI2_SOURCE();
 800460a:	4b4a      	ldr	r3, [pc, #296]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800460c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004610:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004618:	d004      	beq.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
 800461a:	4b46      	ldr	r3, [pc, #280]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800461c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004622:	e001      	b.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004628:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004630:	d028      	beq.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004638:	d82a      	bhi.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b80      	cmp	r3, #128	@ 0x80
 800463e:	d017      	beq.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b80      	cmp	r3, #128	@ 0x80
 8004644:	d824      	bhi.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b40      	cmp	r3, #64	@ 0x40
 8004650:	d004      	beq.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x444>
          break;
 8004652:	e01d      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HAL_RCC_GetHCLKFreq();
 8004654:	f7fe fa9a 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8004658:	6178      	str	r0, [r7, #20]
          break;
 800465a:	e020      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 800465c:	4b35      	ldr	r3, [pc, #212]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d016      	beq.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HAL_RCC_GetPLL2SFreq();
 8004668:	f7fe fb64 	bl	8002d34 <HAL_RCC_GetPLL2SFreq>
 800466c:	6178      	str	r0, [r7, #20]
          break;
 800466e:	e012      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 8004670:	4b30      	ldr	r3, [pc, #192]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00f      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
            frequency = HAL_RCC_GetPLL2TFreq();
 800467c:	f7fe fb70 	bl	8002d60 <HAL_RCC_GetPLL2TFreq>
 8004680:	6178      	str	r0, [r7, #20]
          break;
 8004682:	e00b      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 8004684:	f7fe fa82 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8004688:	4603      	mov	r3, r0
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	617b      	str	r3, [r7, #20]
          break;
 800468e:	e006      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          break;
 8004690:	bf00      	nop
 8004692:	f001 b8fc 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004696:	bf00      	nop
 8004698:	f001 b8f9 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800469c:	bf00      	nop
      break;
 800469e:	f001 b8f6 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80046a2:	4b24      	ldr	r3, [pc, #144]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046aa:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046b2:	d02a      	beq.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046ba:	d82f      	bhi.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046c8:	d016      	beq.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 80046ca:	e027      	b.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046cc:	4b19      	ldr	r3, [pc, #100]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d024      	beq.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80046d8:	4b16      	ldr	r3, [pc, #88]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01e      	beq.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046e4:	4b13      	ldr	r3, [pc, #76]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	08db      	lsrs	r3, r3, #3
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	4a12      	ldr	r2, [pc, #72]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]
          break;
 80046f6:	e014      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80046f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d011      	beq.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
            frequency = CSI_VALUE;
 8004704:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004706:	617b      	str	r3, [r7, #20]
          break;
 8004708:	e00e      	b.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800470a:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            frequency = HSE_VALUE;
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004718:	617b      	str	r3, [r7, #20]
          break;
 800471a:	e008      	b.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          break;
 800471c:	bf00      	nop
 800471e:	f001 b8b6 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004722:	bf00      	nop
 8004724:	f001 b8b3 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004728:	bf00      	nop
 800472a:	f001 b8b0 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800472e:	bf00      	nop
      break;
 8004730:	f001 b8ad 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004734:	58024400 	.word	0x58024400
 8004738:	03d09000 	.word	0x03d09000
 800473c:	003d0900 	.word	0x003d0900
 8004740:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_ADC_SOURCE();
 8004744:	4b9a      	ldr	r3, [pc, #616]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004748:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800474c:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004754:	d01f      	beq.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800475c:	d81f      	bhi.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
          break;
 800476c:	e017      	b.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800476e:	4b90      	ldr	r3, [pc, #576]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d014      	beq.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
            frequency = HAL_RCC_GetPLL2PFreq();
 800477a:	f7fe fa99 	bl	8002cb0 <HAL_RCC_GetPLL2PFreq>
 800477e:	6178      	str	r0, [r7, #20]
          break;
 8004780:	e010      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004782:	4b8b      	ldr	r3, [pc, #556]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00d      	beq.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HAL_RCC_GetPLL3RFreq();
 800478e:	f7fe fb2b 	bl	8002de8 <HAL_RCC_GetPLL3RFreq>
 8004792:	6178      	str	r0, [r7, #20]
          break;
 8004794:	e009      	b.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = RCC_GetCLKPFreq();
 8004796:	f001 f893 	bl	80058c0 <RCC_GetCLKPFreq>
 800479a:	6178      	str	r0, [r7, #20]
          break;
 800479c:	e006      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>
          break;
 800479e:	bf00      	nop
 80047a0:	f001 b875 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80047a4:	bf00      	nop
 80047a6:	f001 b872 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80047aa:	bf00      	nop
      break;
 80047ac:	f001 b86f 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_ADF1_SOURCE();
 80047b0:	4b7f      	ldr	r3, [pc, #508]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80047b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b4:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 80047b8:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80047c0:	d048      	beq.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80047c8:	d85a      	bhi.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047d0:	d037      	beq.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047d8:	d852      	bhi.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047e0:	d02b      	beq.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047e8:	d84a      	bhi.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f0:	d019      	beq.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f8:	d842      	bhi.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004806:	d004      	beq.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
          break;
 8004808:	e03a      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = HAL_RCC_GetHCLKFreq();
 800480a:	f7fe f9bf 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 800480e:	6178      	str	r0, [r7, #20]
          break;
 8004810:	e043      	b.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004812:	4b67      	ldr	r3, [pc, #412]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d033      	beq.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            frequency = HAL_RCC_GetPLL2PFreq();
 800481e:	f7fe fa47 	bl	8002cb0 <HAL_RCC_GetPLL2PFreq>
 8004822:	6178      	str	r0, [r7, #20]
          break;
 8004824:	e02f      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004826:	4b62      	ldr	r3, [pc, #392]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d02c      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HAL_RCC_GetPLL3PFreq();
 8004832:	f7fe faad 	bl	8002d90 <HAL_RCC_GetPLL3PFreq>
 8004836:	6178      	str	r0, [r7, #20]
          break;
 8004838:	e028      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = EXTERNAL_CLOCK_VALUE;
 800483a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800483e:	617b      	str	r3, [r7, #20]
          break;
 8004840:	e02b      	b.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004842:	4b5b      	ldr	r3, [pc, #364]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484a:	2b00      	cmp	r3, #0
 800484c:	d021      	beq.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
            frequency = CSI_VALUE;
 800484e:	4b59      	ldr	r3, [pc, #356]	@ (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004850:	617b      	str	r3, [r7, #20]
          break;
 8004852:	e01e      	b.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004854:	4b56      	ldr	r3, [pc, #344]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01b      	beq.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004860:	4b53      	ldr	r3, [pc, #332]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d015      	beq.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800486c:	4b50      	ldr	r3, [pc, #320]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	4a50      	ldr	r2, [pc, #320]	@ (80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
          break;
 800487e:	e00b      	b.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
          break;
 8004880:	bf00      	nop
 8004882:	f001 b804 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004886:	bf00      	nop
 8004888:	f001 b801 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800488c:	bf00      	nop
 800488e:	f000 bffe 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004892:	bf00      	nop
 8004894:	f000 bffb 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004898:	bf00      	nop
      break;
 800489a:	f000 bff8 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_CEC_SOURCE();
 800489e:	4b44      	ldr	r3, [pc, #272]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80048a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048a6:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ae:	d01f      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048b6:	d824      	bhi.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
          break;
 80048c6:	e01c      	b.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c8:	4b39      	ldr	r3, [pc, #228]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d019      	beq.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
            frequency = LSE_VALUE;
 80048d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d8:	617b      	str	r3, [r7, #20]
          break;
 80048da:	e015      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048dc:	4b34      	ldr	r3, [pc, #208]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80048de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d012      	beq.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
            frequency = LSI_VALUE;
 80048e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80048ec:	617b      	str	r3, [r7, #20]
          break;
 80048ee:	e00e      	b.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80048f0:	4b2f      	ldr	r3, [pc, #188]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
            frequency = CSI_VALUE;
 80048fc:	4b2d      	ldr	r3, [pc, #180]	@ (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80048fe:	617b      	str	r3, [r7, #20]
          break;
 8004900:	e008      	b.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          break;
 8004902:	bf00      	nop
 8004904:	f000 bfc3 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004908:	bf00      	nop
 800490a:	f000 bfc0 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800490e:	bf00      	nop
 8004910:	f000 bfbd 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004914:	bf00      	nop
      break;
 8004916:	f000 bfba 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_ETH1REF_SOURCE();
 800491a:	4b25      	ldr	r3, [pc, #148]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800491c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004922:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800492a:	d014      	beq.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004932:	d834      	bhi.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d034      	beq.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004940:	d000      	beq.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8004942:	e02c      	b.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004944:	4b1a      	ldr	r3, [pc, #104]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02c      	beq.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            frequency = HSE_VALUE;
 8004950:	4b1a      	ldr	r3, [pc, #104]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004952:	617b      	str	r3, [r7, #20]
          break;
 8004954:	e029      	b.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          ethclocksource = __HAL_RCC_GET_ETH1PHY_SOURCE();
 8004956:	4b16      	ldr	r3, [pc, #88]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800495e:	60bb      	str	r3, [r7, #8]
          switch (ethclocksource)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800496c:	d009      	beq.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
              break;
 800496e:	e015      	b.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
              if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004970:	4b0f      	ldr	r3, [pc, #60]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00c      	beq.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
                frequency = HSE_VALUE;
 800497c:	4b0f      	ldr	r3, [pc, #60]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800497e:	617b      	str	r3, [r7, #20]
              break;
 8004980:	e009      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
              if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8004982:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004986:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
                frequency = HAL_RCC_GetPLL3SFreq();
 800498e:	f7fe fa41 	bl	8002e14 <HAL_RCC_GetPLL3SFreq>
 8004992:	6178      	str	r0, [r7, #20]
              break;
 8004994:	e001      	b.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
              break;
 8004996:	bf00      	nop
 8004998:	e008      	b.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
              break;
 800499a:	bf00      	nop
          break;
 800499c:	e006      	b.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
          break;
 800499e:	bf00      	nop
 80049a0:	f000 bf75 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049a4:	bf00      	nop
 80049a6:	f000 bf72 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049aa:	bf00      	nop
      break;
 80049ac:	f000 bf6f 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 80049b0:	58024400 	.word	0x58024400
 80049b4:	003d0900 	.word	0x003d0900
 80049b8:	03d09000 	.word	0x03d09000
 80049bc:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_ETH1PHY_SOURCE();
 80049c0:	4b87      	ldr	r3, [pc, #540]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80049c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049c8:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049d6:	d009      	beq.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          break;
 80049d8:	e016      	b.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049da:	4b81      	ldr	r3, [pc, #516]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            frequency = HSE_VALUE;
 80049e6:	4b7f      	ldr	r3, [pc, #508]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>)
 80049e8:	617b      	str	r3, [r7, #20]
          break;
 80049ea:	e009      	b.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 80049ec:	4b7c      	ldr	r3, [pc, #496]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80049ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d006      	beq.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = HAL_RCC_GetPLL3SFreq();
 80049f8:	f7fe fa0c 	bl	8002e14 <HAL_RCC_GetPLL3SFreq>
 80049fc:	6178      	str	r0, [r7, #20]
          break;
 80049fe:	e002      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004a00:	bf00      	nop
 8004a02:	f000 bf44 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004a06:	bf00      	nop
      break;
 8004a08:	f000 bf41 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_FDCAN_SOURCE();
 8004a0c:	4b74      	ldr	r3, [pc, #464]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a10:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004a14:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a1c:	d01e      	beq.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a24:	d824      	bhi.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a32:	d009      	beq.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
          break;
 8004a34:	e01c      	b.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a36:	4b6a      	ldr	r3, [pc, #424]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d019      	beq.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = HSE_VALUE;
 8004a42:	4b68      	ldr	r3, [pc, #416]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>)
 8004a44:	617b      	str	r3, [r7, #20]
          break;
 8004a46:	e016      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004a48:	4b65      	ldr	r3, [pc, #404]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004a54:	f7fe f916 	bl	8002c84 <HAL_RCC_GetPLL1QFreq>
 8004a58:	6178      	str	r0, [r7, #20]
          break;
 8004a5a:	e00f      	b.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004a5c:	4b60      	ldr	r3, [pc, #384]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004a68:	f7fe f922 	bl	8002cb0 <HAL_RCC_GetPLL2PFreq>
 8004a6c:	6178      	str	r0, [r7, #20]
          break;
 8004a6e:	e008      	b.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          break;
 8004a70:	bf00      	nop
 8004a72:	f000 bf0c 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004a76:	bf00      	nop
 8004a78:	f000 bf09 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004a7c:	bf00      	nop
 8004a7e:	f000 bf06 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004a82:	bf00      	nop
      break;
 8004a84:	f000 bf03 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_I2C23_SOURCE();
 8004a88:	4b55      	ldr	r3, [pc, #340]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a90:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a98:	d037      	beq.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aa0:	d83c      	bhi.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aa8:	d019      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab0:	d834      	bhi.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d004      	beq.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004abe:	d004      	beq.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 8004ac0:	e02c      	b.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ac2:	f7fe f88b 	bl	8002bdc <HAL_RCC_GetPCLK1Freq>
 8004ac6:	6178      	str	r0, [r7, #20]
          break;
 8004ac8:	e032      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004aca:	4b45      	ldr	r3, [pc, #276]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d025      	beq.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004ad6:	f7fe f987 	bl	8002de8 <HAL_RCC_GetPLL3RFreq>
 8004ada:	6178      	str	r0, [r7, #20]
          break;
 8004adc:	e021      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ade:	4b40      	ldr	r3, [pc, #256]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01e      	beq.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004aea:	4b3d      	ldr	r3, [pc, #244]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d018      	beq.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004af6:	4b3a      	ldr	r3, [pc, #232]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	08db      	lsrs	r3, r3, #3
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	4a39      	ldr	r2, [pc, #228]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>)
 8004b02:	fa22 f303 	lsr.w	r3, r2, r3
 8004b06:	617b      	str	r3, [r7, #20]
          break;
 8004b08:	e00e      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004b0a:	4b35      	ldr	r3, [pc, #212]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x916>
            frequency = CSI_VALUE;
 8004b16:	4b35      	ldr	r3, [pc, #212]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>)
 8004b18:	617b      	str	r3, [r7, #20]
          break;
 8004b1a:	e008      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 8004b1c:	bf00      	nop
 8004b1e:	f000 beb6 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b22:	bf00      	nop
 8004b24:	f000 beb3 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b28:	bf00      	nop
 8004b2a:	f000 beb0 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004b2e:	bf00      	nop
      break;
 8004b30:	f000 bead 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_I2C1_I3C1_SOURCE();
 8004b34:	4b2a      	ldr	r3, [pc, #168]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b38:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b3c:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b44:	d037      	beq.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b4c:	d83c      	bhi.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b54:	d019      	beq.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b5c:	d834      	bhi.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b6a:	d004      	beq.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          break;
 8004b6c:	e02c      	b.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b6e:	f7fe f835 	bl	8002bdc <HAL_RCC_GetPCLK1Freq>
 8004b72:	6178      	str	r0, [r7, #20]
          break;
 8004b74:	e032      	b.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004b76:	4b1a      	ldr	r3, [pc, #104]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d025      	beq.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004b82:	f7fe f931 	bl	8002de8 <HAL_RCC_GetPLL3RFreq>
 8004b86:	6178      	str	r0, [r7, #20]
          break;
 8004b88:	e021      	b.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b8a:	4b15      	ldr	r3, [pc, #84]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01e      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004b96:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	08db      	lsrs	r3, r3, #3
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	4a0e      	ldr	r2, [pc, #56]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>)
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	617b      	str	r3, [r7, #20]
          break;
 8004bb4:	e00e      	b.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
            frequency = CSI_VALUE;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>)
 8004bc4:	617b      	str	r3, [r7, #20]
          break;
 8004bc6:	e008      	b.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
          break;
 8004bc8:	bf00      	nop
 8004bca:	f000 be60 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bce:	bf00      	nop
 8004bd0:	f000 be5d 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bd4:	bf00      	nop
 8004bd6:	f000 be5a 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bda:	bf00      	nop
      break;
 8004bdc:	f000 be57 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004be0:	58024400 	.word	0x58024400
 8004be4:	016e3600 	.word	0x016e3600
 8004be8:	03d09000 	.word	0x03d09000
 8004bec:	003d0900 	.word	0x003d0900
      clocksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004bf0:	4ba0      	ldr	r3, [pc, #640]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004bf8:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c00:	d04f      	beq.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c08:	d84f      	bhi.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c10:	d03d      	beq.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c18:	d847      	bhi.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c20:	d02b      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c28:	d83f      	bhi.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c30:	d019      	beq.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c38:	d837      	bhi.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c46:	d004      	beq.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
          break;
 8004c48:	e02f      	b.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c4a:	f7fd ffc7 	bl	8002bdc <HAL_RCC_GetPCLK1Freq>
 8004c4e:	6178      	str	r0, [r7, #20]
          break;
 8004c50:	e038      	b.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004c52:	4b88      	ldr	r3, [pc, #544]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d028      	beq.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004c5e:	f7fe f827 	bl	8002cb0 <HAL_RCC_GetPLL2PFreq>
 8004c62:	6178      	str	r0, [r7, #20]
          break;
 8004c64:	e024      	b.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004c66:	4b83      	ldr	r3, [pc, #524]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d021      	beq.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004c72:	f7fe f8b9 	bl	8002de8 <HAL_RCC_GetPLL3RFreq>
 8004c76:	6178      	str	r0, [r7, #20]
          break;
 8004c78:	e01d      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c7a:	4b7e      	ldr	r3, [pc, #504]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01a      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = LSE_VALUE;
 8004c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c8a:	617b      	str	r3, [r7, #20]
          break;
 8004c8c:	e016      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c8e:	4b79      	ldr	r3, [pc, #484]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d013      	beq.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = LSI_VALUE;
 8004c9a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c9e:	617b      	str	r3, [r7, #20]
          break;
 8004ca0:	e00f      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          frequency = RCC_GetCLKPFreq();
 8004ca2:	f000 fe0d 	bl	80058c0 <RCC_GetCLKPFreq>
 8004ca6:	6178      	str	r0, [r7, #20]
          break;
 8004ca8:	e00c      	b.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          break;
 8004caa:	bf00      	nop
 8004cac:	f000 bdef 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004cb0:	bf00      	nop
 8004cb2:	f000 bdec 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004cb6:	bf00      	nop
 8004cb8:	f000 bde9 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004cbc:	bf00      	nop
 8004cbe:	f000 bde6 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004cc2:	bf00      	nop
      break;
 8004cc4:	f000 bde3 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPTIM23_SOURCE();
 8004cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cd0:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004cd8:	d04f      	beq.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004ce0:	d84f      	bhi.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce8:	d03d      	beq.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf0:	d847      	bhi.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf8:	d02b      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d00:	d83f      	bhi.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d08:	d019      	beq.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d10:	d837      	bhi.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d1e:	d004      	beq.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          break;
 8004d20:	e02f      	b.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetPCLK4Freq();
 8004d22:	f7fd ff93 	bl	8002c4c <HAL_RCC_GetPCLK4Freq>
 8004d26:	6178      	str	r0, [r7, #20]
          break;
 8004d28:	e038      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004d2a:	4b52      	ldr	r3, [pc, #328]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d028      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004d36:	f7fd ffbb 	bl	8002cb0 <HAL_RCC_GetPLL2PFreq>
 8004d3a:	6178      	str	r0, [r7, #20]
          break;
 8004d3c:	e024      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004d3e:	4b4d      	ldr	r3, [pc, #308]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d021      	beq.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004d4a:	f7fe f84d 	bl	8002de8 <HAL_RCC_GetPLL3RFreq>
 8004d4e:	6178      	str	r0, [r7, #20]
          break;
 8004d50:	e01d      	b.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d52:	4b48      	ldr	r3, [pc, #288]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01a      	beq.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
            frequency = LSE_VALUE;
 8004d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d62:	617b      	str	r3, [r7, #20]
          break;
 8004d64:	e016      	b.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d66:	4b43      	ldr	r3, [pc, #268]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d013      	beq.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
            frequency = LSI_VALUE;
 8004d72:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d76:	617b      	str	r3, [r7, #20]
          break;
 8004d78:	e00f      	b.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
          frequency = RCC_GetCLKPFreq();
 8004d7a:	f000 fda1 	bl	80058c0 <RCC_GetCLKPFreq>
 8004d7e:	6178      	str	r0, [r7, #20]
          break;
 8004d80:	e00c      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
          break;
 8004d82:	bf00      	nop
 8004d84:	f000 bd83 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004d88:	bf00      	nop
 8004d8a:	f000 bd80 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004d8e:	bf00      	nop
 8004d90:	f000 bd7d 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004d94:	bf00      	nop
 8004d96:	f000 bd7a 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004d9a:	bf00      	nop
      break;
 8004d9c:	f000 bd77 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPTIM45_SOURCE();
 8004da0:	4b34      	ldr	r3, [pc, #208]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004da8:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004db0:	d04f      	beq.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004db8:	d84f      	bhi.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dc0:	d03d      	beq.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0xc26>
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dc8:	d847      	bhi.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd0:	d02b      	beq.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd8:	d83f      	bhi.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de0:	d019      	beq.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0xbfe>
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de8:	d837      	bhi.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d004      	beq.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df6:	d004      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 8004df8:	e02f      	b.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          frequency = HAL_RCC_GetPCLK4Freq();
 8004dfa:	f7fd ff27 	bl	8002c4c <HAL_RCC_GetPCLK4Freq>
 8004dfe:	6178      	str	r0, [r7, #20]
          break;
 8004e00:	e03b      	b.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004e02:	4b1c      	ldr	r3, [pc, #112]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d028      	beq.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xc48>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004e0e:	f7fd ff4f 	bl	8002cb0 <HAL_RCC_GetPLL2PFreq>
 8004e12:	6178      	str	r0, [r7, #20]
          break;
 8004e14:	e024      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xc48>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004e16:	4b17      	ldr	r3, [pc, #92]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d021      	beq.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004e22:	f7fd ffe1 	bl	8002de8 <HAL_RCC_GetPLL3RFreq>
 8004e26:	6178      	str	r0, [r7, #20]
          break;
 8004e28:	e01d      	b.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e2a:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01a      	beq.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
            frequency = LSE_VALUE;
 8004e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e3a:	617b      	str	r3, [r7, #20]
          break;
 8004e3c:	e016      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
            frequency = LSI_VALUE;
 8004e4a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e4e:	617b      	str	r3, [r7, #20]
          break;
 8004e50:	e012      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
          frequency = RCC_GetCLKPFreq();
 8004e52:	f000 fd35 	bl	80058c0 <RCC_GetCLKPFreq>
 8004e56:	6178      	str	r0, [r7, #20]
          break;
 8004e58:	e00f      	b.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
          break;
 8004e5a:	bf00      	nop
 8004e5c:	f000 bd17 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e60:	bf00      	nop
 8004e62:	f000 bd14 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e66:	bf00      	nop
 8004e68:	f000 bd11 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e6c:	bf00      	nop
 8004e6e:	f000 bd0e 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004e72:	bf00      	nop
 8004e74:	58024400 	.word	0x58024400
          break;
 8004e78:	bf00      	nop
      break;
 8004e7a:	f000 bd08 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPUART1_SOURCE();
 8004e7e:	4ba3      	ldr	r3, [pc, #652]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d84f      	bhi.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
 8004e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>)
 8004e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e94:	08004ead 	.word	0x08004ead
 8004e98:	08004eb5 	.word	0x08004eb5
 8004e9c:	08004ec9 	.word	0x08004ec9
 8004ea0:	08004edd 	.word	0x08004edd
 8004ea4:	08004f09 	.word	0x08004f09
 8004ea8:	08004f1b 	.word	0x08004f1b
          frequency = HAL_RCC_GetPCLK4Freq();
 8004eac:	f7fd fece 	bl	8002c4c <HAL_RCC_GetPCLK4Freq>
 8004eb0:	6178      	str	r0, [r7, #20]
          break;
 8004eb2:	e04c      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004eb4:	4b95      	ldr	r3, [pc, #596]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d039      	beq.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004ec0:	f7fd ff0c 	bl	8002cdc <HAL_RCC_GetPLL2QFreq>
 8004ec4:	6178      	str	r0, [r7, #20]
          break;
 8004ec6:	e035      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004ec8:	4b90      	ldr	r3, [pc, #576]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d032      	beq.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0xd22>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004ed4:	f7fd ff72 	bl	8002dbc <HAL_RCC_GetPLL3QFreq>
 8004ed8:	6178      	str	r0, [r7, #20]
          break;
 8004eda:	e02e      	b.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0xd22>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004edc:	4b8b      	ldr	r3, [pc, #556]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02b      	beq.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004ee8:	4b88      	ldr	r3, [pc, #544]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d025      	beq.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ef4:	4b85      	ldr	r3, [pc, #532]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	08db      	lsrs	r3, r3, #3
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	4a84      	ldr	r2, [pc, #528]	@ (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>)
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	617b      	str	r3, [r7, #20]
          break;
 8004f06:	e01b      	b.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004f08:	4b80      	ldr	r3, [pc, #512]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d018      	beq.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = CSI_VALUE;
 8004f14:	4b7f      	ldr	r3, [pc, #508]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xefc>)
 8004f16:	617b      	str	r3, [r7, #20]
          break;
 8004f18:	e015      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d012      	beq.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
            frequency = LSE_VALUE;
 8004f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f2a:	617b      	str	r3, [r7, #20]
          break;
 8004f2c:	e00e      	b.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          break;
 8004f2e:	bf00      	nop
 8004f30:	f000 bcad 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f34:	bf00      	nop
 8004f36:	f000 bcaa 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f3a:	bf00      	nop
 8004f3c:	f000 bca7 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f40:	bf00      	nop
 8004f42:	f000 bca4 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f46:	bf00      	nop
 8004f48:	f000 bca1 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f4c:	bf00      	nop
      break;
 8004f4e:	f000 bc9e 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004f52:	4b6e      	ldr	r3, [pc, #440]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8494 	beq.w	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
        frequency = HAL_RCC_GetPLL3RFreq();
 8004f60:	f7fd ff42 	bl	8002de8 <HAL_RCC_GetPLL3RFreq>
 8004f64:	6178      	str	r0, [r7, #20]
      break;
 8004f66:	f000 bc8f 	b.w	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
      clocksource = __HAL_RCC_GET_PSSI_SOURCE();
 8004f6a:	4b68      	ldr	r3, [pc, #416]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f72:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d004      	beq.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>
          break;
 8004f82:	e00e      	b.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004f84:	4b61      	ldr	r3, [pc, #388]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004f90:	f7fd ff2a 	bl	8002de8 <HAL_RCC_GetPLL3RFreq>
 8004f94:	6178      	str	r0, [r7, #20]
          break;
 8004f96:	e003      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
          frequency = RCC_GetCLKPFreq();
 8004f98:	f000 fc92 	bl	80058c0 <RCC_GetCLKPFreq>
 8004f9c:	6178      	str	r0, [r7, #20]
          break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
          break;
 8004fa0:	bf00      	nop
      break;
 8004fa2:	f000 bc74 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_RTC_SOURCE();
 8004fa6:	4b59      	ldr	r3, [pc, #356]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
 8004fb4:	4b55      	ldr	r3, [pc, #340]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 8004fbe:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004fc2:	e003      	b.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8004fc4:	4b51      	ldr	r3, [pc, #324]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fcc:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fd4:	d014      	beq.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fdc:	d81a      	bhi.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d033      	beq.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fea:	d113      	bne.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fec:	4b47      	ldr	r3, [pc, #284]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d02c      	beq.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
            frequency = LSE_VALUE;
 8004ff8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ffc:	617b      	str	r3, [r7, #20]
          break;
 8004ffe:	e028      	b.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005000:	4b42      	ldr	r3, [pc, #264]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8005002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d025      	beq.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
            frequency = LSI_VALUE;
 800500c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005010:	617b      	str	r3, [r7, #20]
          break;
 8005012:	e021      	b.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL) == RCC_BDCR_RTCSEL) /*!< HSE is the clock source for RTC */
 8005014:	4b3d      	ldr	r3, [pc, #244]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800501c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005020:	d11d      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005022:	4b3a      	ldr	r3, [pc, #232]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d017      	beq.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
              prescaler = READ_BIT(RCC->CFGR, RCC_CFGR_RTCPRE) >> RCC_CFGR_RTCPRE_Pos;
 800502e:	4b37      	ldr	r3, [pc, #220]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005038:	60fb      	str	r3, [r7, #12]
              if (prescaler > 1U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d90e      	bls.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
                frequency = HSE_VALUE / prescaler;
 8005040:	4a35      	ldr	r2, [pc, #212]	@ (8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
 8005048:	617b      	str	r3, [r7, #20]
          break;
 800504a:	e008      	b.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
          break;
 800504c:	bf00      	nop
 800504e:	f000 bc1e 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005052:	bf00      	nop
 8005054:	f000 bc1b 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005058:	bf00      	nop
 800505a:	f000 bc18 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800505e:	bf00      	nop
      break;
 8005060:	f000 bc15 	b.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005064:	4b29      	ldr	r3, [pc, #164]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8005066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005068:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800506c:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005074:	d039      	beq.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800507c:	d83d      	bhi.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005084:	d035      	beq.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xeda>
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800508c:	d835      	bhi.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005094:	d01f      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800509c:	d82d      	bhi.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
          break;
 80050ac:	e025      	b.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80050ae:	4b17      	ldr	r3, [pc, #92]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d021      	beq.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
            frequency = HAL_RCC_GetPLL1QFreq();
 80050ba:	f7fd fde3 	bl	8002c84 <HAL_RCC_GetPLL1QFreq>
 80050be:	6178      	str	r0, [r7, #20]
          break;
 80050c0:	e01d      	b.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80050c2:	4b12      	ldr	r3, [pc, #72]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80050c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d019      	beq.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
            frequency = HAL_RCC_GetPLL2PFreq();
 80050ce:	f7fd fdef 	bl	8002cb0 <HAL_RCC_GetPLL2PFreq>
 80050d2:	6178      	str	r0, [r7, #20]
          break;
 80050d4:	e015      	b.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80050d6:	4b0d      	ldr	r3, [pc, #52]	@ (800510c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d011      	beq.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
            frequency = HAL_RCC_GetPLL3PFreq();
 80050e2:	f7fd fe55 	bl	8002d90 <HAL_RCC_GetPLL3PFreq>
 80050e6:	6178      	str	r0, [r7, #20]
          break;
 80050e8:	e00d      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
          frequency = RCC_GetCLKPFreq();
 80050ea:	f000 fbe9 	bl	80058c0 <RCC_GetCLKPFreq>
 80050ee:	6178      	str	r0, [r7, #20]
          break;
 80050f0:	e00a      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
          frequency = EXTERNAL_CLOCK_VALUE;
 80050f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80050f6:	617b      	str	r3, [r7, #20]
          break;
 80050f8:	e006      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
          break;
 80050fa:	bf00      	nop
 80050fc:	e3c7      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80050fe:	bf00      	nop
 8005100:	e3c5      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005102:	bf00      	nop
 8005104:	e3c3      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005106:	bf00      	nop
      break;
 8005108:	e3c1      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 800510a:	bf00      	nop
 800510c:	58024400 	.word	0x58024400
 8005110:	03d09000 	.word	0x03d09000
 8005114:	003d0900 	.word	0x003d0900
 8005118:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_SAI2_SOURCE();
 800511c:	4b94      	ldr	r3, [pc, #592]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800511e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005120:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8005124:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800512c:	d049      	beq.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfaa>
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005134:	d847      	bhi.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800513c:	d039      	beq.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005144:	d83f      	bhi.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800514c:	d035      	beq.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xfa2>
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005154:	d837      	bhi.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800515c:	d01f      	beq.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005164:	d82f      	bhi.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d004      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005172:	d00a      	beq.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0xf72>
          break;
 8005174:	e027      	b.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005176:	4b7e      	ldr	r3, [pc, #504]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d023      	beq.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
            frequency = HAL_RCC_GetPLL1QFreq();
 8005182:	f7fd fd7f 	bl	8002c84 <HAL_RCC_GetPLL1QFreq>
 8005186:	6178      	str	r0, [r7, #20]
          break;
 8005188:	e01f      	b.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800518a:	4b79      	ldr	r3, [pc, #484]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01b      	beq.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0xfb6>
            frequency = HAL_RCC_GetPLL2PFreq();
 8005196:	f7fd fd8b 	bl	8002cb0 <HAL_RCC_GetPLL2PFreq>
 800519a:	6178      	str	r0, [r7, #20]
          break;
 800519c:	e017      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0xfb6>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800519e:	4b74      	ldr	r3, [pc, #464]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d013      	beq.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            frequency = HAL_RCC_GetPLL3PFreq();
 80051aa:	f7fd fdf1 	bl	8002d90 <HAL_RCC_GetPLL3PFreq>
 80051ae:	6178      	str	r0, [r7, #20]
          break;
 80051b0:	e00f      	b.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
          frequency = RCC_GetCLKPFreq();
 80051b2:	f000 fb85 	bl	80058c0 <RCC_GetCLKPFreq>
 80051b6:	6178      	str	r0, [r7, #20]
          break;
 80051b8:	e00c      	b.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
          frequency = EXTERNAL_CLOCK_VALUE;
 80051ba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80051be:	617b      	str	r3, [r7, #20]
          break;
 80051c0:	e008      	b.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
          break;
 80051c2:	bf00      	nop
 80051c4:	e363      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80051c6:	bf00      	nop
 80051c8:	e361      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80051ca:	bf00      	nop
 80051cc:	e35f      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80051ce:	bf00      	nop
 80051d0:	e35d      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80051d2:	bf00      	nop
      break;
 80051d4:	e35b      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SDMMC12_SOURCE();
 80051d6:	4b66      	ldr	r3, [pc, #408]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80051d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	613b      	str	r3, [r7, #16]
      if (clocksource ==
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
        if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 80051e6:	4b62      	ldr	r3, [pc, #392]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 834c 	beq.w	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
          frequency = HAL_RCC_GetPLL2SFreq();
 80051f4:	f7fd fd9e 	bl	8002d34 <HAL_RCC_GetPLL2SFreq>
 80051f8:	6178      	str	r0, [r7, #20]
      break;
 80051fa:	e347      	b.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 80051fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8341 	beq.w	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
          frequency = HAL_RCC_GetPLL2TFreq();
 800520a:	f7fd fda9 	bl	8002d60 <HAL_RCC_GetPLL2TFreq>
 800520e:	6178      	str	r0, [r7, #20]
      break;
 8005210:	e33c      	b.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
      clocksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8005212:	4b57      	ldr	r3, [pc, #348]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8005214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005216:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800521a:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005222:	d031      	beq.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800522a:	d843      	bhi.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005232:	d01f      	beq.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800523a:	d83b      	bhi.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
          break;
 800524a:	e033      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800524c:	4b48      	ldr	r3, [pc, #288]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d02f      	beq.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
            frequency = HAL_RCC_GetPLL1QFreq();
 8005258:	f7fd fd14 	bl	8002c84 <HAL_RCC_GetPLL1QFreq>
 800525c:	6178      	str	r0, [r7, #20]
          break;
 800525e:	e02b      	b.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8005260:	4b43      	ldr	r3, [pc, #268]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d027      	beq.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
            frequency = HAL_RCC_GetPLL2RFreq();
 800526c:	f7fd fd4c 	bl	8002d08 <HAL_RCC_GetPLL2RFreq>
 8005270:	6178      	str	r0, [r7, #20]
          break;
 8005272:	e023      	b.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8005274:	4b3e      	ldr	r3, [pc, #248]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01f      	beq.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
            frequency = HAL_RCC_GetPLL3RFreq();
 8005280:	f7fd fdb2 	bl	8002de8 <HAL_RCC_GetPLL3RFreq>
 8005284:	6178      	str	r0, [r7, #20]
          break;
 8005286:	e01b      	b.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005288:	4b39      	ldr	r3, [pc, #228]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d017      	beq.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005294:	4b36      	ldr	r3, [pc, #216]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d011      	beq.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052a0:	4b33      	ldr	r3, [pc, #204]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	08db      	lsrs	r3, r3, #3
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	4a32      	ldr	r2, [pc, #200]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x115c>)
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]
          break;
 80052b2:	e007      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
          break;
 80052b4:	bf00      	nop
 80052b6:	e2ea      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80052b8:	bf00      	nop
 80052ba:	e2e8      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80052bc:	bf00      	nop
 80052be:	e2e6      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80052c0:	bf00      	nop
 80052c2:	e2e4      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80052c4:	bf00      	nop
      break;
 80052c6:	e2e2      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI1_SOURCE();
 80052c8:	4b29      	ldr	r3, [pc, #164]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 80052ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052d0:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d8:	d039      	beq.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e0:	d83d      	bhi.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052e8:	d035      	beq.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x113e>
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052f0:	d835      	bhi.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f8:	d01f      	beq.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005300:	d82d      	bhi.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x10fa>
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
          break;
 8005310:	e025      	b.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005312:	4b17      	ldr	r3, [pc, #92]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d021      	beq.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
            frequency = HAL_RCC_GetPLL1QFreq();
 800531e:	f7fd fcb1 	bl	8002c84 <HAL_RCC_GetPLL1QFreq>
 8005322:	6178      	str	r0, [r7, #20]
          break;
 8005324:	e01d      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8005326:	4b12      	ldr	r3, [pc, #72]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d019      	beq.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
            frequency = HAL_RCC_GetPLL2PFreq();
 8005332:	f7fd fcbd 	bl	8002cb0 <HAL_RCC_GetPLL2PFreq>
 8005336:	6178      	str	r0, [r7, #20]
          break;
 8005338:	e015      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d011      	beq.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
            frequency = HAL_RCC_GetPLL3PFreq();
 8005346:	f7fd fd23 	bl	8002d90 <HAL_RCC_GetPLL3PFreq>
 800534a:	6178      	str	r0, [r7, #20]
          break;
 800534c:	e00d      	b.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
          frequency = RCC_GetCLKPFreq();
 800534e:	f000 fab7 	bl	80058c0 <RCC_GetCLKPFreq>
 8005352:	6178      	str	r0, [r7, #20]
          break;
 8005354:	e00a      	b.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005356:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800535a:	617b      	str	r3, [r7, #20]
          break;
 800535c:	e006      	b.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
          break;
 800535e:	bf00      	nop
 8005360:	e295      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005362:	bf00      	nop
 8005364:	e293      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005366:	bf00      	nop
 8005368:	e291      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800536a:	bf00      	nop
      break;
 800536c:	e28f      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 800536e:	bf00      	nop
 8005370:	58024400 	.word	0x58024400
 8005374:	03d09000 	.word	0x03d09000
      clocksource = __HAL_RCC_GET_SPI23_SOURCE();
 8005378:	4b92      	ldr	r3, [pc, #584]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800537a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800537c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005380:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b40      	cmp	r3, #64	@ 0x40
 8005386:	d033      	beq.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b40      	cmp	r3, #64	@ 0x40
 800538c:	d838      	bhi.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b30      	cmp	r3, #48	@ 0x30
 8005392:	d031      	beq.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b30      	cmp	r3, #48	@ 0x30
 8005398:	d832      	bhi.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b20      	cmp	r3, #32
 800539e:	d01d      	beq.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d82c      	bhi.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
          break;
 80053b2:	e025      	b.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80053b4:	4b83      	ldr	r3, [pc, #524]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d021      	beq.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
            frequency = HAL_RCC_GetPLL1QFreq();
 80053c0:	f7fd fc60 	bl	8002c84 <HAL_RCC_GetPLL1QFreq>
 80053c4:	6178      	str	r0, [r7, #20]
          break;
 80053c6:	e01d      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80053c8:	4b7e      	ldr	r3, [pc, #504]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d019      	beq.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x11f0>
            frequency = HAL_RCC_GetPLL2PFreq();
 80053d4:	f7fd fc6c 	bl	8002cb0 <HAL_RCC_GetPLL2PFreq>
 80053d8:	6178      	str	r0, [r7, #20]
          break;
 80053da:	e015      	b.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x11f0>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80053dc:	4b79      	ldr	r3, [pc, #484]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80053de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d011      	beq.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
            frequency = HAL_RCC_GetPLL3PFreq();
 80053e8:	f7fd fcd2 	bl	8002d90 <HAL_RCC_GetPLL3PFreq>
 80053ec:	6178      	str	r0, [r7, #20]
          break;
 80053ee:	e00d      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
          frequency = RCC_GetCLKPFreq();
 80053f0:	f000 fa66 	bl	80058c0 <RCC_GetCLKPFreq>
 80053f4:	6178      	str	r0, [r7, #20]
          break;
 80053f6:	e00a      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
          frequency = EXTERNAL_CLOCK_VALUE;
 80053f8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80053fc:	617b      	str	r3, [r7, #20]
          break;
 80053fe:	e006      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
          break;
 8005400:	bf00      	nop
 8005402:	e244      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005404:	bf00      	nop
 8005406:	e242      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005408:	bf00      	nop
 800540a:	e240      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800540c:	bf00      	nop
      break;
 800540e:	e23e      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI45_SOURCE();
 8005410:	4b6c      	ldr	r3, [pc, #432]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005414:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005418:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b50      	cmp	r3, #80	@ 0x50
 800541e:	d052      	beq.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b50      	cmp	r3, #80	@ 0x50
 8005424:	d858      	bhi.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b40      	cmp	r3, #64	@ 0x40
 800542a:	d043      	beq.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b40      	cmp	r3, #64	@ 0x40
 8005430:	d852      	bhi.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b30      	cmp	r3, #48	@ 0x30
 8005436:	d027      	beq.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b30      	cmp	r3, #48	@ 0x30
 800543c:	d84c      	bhi.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b20      	cmp	r3, #32
 8005442:	d017      	beq.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b20      	cmp	r3, #32
 8005448:	d846      	bhi.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b10      	cmp	r3, #16
 8005454:	d004      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
          break;
 8005456:	e03f      	b.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005458:	f7fd fbdc 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 800545c:	6178      	str	r0, [r7, #20]
          break;
 800545e:	e046      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005460:	4b58      	ldr	r3, [pc, #352]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d037      	beq.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c4>
            frequency = HAL_RCC_GetPLL2QFreq();
 800546c:	f7fd fc36 	bl	8002cdc <HAL_RCC_GetPLL2QFreq>
 8005470:	6178      	str	r0, [r7, #20]
          break;
 8005472:	e033      	b.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005474:	4b53      	ldr	r3, [pc, #332]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02f      	beq.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8005480:	f7fd fc9c 	bl	8002dbc <HAL_RCC_GetPLL3QFreq>
 8005484:	6178      	str	r0, [r7, #20]
          break;
 8005486:	e02b      	b.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005488:	4b4e      	ldr	r3, [pc, #312]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d027      	beq.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005494:	4b4b      	ldr	r3, [pc, #300]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d021      	beq.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054a0:	4b48      	ldr	r3, [pc, #288]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	08db      	lsrs	r3, r3, #3
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	4a47      	ldr	r2, [pc, #284]	@ (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]
          break;
 80054b2:	e017      	b.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80054b4:	4b43      	ldr	r3, [pc, #268]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d013      	beq.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
            frequency = CSI_VALUE;
 80054c0:	4b42      	ldr	r3, [pc, #264]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80054c2:	617b      	str	r3, [r7, #20]
          break;
 80054c4:	e010      	b.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054c6:	4b3f      	ldr	r3, [pc, #252]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00c      	beq.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
            frequency = HSE_VALUE;
 80054d2:	4b3f      	ldr	r3, [pc, #252]	@ (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80054d4:	617b      	str	r3, [r7, #20]
          break;
 80054d6:	e009      	b.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
          break;
 80054d8:	bf00      	nop
 80054da:	e1d8      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80054dc:	bf00      	nop
 80054de:	e1d6      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80054e0:	bf00      	nop
 80054e2:	e1d4      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80054e4:	bf00      	nop
 80054e6:	e1d2      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80054e8:	bf00      	nop
 80054ea:	e1d0      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80054ec:	bf00      	nop
      break;
 80054ee:	e1ce      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI6_SOURCE();
 80054f0:	4b34      	ldr	r3, [pc, #208]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80054f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054f8:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b50      	cmp	r3, #80	@ 0x50
 80054fe:	d052      	beq.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x138e>
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b50      	cmp	r3, #80	@ 0x50
 8005504:	d858      	bhi.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	d043      	beq.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x137c>
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	2b40      	cmp	r3, #64	@ 0x40
 8005510:	d852      	bhi.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b30      	cmp	r3, #48	@ 0x30
 8005516:	d027      	beq.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b30      	cmp	r3, #48	@ 0x30
 800551c:	d84c      	bhi.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b20      	cmp	r3, #32
 8005522:	d017      	beq.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b20      	cmp	r3, #32
 8005528:	d846      	bhi.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x1320>
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b10      	cmp	r3, #16
 8005534:	d004      	beq.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x1328>
          break;
 8005536:	e03f      	b.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
          frequency = HAL_RCC_GetPCLK4Freq();
 8005538:	f7fd fb88 	bl	8002c4c <HAL_RCC_GetPCLK4Freq>
 800553c:	6178      	str	r0, [r7, #20]
          break;
 800553e:	e04e      	b.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005540:	4b20      	ldr	r3, [pc, #128]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d037      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
            frequency = HAL_RCC_GetPLL2QFreq();
 800554c:	f7fd fbc6 	bl	8002cdc <HAL_RCC_GetPLL2QFreq>
 8005550:	6178      	str	r0, [r7, #20]
          break;
 8005552:	e033      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005554:	4b1b      	ldr	r3, [pc, #108]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d02f      	beq.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = HAL_RCC_GetPLL3QFreq();
 8005560:	f7fd fc2c 	bl	8002dbc <HAL_RCC_GetPLL3QFreq>
 8005564:	6178      	str	r0, [r7, #20]
          break;
 8005566:	e02b      	b.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005568:	4b16      	ldr	r3, [pc, #88]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d02f      	beq.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005574:	4b13      	ldr	r3, [pc, #76]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d029      	beq.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005580:	4b10      	ldr	r3, [pc, #64]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	08db      	lsrs	r3, r3, #3
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	4a0f      	ldr	r2, [pc, #60]	@ (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]
          break;
 8005592:	e01f      	b.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005594:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01b      	beq.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
            frequency = CSI_VALUE;
 80055a0:	4b0a      	ldr	r3, [pc, #40]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80055a2:	617b      	str	r3, [r7, #20]
          break;
 80055a4:	e018      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055a6:	4b07      	ldr	r3, [pc, #28]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d014      	beq.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x13c4>
            frequency = HSE_VALUE;
 80055b2:	4b07      	ldr	r3, [pc, #28]	@ (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80055b4:	617b      	str	r3, [r7, #20]
          break;
 80055b6:	e011      	b.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x13c4>
          break;
 80055b8:	bf00      	nop
 80055ba:	e168      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80055bc:	bf00      	nop
 80055be:	e166      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80055c0:	bf00      	nop
 80055c2:	e164      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 80055c4:	58024400 	.word	0x58024400
 80055c8:	03d09000 	.word	0x03d09000
 80055cc:	003d0900 	.word	0x003d0900
 80055d0:	016e3600 	.word	0x016e3600
          break;
 80055d4:	bf00      	nop
 80055d6:	e15a      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80055d8:	bf00      	nop
 80055da:	e158      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80055dc:	bf00      	nop
      break;
 80055de:	e156      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USART1_SOURCE();
 80055e0:	4b9e      	ldr	r3, [pc, #632]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80055e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b05      	cmp	r3, #5
 80055ee:	d850      	bhi.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 80055f0:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	08005611 	.word	0x08005611
 80055fc:	08005619 	.word	0x08005619
 8005600:	0800562d 	.word	0x0800562d
 8005604:	08005641 	.word	0x08005641
 8005608:	0800566d 	.word	0x0800566d
 800560c:	0800567f 	.word	0x0800567f
          frequency = HAL_RCC_GetPCLK2Freq();
 8005610:	f7fd fb00 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8005614:	6178      	str	r0, [r7, #20]
          break;
 8005616:	e047      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005618:	4b90      	ldr	r3, [pc, #576]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d038      	beq.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
            frequency = HAL_RCC_GetPLL2QFreq();
 8005624:	f7fd fb5a 	bl	8002cdc <HAL_RCC_GetPLL2QFreq>
 8005628:	6178      	str	r0, [r7, #20]
          break;
 800562a:	e034      	b.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800562c:	4b8b      	ldr	r3, [pc, #556]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d030      	beq.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
            frequency = HAL_RCC_GetPLL3QFreq();
 8005638:	f7fd fbc0 	bl	8002dbc <HAL_RCC_GetPLL3QFreq>
 800563c:	6178      	str	r0, [r7, #20]
          break;
 800563e:	e02c      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005640:	4b86      	ldr	r3, [pc, #536]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d028      	beq.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800564c:	4b83      	ldr	r3, [pc, #524]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d022      	beq.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005658:	4b80      	ldr	r3, [pc, #512]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	08db      	lsrs	r3, r3, #3
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	4a7f      	ldr	r2, [pc, #508]	@ (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>)
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]
          break;
 800566a:	e018      	b.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800566c:	4b7b      	ldr	r3, [pc, #492]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d014      	beq.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
            frequency = CSI_VALUE;
 8005678:	4b7a      	ldr	r3, [pc, #488]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>)
 800567a:	617b      	str	r3, [r7, #20]
          break;
 800567c:	e011      	b.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800567e:	4b77      	ldr	r3, [pc, #476]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00d      	beq.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
            frequency = LSE_VALUE;
 800568a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800568e:	617b      	str	r3, [r7, #20]
          break;
 8005690:	e009      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          break;
 8005692:	bf00      	nop
 8005694:	e0fb      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005696:	bf00      	nop
 8005698:	e0f9      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800569a:	bf00      	nop
 800569c:	e0f7      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800569e:	bf00      	nop
 80056a0:	e0f5      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80056a2:	bf00      	nop
 80056a4:	e0f3      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80056a6:	bf00      	nop
      break;
 80056a8:	e0f1      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USART234578_SOURCE();
 80056aa:	4b6c      	ldr	r3, [pc, #432]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80056ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b05      	cmp	r3, #5
 80056b8:	d84f      	bhi.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x1542>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x14a8>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056d9 	.word	0x080056d9
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	080056f5 	.word	0x080056f5
 80056cc:	08005709 	.word	0x08005709
 80056d0:	08005735 	.word	0x08005735
 80056d4:	08005747 	.word	0x08005747
          frequency = HAL_RCC_GetPCLK1Freq();
 80056d8:	f7fd fa80 	bl	8002bdc <HAL_RCC_GetPCLK1Freq>
 80056dc:	6178      	str	r0, [r7, #20]
          break;
 80056de:	e047      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80056e0:	4b5e      	ldr	r3, [pc, #376]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d038      	beq.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
            frequency = HAL_RCC_GetPLL2QFreq();
 80056ec:	f7fd faf6 	bl	8002cdc <HAL_RCC_GetPLL2QFreq>
 80056f0:	6178      	str	r0, [r7, #20]
          break;
 80056f2:	e034      	b.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80056f4:	4b59      	ldr	r3, [pc, #356]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d030      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x154a>
            frequency = HAL_RCC_GetPLL3QFreq();
 8005700:	f7fd fb5c 	bl	8002dbc <HAL_RCC_GetPLL3QFreq>
 8005704:	6178      	str	r0, [r7, #20]
          break;
 8005706:	e02c      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x154a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005708:	4b54      	ldr	r3, [pc, #336]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d028      	beq.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005714:	4b51      	ldr	r3, [pc, #324]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d022      	beq.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005720:	4b4e      	ldr	r3, [pc, #312]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	08db      	lsrs	r3, r3, #3
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	4a4d      	ldr	r2, [pc, #308]	@ (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>)
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]
          break;
 8005732:	e018      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005734:	4b49      	ldr	r3, [pc, #292]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800573c:	2b00      	cmp	r3, #0
 800573e:	d014      	beq.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x1552>
            frequency = CSI_VALUE;
 8005740:	4b48      	ldr	r3, [pc, #288]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>)
 8005742:	617b      	str	r3, [r7, #20]
          break;
 8005744:	e011      	b.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x1552>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005746:	4b45      	ldr	r3, [pc, #276]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x1556>
            frequency = LSE_VALUE;
 8005752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005756:	617b      	str	r3, [r7, #20]
          break;
 8005758:	e009      	b.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x1556>
          break;
 800575a:	bf00      	nop
 800575c:	e097      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800575e:	bf00      	nop
 8005760:	e095      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005762:	bf00      	nop
 8005764:	e093      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005766:	bf00      	nop
 8005768:	e091      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800576a:	bf00      	nop
 800576c:	e08f      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800576e:	bf00      	nop
      break;
 8005770:	e08d      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USBPHYC_SOURCE();
 8005772:	4b3a      	ldr	r3, [pc, #232]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005776:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800577a:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005782:	d01d      	beq.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800578a:	d823      	bhi.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d004      	beq.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005798:	d009      	beq.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
          break;
 800579a:	e01b      	b.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800579c:	4b2f      	ldr	r3, [pc, #188]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d017      	beq.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
            frequency = HSE_VALUE;
 80057a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>)
 80057aa:	617b      	str	r3, [r7, #20]
          break;
 80057ac:	e014      	b.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057ae:	4b2b      	ldr	r3, [pc, #172]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d010      	beq.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c4>
            frequency = (HSE_VALUE >> 1UL);
 80057ba:	4b2c      	ldr	r3, [pc, #176]	@ (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>)
 80057bc:	617b      	str	r3, [r7, #20]
          break;
 80057be:	e00d      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80057c0:	4b26      	ldr	r3, [pc, #152]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c8>
            frequency = HAL_RCC_GetPLL3QFreq();
 80057cc:	f7fd faf6 	bl	8002dbc <HAL_RCC_GetPLL3QFreq>
 80057d0:	6178      	str	r0, [r7, #20]
          break;
 80057d2:	e005      	b.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c8>
          break;
 80057d4:	bf00      	nop
 80057d6:	e05a      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80057d8:	bf00      	nop
 80057da:	e058      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80057dc:	bf00      	nop
 80057de:	e056      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80057e0:	bf00      	nop
      break;
 80057e2:	e054      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USBOTGFS_SOURCE();
 80057e4:	4b1d      	ldr	r3, [pc, #116]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80057e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80057ec:	613b      	str	r3, [r7, #16]
      switch (clocksource)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80057f4:	d02f      	beq.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x163e>
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80057fc:	d83a      	bhi.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005804:	d01e      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800580c:	d832      	bhi.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d004      	beq.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800581a:	d009      	beq.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
          break;
 800581c:	e02a      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
          if (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800581e:	4b0f      	ldr	r3, [pc, #60]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d026      	beq.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
            frequency = HSI48_VALUE;
 800582a:	4b11      	ldr	r3, [pc, #68]	@ (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 800582c:	617b      	str	r3, [r7, #20]
          break;
 800582e:	e023      	b.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005830:	4b0a      	ldr	r3, [pc, #40]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01f      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
            frequency = HAL_RCC_GetPLL3QFreq();
 800583c:	f7fd fabe 	bl	8002dbc <HAL_RCC_GetPLL3QFreq>
 8005840:	6178      	str	r0, [r7, #20]
          break;
 8005842:	e01b      	b.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005844:	4b05      	ldr	r3, [pc, #20]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d017      	beq.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
            frequency = HSE_VALUE;
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>)
 8005852:	617b      	str	r3, [r7, #20]
          break;
 8005854:	e014      	b.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
          break;
 8005856:	bf00      	nop
 8005858:	e019      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 800585a:	bf00      	nop
 800585c:	58024400 	.word	0x58024400
 8005860:	03d09000 	.word	0x03d09000
 8005864:	003d0900 	.word	0x003d0900
 8005868:	016e3600 	.word	0x016e3600
 800586c:	00b71b00 	.word	0x00b71b00
 8005870:	02dc6c00 	.word	0x02dc6c00
          break;
 8005874:	bf00      	nop
 8005876:	e00a      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005878:	bf00      	nop
 800587a:	e008      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800587c:	bf00      	nop
 800587e:	e006      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005880:	bf00      	nop
      break;
 8005882:	e004      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 8005884:	bf00      	nop
 8005886:	e002      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 8005888:	bf00      	nop
 800588a:	e000      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 800588c:	bf00      	nop
  }

  return frequency;
 800588e:	697b      	ldr	r3, [r7, #20]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_RCCEx_EnableClockProtection>:
  *            @arg RCC_CLOCKPROTECT_FMC     FMC clock protection
  *            @arg RCC_CLOCKPROTECT_XSPI    XSPIs clock protection
  * @retval None
  */
void HAL_RCCEx_EnableClockProtection(uint32_t ProtectClk)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_RCC_CLOCKPROTECTION(ProtectClk));

  SET_BIT(RCC->CKPROTR, ProtectClk);
 80058a0:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <HAL_RCCEx_EnableClockProtection+0x24>)
 80058a2:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80058a6:	4905      	ldr	r1, [pc, #20]	@ (80058bc <HAL_RCCEx_EnableClockProtection+0x24>)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	58024400 	.word	0x58024400

080058c0 <RCC_GetCLKPFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_GetCLKPFreq(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	607b      	str	r3, [r7, #4]
  uint32_t ckpclocksource;

  ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005948 <RCC_GetCLKPFreq+0x88>)
 80058cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058d2:	603b      	str	r3, [r7, #0]

  if (ckpclocksource == RCC_CLKPSOURCE_HSI)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d115      	bne.n	8005906 <RCC_GetCLKPFreq+0x46>
  {
    if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058da:	4b1b      	ldr	r3, [pc, #108]	@ (8005948 <RCC_GetCLKPFreq+0x88>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d028      	beq.n	8005938 <RCC_GetCLKPFreq+0x78>
    {
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80058e6:	4b18      	ldr	r3, [pc, #96]	@ (8005948 <RCC_GetCLKPFreq+0x88>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d022      	beq.n	8005938 <RCC_GetCLKPFreq+0x78>
      {
        frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058f2:	4b15      	ldr	r3, [pc, #84]	@ (8005948 <RCC_GetCLKPFreq+0x88>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	08db      	lsrs	r3, r3, #3
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	4a13      	ldr	r2, [pc, #76]	@ (800594c <RCC_GetCLKPFreq+0x8c>)
 80058fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005902:	607b      	str	r3, [r7, #4]
 8005904:	e018      	b.n	8005938 <RCC_GetCLKPFreq+0x78>
      {
        /* Can't retrieve HSIDIV value */
      }
    }
  }
  else if (ckpclocksource == RCC_CLKPSOURCE_CSI)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800590c:	d108      	bne.n	8005920 <RCC_GetCLKPFreq+0x60>
  {
    if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800590e:	4b0e      	ldr	r3, [pc, #56]	@ (8005948 <RCC_GetCLKPFreq+0x88>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00e      	beq.n	8005938 <RCC_GetCLKPFreq+0x78>
    {
      frequency = CSI_VALUE;
 800591a:	4b0d      	ldr	r3, [pc, #52]	@ (8005950 <RCC_GetCLKPFreq+0x90>)
 800591c:	607b      	str	r3, [r7, #4]
 800591e:	e00b      	b.n	8005938 <RCC_GetCLKPFreq+0x78>
    }
  }
  else if (ckpclocksource == RCC_CLKPSOURCE_HSE)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005926:	d107      	bne.n	8005938 <RCC_GetCLKPFreq+0x78>
  {
    if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005928:	4b07      	ldr	r3, [pc, #28]	@ (8005948 <RCC_GetCLKPFreq+0x88>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <RCC_GetCLKPFreq+0x78>
    {
      frequency = HSE_VALUE;
 8005934:	4b07      	ldr	r3, [pc, #28]	@ (8005954 <RCC_GetCLKPFreq+0x94>)
 8005936:	607b      	str	r3, [r7, #4]
  {
    /* Nothing to do, case the CKPER is disabled */
    /* frequency is by default set to 0          */
  }

  return frequency;
 8005938:	687b      	ldr	r3, [r7, #4]
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	58024400 	.word	0x58024400
 800594c:	03d09000 	.word	0x03d09000
 8005950:	003d0900 	.word	0x003d0900
 8005954:	016e3600 	.word	0x016e3600

08005958 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af02      	add	r7, sp, #8
 800595e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005964:	f7fb fa32 	bl	8000dcc <HAL_GetTick>
 8005968:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e0cb      	b.n	8005b0e <HAL_XSPI_Init+0x1b6>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005980:	2b00      	cmp	r3, #0
 8005982:	f040 80c4 	bne.w	8005b0e <HAL_XSPI_Init+0x1b6>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fb f81a 	bl	80009c0 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800598c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fd72 	bl	800647a <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	4b5e      	ldr	r3, [pc, #376]	@ (8005b18 <HAL_XSPI_Init+0x1c0>)
 800599e:	4013      	ands	r3, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	68d1      	ldr	r1, [r2, #12]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6912      	ldr	r2, [r2, #16]
 80059a8:	0412      	lsls	r2, r2, #16
 80059aa:	4311      	orrs	r1, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6952      	ldr	r2, [r2, #20]
 80059b0:	3a01      	subs	r2, #1
 80059b2:	0212      	lsls	r2, r2, #8
 80059b4:	4311      	orrs	r1, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	69d2      	ldr	r2, [r2, #28]
 80059ba:	4311      	orrs	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1a      	ldr	r2, [r3, #32]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e8:	041a      	lsls	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a10:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	021a      	lsls	r2, r3, #8
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2120      	movs	r1, #32
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fe59 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d162      	bne.n	8005b0e <HAL_XSPI_Init+0x1b6>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2e      	ldr	r2, [pc, #184]	@ (8005b1c <HAL_XSPI_Init+0x1c4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <HAL_XSPI_Init+0x11a>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b20 <HAL_XSPI_Init+0x1c8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d10f      	bne.n	8005a92 <HAL_XSPI_Init+0x13a>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2120      	movs	r1, #32
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fe36 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_XSPI_Init+0x13a>
          {
            return status;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	e03e      	b.n	8005b10 <HAL_XSPI_Init+0x1b8>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b22      	ldr	r3, [pc, #136]	@ (8005b24 <HAL_XSPI_Init+0x1cc>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6891      	ldr	r1, [r2, #8]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005aa4:	4311      	orrs	r1, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005ab6:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0201 	orr.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d107      	bne.n	8005af6 <HAL_XSPI_Init+0x19e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0202 	orr.w	r2, r2, #2
 8005af4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005afe:	d103      	bne.n	8005b08 <HAL_XSPI_Init+0x1b0>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	655a      	str	r2, [r3, #84]	@ 0x54
 8005b06:	e002      	b.n	8005b0e <HAL_XSPI_Init+0x1b6>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	f8e0c0fc 	.word	0xf8e0c0fc
 8005b1c:	52005000 	.word	0x52005000
 8005b20:	5200a000 	.word	0x5200a000
 8005b24:	feffffbf 	.word	0xfeffffbf

08005b28 <HAL_XSPI_IRQHandler>:
  * @brief  Handle XSPI interrupt request.
  * @param  hxspi : XSPI handle
  * @retval None
  */
void HAL_XSPI_IRQHandler(XSPI_HandleTypeDef *hxspi)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3350      	adds	r3, #80	@ 0x50
 8005b36:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hxspi->Instance->SR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hxspi->Instance->CR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hxspi->State;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4c:	60bb      	str	r3, [r7, #8]

  /* XSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_XSPI_FLAG_FT) != 0U) && ((itsource & HAL_XSPI_IT_FT) != 0U))
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d03a      	beq.n	8005bce <HAL_XSPI_IRQHandler+0xa6>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d035      	beq.n	8005bce <HAL_XSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_XSPI_STATE_BUSY_TX)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b18      	cmp	r3, #24
 8005b66:	d10f      	bne.n	8005b88 <HAL_XSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	701a      	strb	r2, [r3, #0]
      hxspi->pBuffPtr++;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->XferCount--;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	649a      	str	r2, [r3, #72]	@ 0x48
 8005b86:	e012      	b.n	8005bae <HAL_XSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b28      	cmp	r3, #40	@ 0x28
 8005b8c:	d10f      	bne.n	8005bae <HAL_XSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	7812      	ldrb	r2, [r2, #0]
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]
      hxspi->pBuffPtr++;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	641a      	str	r2, [r3, #64]	@ 0x40
      hxspi->XferCount--;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba8:	1e5a      	subs	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hxspi->XferCount == 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d107      	bne.n	8005bc6 <HAL_XSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_FT);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005bc4:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->FifoThresholdCallback(hxspi);
#else
    HAL_XSPI_FifoThresholdCallback(hxspi);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fb94 	bl	80062f4 <HAL_XSPI_FifoThresholdCallback>
 8005bcc:	e0f9      	b.n	8005dc2 <HAL_XSPI_IRQHandler+0x29a>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* XSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TC) != 0U) && ((itsource & HAL_XSPI_IT_TC) != 0U))
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d067      	beq.n	8005ca8 <HAL_XSPI_IRQHandler+0x180>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d062      	beq.n	8005ca8 <HAL_XSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b28      	cmp	r3, #40	@ 0x28
 8005be6:	d131      	bne.n	8005c4c <HAL_XSPI_IRQHandler+0x124>
    {
      if ((hxspi->XferCount > 0U) && ((flag & XSPI_SR_FLEVEL) != 0U))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d015      	beq.n	8005c1c <HAL_XSPI_IRQHandler+0xf4>
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d010      	beq.n	8005c1c <HAL_XSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	7812      	ldrb	r2, [r2, #0]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c14:	1e5a      	subs	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 8005c1a:	e0cf      	b.n	8005dbc <HAL_XSPI_IRQHandler+0x294>
      }
      else if (hxspi->XferCount == 0U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f040 80cb 	bne.w	8005dbc <HAL_XSPI_IRQHandler+0x294>
      {
        /* Clear flag */
        hxspi->Instance->FCR = HAL_XSPI_FLAG_TC;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_TC | HAL_XSPI_IT_FT | HAL_XSPI_IT_TE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8005c3c:	601a      	str	r2, [r3, #0]

        hxspi->State = HAL_XSPI_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	655a      	str	r2, [r3, #84]	@ 0x54

        /* RX complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->RxCpltCallback(hxspi);
#else
        HAL_XSPI_RxCpltCallback(hxspi);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fb69 	bl	800631c <HAL_XSPI_RxCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 8005c4a:	e0b7      	b.n	8005dbc <HAL_XSPI_IRQHandler+0x294>
      }
    }
    else
    {
      /* Clear flag */
      hxspi->Instance->FCR = HAL_XSPI_FLAG_TC;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2202      	movs	r2, #2
 8005c52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_TC | HAL_XSPI_IT_FT | HAL_XSPI_IT_TE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8005c62:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	655a      	str	r2, [r3, #84]	@ 0x54

      if (currentstate == HAL_XSPI_STATE_BUSY_TX)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b18      	cmp	r3, #24
 8005c6e:	d103      	bne.n	8005c78 <HAL_XSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->TxCpltCallback(hxspi);
#else
        HAL_XSPI_TxCpltCallback(hxspi);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fb5d 	bl	8006330 <HAL_XSPI_TxCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 8005c76:	e0a1      	b.n	8005dbc <HAL_XSPI_IRQHandler+0x294>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_XSPI_STATE_BUSY_CMD)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d103      	bne.n	8005c86 <HAL_XSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->CmdCpltCallback(hxspi);
#else
        HAL_XSPI_CmdCpltCallback(hxspi);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fb42 	bl	8006308 <HAL_XSPI_CmdCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 8005c84:	e09a      	b.n	8005dbc <HAL_XSPI_IRQHandler+0x294>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_XSPI_STATE_ABORT)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c8c:	f040 8096 	bne.w	8005dbc <HAL_XSPI_IRQHandler+0x294>
      {
        if (hxspi->ErrorCode == HAL_XSPI_ERROR_NONE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d103      	bne.n	8005ca0 <HAL_XSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
          hxspi->AbortCpltCallback(hxspi);
#else
          HAL_XSPI_AbortCpltCallback(hxspi);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fb21 	bl	80062e0 <HAL_XSPI_AbortCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 8005c9e:	e08d      	b.n	8005dbc <HAL_XSPI_IRQHandler+0x294>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
          hxspi->ErrorCallback(hxspi);
#else
          HAL_XSPI_ErrorCallback(hxspi);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fb13 	bl	80062cc <HAL_XSPI_ErrorCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 8005ca6:	e089      	b.n	8005dbc <HAL_XSPI_IRQHandler+0x294>
        /* Nothing to do */
      }
    }
  }
  /* XSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_SM) != 0U) && ((itsource & HAL_XSPI_IT_SM) != 0U))
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01e      	beq.n	8005cf0 <HAL_XSPI_IRQHandler+0x1c8>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d019      	beq.n	8005cf0 <HAL_XSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_SM;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hxspi->Instance->CR & XSPI_CR_APMS) != 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <HAL_XSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_SM | HAL_XSPI_IT_TE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8005ce0:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Status match callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->StatusMatchCallback(hxspi);
#else
    HAL_XSPI_StatusMatchCallback(hxspi);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fb2b 	bl	8006344 <HAL_XSPI_StatusMatchCallback>
 8005cee:	e068      	b.n	8005dc2 <HAL_XSPI_IRQHandler+0x29a>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* XSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TE) != 0U) && ((itsource & HAL_XSPI_IT_TE) != 0U))
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d04e      	beq.n	8005d98 <HAL_XSPI_IRQHandler+0x270>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d049      	beq.n	8005d98 <HAL_XSPI_IRQHandler+0x270>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_TE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    HAL_XSPI_DISABLE_IT(hxspi, (HAL_XSPI_IT_TO | HAL_XSPI_IT_SM | HAL_XSPI_IT_FT | HAL_XSPI_IT_TC | HAL_XSPI_IT_TE));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8005d1a:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_TRANSFER;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d02c      	beq.n	8005d8a <HAL_XSPI_IRQHandler+0x262>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0204 	bic.w	r2, r2, #4
 8005d3e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      hxspi->hdmatx->XferAbortCallback = XSPI_DMAAbortCplt;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d44:	4a21      	ldr	r2, [pc, #132]	@ (8005dcc <HAL_XSPI_IRQHandler+0x2a4>)
 8005d46:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hxspi->hdmatx) != HAL_OK)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fb fa9a 	bl	8001286 <HAL_DMA_Abort_IT>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <HAL_XSPI_IRQHandler+0x23c>
      {
        hxspi->State = HAL_XSPI_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->ErrorCallback(hxspi);
#else
        HAL_XSPI_ErrorCallback(hxspi);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fab4 	bl	80062cc <HAL_XSPI_ErrorCallback>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }

      /* Disable the DMA receive on the DMA side */
      hxspi->hdmarx->XferAbortCallback = XSPI_DMAAbortCplt;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d68:	4a18      	ldr	r2, [pc, #96]	@ (8005dcc <HAL_XSPI_IRQHandler+0x2a4>)
 8005d6a:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hxspi->hdmarx) != HAL_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fb fa88 	bl	8001286 <HAL_DMA_Abort_IT>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d021      	beq.n	8005dc0 <HAL_XSPI_IRQHandler+0x298>
      {
        hxspi->State = HAL_XSPI_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->ErrorCallback(hxspi);
#else
        HAL_XSPI_ErrorCallback(hxspi);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 faa2 	bl	80062cc <HAL_XSPI_ErrorCallback>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 8005d88:	e01a      	b.n	8005dc0 <HAL_XSPI_IRQHandler+0x298>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
      hxspi->ErrorCallback(hxspi);
#else
      HAL_XSPI_ErrorCallback(hxspi);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fa9b 	bl	80062cc <HAL_XSPI_ErrorCallback>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 8005d96:	e013      	b.n	8005dc0 <HAL_XSPI_IRQHandler+0x298>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* XSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TO) != 0U) && ((itsource & HAL_XSPI_IT_TO) != 0U))
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00f      	beq.n	8005dc2 <HAL_XSPI_IRQHandler+0x29a>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <HAL_XSPI_IRQHandler+0x29a>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_TO;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2210      	movs	r2, #16
 8005db2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->TimeOutCallback(hxspi);
#else
    HAL_XSPI_TimeOutCallback(hxspi);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 facf 	bl	8006358 <HAL_XSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dba:	e002      	b.n	8005dc2 <HAL_XSPI_IRQHandler+0x29a>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
 8005dbc:	bf00      	nop
 8005dbe:	e000      	b.n	8005dc2 <HAL_XSPI_IRQHandler+0x29a>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 8005dc0:	bf00      	nop
}
 8005dc2:	bf00      	nop
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	08006679 	.word	0x08006679

08005dd0 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	@ 0x28
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005ddc:	f7fa fff6 	bl	8000dcc <HAL_GetTick>
 8005de0:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de6:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dec:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d104      	bne.n	8005dfe <HAL_XSPI_Command+0x2e>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dfc:	d115      	bne.n	8005e2a <HAL_XSPI_Command+0x5a>
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b14      	cmp	r3, #20
 8005e02:	d107      	bne.n	8005e14 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d00a      	beq.n	8005e2a <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b24      	cmp	r3, #36	@ 0x24
 8005e18:	d15e      	bne.n	8005ed8 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d003      	beq.n	8005e2a <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d156      	bne.n	8005ed8 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2120      	movs	r1, #32
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fc5b 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005e3e:	7ffb      	ldrb	r3, [r7, #31]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d146      	bne.n	8005ed2 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fc85 	bl	800675c <XSPI_ConfigCmd>
 8005e52:	4603      	mov	r3, r0
 8005e54:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8005e56:	7ffb      	ldrb	r3, [r7, #31]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d143      	bne.n	8005ee4 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10e      	bne.n	8005e82 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fc3e 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8005e80:	e030      	b.n	8005ee4 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d103      	bne.n	8005e92 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005e90:	e028      	b.n	8005ee4 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d10b      	bne.n	8005eb2 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9e:	2b24      	cmp	r3, #36	@ 0x24
 8005ea0:	d103      	bne.n	8005eaa <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005ea8:	e01c      	b.n	8005ee4 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2214      	movs	r2, #20
 8005eae:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005eb0:	e018      	b.n	8005ee4 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d114      	bne.n	8005ee4 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebe:	2b14      	cmp	r3, #20
 8005ec0:	d103      	bne.n	8005eca <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005ec8:	e00c      	b.n	8005ee4 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2224      	movs	r2, #36	@ 0x24
 8005ece:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8005ed0:	e008      	b.n	8005ee4 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8005ed6:	e005      	b.n	8005ee4 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2210      	movs	r2, #16
 8005ee0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ee2:	e000      	b.n	8005ee6 <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 8005ee4:	bf00      	nop
  }

  return status;
 8005ee6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	@ 0x28
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005efc:	f7fa ff66 	bl	8000dcc <HAL_GetTick>
 8005f00:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3350      	adds	r3, #80	@ 0x50
 8005f08:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2208      	movs	r2, #8
 8005f18:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f1a:	e057      	b.n	8005fcc <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d14e      	bne.n	8005fc2 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = (uint8_t *)pData;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005f4c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2201      	movs	r2, #1
 8005f56:	2104      	movs	r1, #4
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fbc9 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005f62:	7ffb      	ldrb	r3, [r7, #31]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d113      	bne.n	8005f90 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f80:	1e5a      	subs	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1df      	bne.n	8005f4e <HAL_XSPI_Transmit+0x5e>
 8005f8e:	e000      	b.n	8005f92 <HAL_XSPI_Transmit+0xa2>
          break;
 8005f90:	bf00      	nop

      if (status == HAL_OK)
 8005f92:	7ffb      	ldrb	r3, [r7, #31]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d119      	bne.n	8005fcc <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 fba4 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005fac:	7ffb      	ldrb	r3, [r7, #31]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10c      	bne.n	8005fcc <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8005fc0:	e004      	b.n	8005fcc <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2210      	movs	r2, #16
 8005fca:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8005fcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b08c      	sub	sp, #48	@ 0x30
 8005fda:	af02      	add	r7, sp, #8
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005fe2:	f7fa fef3 	bl	8000dcc <HAL_GetTick>
 8005fe6:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3350      	adds	r3, #80	@ 0x50
 8005fee:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ff6:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006000:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2208      	movs	r2, #8
 8006012:	659a      	str	r2, [r3, #88]	@ 0x58
 8006014:	e07c      	b.n	8006110 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601a:	2b04      	cmp	r3, #4
 800601c:	d172      	bne.n	8006104 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = pData;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800604a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006054:	d104      	bne.n	8006060 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	649a      	str	r2, [r3, #72]	@ 0x48
 800605e:	e011      	b.n	8006084 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006068:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	649a      	str	r2, [r3, #72]	@ 0x48
 8006078:	e004      	b.n	8006084 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	2201      	movs	r2, #1
 800608c:	2106      	movs	r1, #6
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fb2e 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800609a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d114      	bne.n	80060cc <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060bc:	1e5a      	subs	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1dc      	bne.n	8006084 <HAL_XSPI_Receive+0xae>
 80060ca:	e000      	b.n	80060ce <HAL_XSPI_Receive+0xf8>
          break;
 80060cc:	bf00      	nop

      if (status == HAL_OK)
 80060ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d11c      	bne.n	8006110 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	2201      	movs	r2, #1
 80060de:	2102      	movs	r1, #2
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fb05 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 80060ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10d      	bne.n	8006110 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2202      	movs	r2, #2
 80060fa:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2202      	movs	r2, #2
 8006100:	655a      	str	r2, [r3, #84]	@ 0x54
 8006102:	e005      	b.n	8006110 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2210      	movs	r2, #16
 800610e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8006110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006114:	4618      	mov	r0, r3
 8006116:	3728      	adds	r7, #40	@ 0x28
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	@ 0x28
 8006120:	af02      	add	r7, sp, #8
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006128:	f7fa fe50 	bl	8000dcc <HAL_GetTick>
 800612c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006134:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800613e:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006144:	2b04      	cmp	r3, #4
 8006146:	d167      	bne.n	8006218 <HAL_XSPI_AutoPolling+0xfc>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006150:	d162      	bne.n	8006218 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2200      	movs	r2, #0
 800615a:	2120      	movs	r1, #32
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 fac7 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006166:	7ffb      	ldrb	r3, [r7, #31]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d152      	bne.n	8006212 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	6852      	ldr	r2, [r2, #4]
 8006180:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	6912      	ldr	r2, [r2, #16]
 800618c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6899      	ldr	r1, [r3, #8]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	430b      	orrs	r3, r1
 80061a4:	431a      	orrs	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80061ae:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061b8:	d104      	bne.n	80061c4 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	649a      	str	r2, [r3, #72]	@ 0x48
 80061c2:	e011      	b.n	80061e8 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80061cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	649a      	str	r2, [r3, #72]	@ 0x48
 80061dc:	e004      	b.n	80061e8 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2201      	movs	r2, #1
 80061f0:	2108      	movs	r1, #8
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fa7c 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80061fc:	7ffb      	ldrb	r3, [r7, #31]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d110      	bne.n	8006224 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2208      	movs	r2, #8
 8006208:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2202      	movs	r2, #2
 800620e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8006210:	e008      	b.n	8006224 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 8006212:	2302      	movs	r3, #2
 8006214:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8006216:	e005      	b.n	8006224 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2210      	movs	r2, #16
 8006220:	659a      	str	r2, [r3, #88]	@ 0x58
 8006222:	e000      	b.n	8006226 <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 8006224:	bf00      	nop
  }

  return status;
 8006226:	7ffb      	ldrb	r3, [r7, #31]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3720      	adds	r7, #32
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af02      	add	r7, sp, #8
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800623a:	f7fa fdc7 	bl	8000dcc <HAL_GetTick>
 800623e:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	2b04      	cmp	r3, #4
 8006246:	d134      	bne.n	80062b2 <HAL_XSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	2120      	movs	r1, #32
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fa4b 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d12b      	bne.n	80062bc <HAL_XSPI_MemoryMapped+0x8c>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2288      	movs	r2, #136	@ 0x88
 8006268:	655a      	str	r2, [r3, #84]	@ 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b08      	cmp	r3, #8
 8006270:	d111      	bne.n	8006296 <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	6852      	ldr	r2, [r2, #4]
 800627a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2210      	movs	r2, #16
 8006284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006294:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4b0a      	ldr	r3, [pc, #40]	@ (80062c8 <HAL_XSPI_MemoryMapped+0x98>)
 800629e:	4013      	ands	r3, r2
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	e004      	b.n	80062bc <HAL_XSPI_MemoryMapped+0x8c>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2210      	movs	r2, #16
 80062ba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	cffffff7 	.word	0xcffffff7

080062cc <HAL_XSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_ErrorCallback(XSPI_HandleTypeDef *hxspi)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_ErrorCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_XSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_AbortCpltCallback(XSPI_HandleTypeDef *hxspi)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_XSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_FifoThresholdCallback(XSPI_HandleTypeDef *hxspi)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_XSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_CmdCpltCallback(XSPI_HandleTypeDef *hxspi)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_XSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_RxCpltCallback(XSPI_HandleTypeDef *hxspi)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_RxCpltCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_XSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_TxCpltCallback(XSPI_HandleTypeDef *hxspi)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_TxCpltCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_XSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_StatusMatchCallback(XSPI_HandleTypeDef *hxspi)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_XSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_TimeOutCallback(XSPI_HandleTypeDef *hxspi)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_TimeOutCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af02      	add	r7, sp, #8
 8006372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006378:	f7fa fd28 	bl	8000dcc <HAL_GetTick>
 800637c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006382:	2b00      	cmp	r3, #0
 8006384:	d06f      	beq.n	8006466 <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d021      	beq.n	80063d8 <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0204 	bic.w	r2, r2, #4
 80063a2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fa fef0 	bl	800118e <HAL_DMA_Abort>
 80063ae:	4603      	mov	r3, r0
 80063b0:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2204      	movs	r2, #4
 80063bc:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fa fee3 	bl	800118e <HAL_DMA_Abort>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2204      	movs	r2, #4
 80063d6:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d033      	beq.n	800644e <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0202 	orr.w	r2, r2, #2
 80063f4:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2201      	movs	r2, #1
 8006400:	2102      	movs	r1, #2
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f974 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d12e      	bne.n	8006470 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2202      	movs	r2, #2
 8006418:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2200      	movs	r2, #0
 8006424:	2120      	movs	r1, #32
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f962 	bl	80066f0 <XSPI_WaitFlagStateUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d11c      	bne.n	8006470 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006444:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2202      	movs	r2, #2
 800644a:	655a      	str	r2, [r3, #84]	@ 0x54
 800644c:	e010      	b.n	8006470 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800645c:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	655a      	str	r2, [r3, #84]	@ 0x54
 8006464:	e004      	b.n	8006470 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2210      	movs	r2, #16
 800646e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *const hxspi, XSPIM_CfgTypeDef *const pCfg, uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08c      	sub	sp, #48	@ 0x30
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t index;
  uint8_t xspi_enabled = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
 80064b0:	f107 0314 	add.w	r3, r7, #20
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	609a      	str	r2, [r3, #8]
 80064bc:	60da      	str	r2, [r3, #12]
 80064be:	611a      	str	r2, [r3, #16]
 80064c0:	615a      	str	r2, [r3, #20]
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80064c8:	e014      	b.n	80064f4 <HAL_XSPIM_Config+0x5c>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
 80064ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064ce:	3301      	adds	r3, #1
 80064d0:	b2d8      	uxtb	r0, r3
 80064d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80064d6:	f107 0114 	add.w	r1, r7, #20
 80064da:	4613      	mov	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	4619      	mov	r1, r3
 80064e6:	f000 fad3 	bl	8006a90 <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 80064ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064ee:	3301      	adds	r3, #1
 80064f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80064f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d9e6      	bls.n	80064ca <HAL_XSPIM_Config+0x32>
  }

  /********** Disable both XSPI to configure XSPI IO Manager **********/
  if ((XSPI1->CR & XSPI_CR_EN) != 0U)
 80064fc:	4b5b      	ldr	r3, [pc, #364]	@ (800666c <HAL_XSPIM_Config+0x1d4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <HAL_XSPIM_Config+0x88>
  {
    CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
 8006508:	4b58      	ldr	r3, [pc, #352]	@ (800666c <HAL_XSPIM_Config+0x1d4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a57      	ldr	r2, [pc, #348]	@ (800666c <HAL_XSPIM_Config+0x1d4>)
 800650e:	f023 0301 	bic.w	r3, r3, #1
 8006512:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x1U;
 8006514:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }
  if ((XSPI2->CR & XSPI_CR_EN) != 0U)
 8006520:	4b53      	ldr	r3, [pc, #332]	@ (8006670 <HAL_XSPIM_Config+0x1d8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <HAL_XSPIM_Config+0xac>
  {
    CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
 800652c:	4b50      	ldr	r3, [pc, #320]	@ (8006670 <HAL_XSPIM_Config+0x1d8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a4f      	ldr	r2, [pc, #316]	@ (8006670 <HAL_XSPIM_Config+0x1d8>)
 8006532:	f023 0301 	bic.w	r3, r3, #1
 8006536:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x2U;
 8006538:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800653c:	f043 0302 	orr.w	r3, r3, #2
 8006540:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
 8006544:	4b4b      	ldr	r3, [pc, #300]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
 800654a:	4b4a      	ldr	r3, [pc, #296]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	3b01      	subs	r3, #1
 8006558:	041b      	lsls	r3, r3, #16
 800655a:	4946      	ldr	r1, [pc, #280]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 800655c:	4313      	orrs	r3, r2
 800655e:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a41      	ldr	r2, [pc, #260]	@ (800666c <HAL_XSPIM_Config+0x1d4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d110      	bne.n	800658c <HAL_XSPIM_Config+0xf4>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	61bb      	str	r3, [r7, #24]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d027      	beq.n	80065c8 <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 8006578:	4b3e      	ldr	r3, [pc, #248]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	493b      	ldr	r1, [pc, #236]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 8006586:	4313      	orrs	r3, r2
 8006588:	600b      	str	r3, [r1, #0]
 800658a:	e01d      	b.n	80065c8 <HAL_XSPIM_Config+0x130>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a37      	ldr	r2, [pc, #220]	@ (8006670 <HAL_XSPIM_Config+0x1d8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d110      	bne.n	80065b8 <HAL_XSPIM_Config+0x120>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d011      	beq.n	80065c8 <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 80065a4:	4b33      	ldr	r3, [pc, #204]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4930      	ldr	r1, [pc, #192]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	600b      	str	r3, [r1, #0]
 80065b6:	e007      	b.n	80065c8 <HAL_XSPIM_Config+0x130>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065bc:	f043 0208 	orr.w	r2, r3, #8
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	659a      	str	r2, [r3, #88]	@ 0x58
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e04c      	b.n	8006662 <HAL_XSPIM_Config+0x1ca>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80065ce:	e02a      	b.n	8006626 <HAL_XSPIM_Config+0x18e>
  {
    if ((IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort))
 80065d0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	3330      	adds	r3, #48	@ 0x30
 80065de:	443b      	add	r3, r7
 80065e0:	3b18      	subs	r3, #24
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	4613      	mov	r3, r2
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	3330      	adds	r3, #48	@ 0x30
 80065f4:	443b      	add	r3, r7
 80065f6:	3b18      	subs	r3, #24
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4299      	cmp	r1, r3
 80065fc:	d105      	bne.n	800660a <HAL_XSPIM_Config+0x172>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
 80065fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a1c      	ldr	r2, [pc, #112]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 8006604:	f043 0301 	orr.w	r3, r3, #1
 8006608:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d105      	bne.n	800661c <HAL_XSPIM_Config+0x184>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
 8006610:	4b18      	ldr	r3, [pc, #96]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a17      	ldr	r2, [pc, #92]	@ (8006674 <HAL_XSPIM_Config+0x1dc>)
 8006616:	f043 0302 	orr.w	r3, r3, #2
 800661a:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 800661c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006620:	3301      	adds	r3, #1
 8006622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0d0      	beq.n	80065d0 <HAL_XSPIM_Config+0x138>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
 800662e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d005      	beq.n	8006646 <HAL_XSPIM_Config+0x1ae>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
 800663a:	4b0c      	ldr	r3, [pc, #48]	@ (800666c <HAL_XSPIM_Config+0x1d4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a0b      	ldr	r2, [pc, #44]	@ (800666c <HAL_XSPIM_Config+0x1d4>)
 8006640:	f043 0301 	orr.w	r3, r3, #1
 8006644:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
 8006646:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_XSPIM_Config+0x1c6>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
 8006652:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <HAL_XSPIM_Config+0x1d8>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a06      	ldr	r2, [pc, #24]	@ (8006670 <HAL_XSPIM_Config+0x1d8>)
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	6013      	str	r3, [r2, #0]
  }

  return status;
 800665e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
}
 8006662:	4618      	mov	r0, r3
 8006664:	3730      	adds	r7, #48	@ 0x30
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	52005000 	.word	0x52005000
 8006670:	5200a000 	.word	0x5200a000
 8006674:	5200b400 	.word	0x5200b400

08006678 <XSPI_DMAAbortCplt>:
  * @brief  DMA XSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void XSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  XSPI_HandleTypeDef *hxspi = (XSPI_HandleTypeDef *)(hdma->Parent);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006684:	60fb      	str	r3, [r7, #12]
  hxspi->XferCount = 0;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_ABORT)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006694:	d122      	bne.n	80066dc <XSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by XSPI abort */
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d014      	beq.n	80066ce <XSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2202      	movs	r2, #2
 80066aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TC);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80066ba:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0202 	orr.w	r2, r2, #2
 80066ca:	601a      	str	r2, [r3, #0]
    hxspi->ErrorCallback(hxspi);
#else
    HAL_XSPI_ErrorCallback(hxspi);
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
}
 80066cc:	e00c      	b.n	80066e8 <XSPI_DMAAbortCplt+0x70>
      hxspi->State = HAL_XSPI_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2202      	movs	r2, #2
 80066d2:	655a      	str	r2, [r3, #84]	@ 0x54
      HAL_XSPI_AbortCpltCallback(hxspi);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff fe03 	bl	80062e0 <HAL_XSPI_AbortCpltCallback>
}
 80066da:	e005      	b.n	80066e8 <XSPI_DMAAbortCplt+0x70>
    hxspi->State = HAL_XSPI_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2202      	movs	r2, #2
 80066e0:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_XSPI_ErrorCallback(hxspi);
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff fdf2 	bl	80062cc <HAL_XSPI_ErrorCallback>
}
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	4613      	mov	r3, r2
 80066fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006700:	e019      	b.n	8006736 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006708:	d015      	beq.n	8006736 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670a:	f7fa fb5f 	bl	8000dcc <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	429a      	cmp	r2, r3
 8006718:	d302      	bcc.n	8006720 <XSPI_WaitFlagStateUntilTimeout+0x30>
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2202      	movs	r2, #2
 8006724:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672a:	f043 0201 	orr.w	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e00e      	b.n	8006754 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	bf14      	ite	ne
 8006744:	2301      	movne	r3, #1
 8006746:	2300      	moveq	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	429a      	cmp	r2, r3
 8006750:	d1d7      	bne.n	8006702 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 800675c:	b480      	push	{r7}
 800675e:	b089      	sub	sp, #36	@ 0x24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006778:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d114      	bne.n	80067ca <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80067a8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80067b2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80067bc:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	e02c      	b.n	8006824 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d114      	bne.n	80067fc <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80067da:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80067e4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067ee:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e013      	b.n	8006824 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006804:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800680e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006818:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006822:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006830:	2b00      	cmp	r3, #0
 8006832:	d012      	beq.n	800685a <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684c:	4319      	orrs	r1, r3
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006852:	430b      	orrs	r3, r1
 8006854:	431a      	orrs	r2, r3
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f023 021f 	bic.w	r2, r3, #31
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006866:	431a      	orrs	r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006870:	2b00      	cmp	r3, #0
 8006872:	d009      	beq.n	8006888 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d105      	bne.n	8006888 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3a01      	subs	r2, #1
 8006886:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01e      	beq.n	80068ce <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006898:	d10a      	bne.n	80068b0 <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80068aa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 80068ae:	e00e      	b.n	80068ce <XSPI_ConfigCmd+0x172>
    }
    else if(hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b8:	d109      	bne.n	80068ce <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80068ca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 8095 	beq.w	8006a02 <XSPI_ConfigCmd+0x2a6>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d053      	beq.n	8006988 <XSPI_ConfigCmd+0x22c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01e      	beq.n	8006926 <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	4b64      	ldr	r3, [pc, #400]	@ (8006a80 <XSPI_ConfigCmd+0x324>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	68d1      	ldr	r1, [r2, #12]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	6952      	ldr	r2, [r2, #20]
 80068f8:	4311      	orrs	r1, r2
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	6912      	ldr	r2, [r2, #16]
 80068fe:	4311      	orrs	r1, r2
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	69d2      	ldr	r2, [r2, #28]
 8006904:	4311      	orrs	r1, r2
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800690a:	4311      	orrs	r1, r2
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	6a12      	ldr	r2, [r2, #32]
 8006910:	4311      	orrs	r1, r2
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006916:	4311      	orrs	r1, r2
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800691c:	430a      	orrs	r2, r1
 800691e:	431a      	orrs	r2, r3
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e026      	b.n	8006974 <XSPI_ConfigCmd+0x218>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b56      	ldr	r3, [pc, #344]	@ (8006a84 <XSPI_ConfigCmd+0x328>)
 800692c:	4013      	ands	r3, r2
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	68d1      	ldr	r1, [r2, #12]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	6952      	ldr	r2, [r2, #20]
 8006936:	4311      	orrs	r1, r2
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	6912      	ldr	r2, [r2, #16]
 800693c:	4311      	orrs	r1, r2
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	69d2      	ldr	r2, [r2, #28]
 8006942:	4311      	orrs	r1, r2
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006948:	4311      	orrs	r1, r2
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	6a12      	ldr	r2, [r2, #32]
 800694e:	430a      	orrs	r2, r1
 8006950:	431a      	orrs	r2, r3
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800695e:	d109      	bne.n	8006974 <XSPI_ConfigCmd+0x218>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006964:	2b08      	cmp	r3, #8
 8006966:	d105      	bne.n	8006974 <XSPI_ConfigCmd+0x218>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	6992      	ldr	r2, [r2, #24]
 8006984:	649a      	str	r2, [r3, #72]	@ 0x48
 8006986:	e074      	b.n	8006a72 <XSPI_ConfigCmd+0x316>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	d015      	beq.n	80069bc <XSPI_ConfigCmd+0x260>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	4b3c      	ldr	r3, [pc, #240]	@ (8006a88 <XSPI_ConfigCmd+0x32c>)
 8006996:	4013      	ands	r3, r2
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	68d1      	ldr	r1, [r2, #12]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	6952      	ldr	r2, [r2, #20]
 80069a0:	4311      	orrs	r1, r2
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	6912      	ldr	r2, [r2, #16]
 80069a6:	4311      	orrs	r1, r2
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80069ac:	4311      	orrs	r1, r2
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80069b2:	430a      	orrs	r2, r1
 80069b4:	431a      	orrs	r2, r3
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	e01d      	b.n	80069f8 <XSPI_ConfigCmd+0x29c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	68d9      	ldr	r1, [r3, #12]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	4319      	orrs	r1, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	430b      	orrs	r3, r1
 80069d4:	431a      	orrs	r2, r3
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069e2:	d109      	bne.n	80069f8 <XSPI_ConfigCmd+0x29c>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d105      	bne.n	80069f8 <XSPI_ConfigCmd+0x29c>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e037      	b.n	8006a72 <XSPI_ConfigCmd+0x316>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d02e      	beq.n	8006a68 <XSPI_ConfigCmd+0x30c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d015      	beq.n	8006a3e <XSPI_ConfigCmd+0x2e2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b1d      	ldr	r3, [pc, #116]	@ (8006a8c <XSPI_ConfigCmd+0x330>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	69d1      	ldr	r1, [r2, #28]
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a22:	4311      	orrs	r1, r2
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	6a12      	ldr	r2, [r2, #32]
 8006a28:	4311      	orrs	r1, r2
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a2e:	4311      	orrs	r1, r2
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006a34:	430a      	orrs	r2, r1
 8006a36:	431a      	orrs	r2, r3
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	e00e      	b.n	8006a5c <XSPI_ConfigCmd+0x300>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	69d9      	ldr	r1, [r3, #28]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4e:	4319      	orrs	r1, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	430b      	orrs	r3, r1
 8006a56:	431a      	orrs	r2, r3
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	6992      	ldr	r2, [r2, #24]
 8006a64:	649a      	str	r2, [r3, #72]	@ 0x48
 8006a66:	e004      	b.n	8006a72 <XSPI_ConfigCmd+0x316>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2208      	movs	r2, #8
 8006a70:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8006a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3724      	adds	r7, #36	@ 0x24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	f0ffc0c0 	.word	0xf0ffc0c0
 8006a84:	ffffc0c0 	.word	0xffffc0c0
 8006a88:	f0ffffc0 	.word	0xf0ffffc0
 8006a8c:	f0ffc0ff 	.word	0xf0ffc0ff

08006a90 <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *const pCfg)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	6039      	str	r1, [r7, #0]
 8006a9a:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d124      	bne.n	8006aec <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
 8006aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8006b54 <XSPIM_GetConfig+0xc4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d103      	bne.n	8006ab6 <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	605a      	str	r2, [r3, #4]
 8006ab4:	e002      	b.n	8006abc <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 8006abc:	4b25      	ldr	r3, [pc, #148]	@ (8006b54 <XSPIM_GetConfig+0xc4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d003      	beq.n	8006ad0 <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
 8006ace:	e03a      	b.n	8006b46 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
 8006ad0:	4b20      	ldr	r3, [pc, #128]	@ (8006b54 <XSPIM_GetConfig+0xc4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d103      	bne.n	8006ae4 <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2270      	movs	r2, #112	@ 0x70
 8006ae0:	601a      	str	r2, [r3, #0]
}
 8006ae2:	e030      	b.n	8006b46 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2210      	movs	r2, #16
 8006ae8:	601a      	str	r2, [r3, #0]
}
 8006aea:	e02c      	b.n	8006b46 <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
 8006aec:	4b19      	ldr	r3, [pc, #100]	@ (8006b54 <XSPIM_GetConfig+0xc4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
 8006af6:	4b17      	ldr	r3, [pc, #92]	@ (8006b54 <XSPIM_GetConfig+0xc4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	085b      	lsrs	r3, r3, #1
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d003      	beq.n	8006b12 <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	605a      	str	r2, [r3, #4]
 8006b10:	e002      	b.n	8006b18 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2201      	movs	r2, #1
 8006b16:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 8006b18:	4b0e      	ldr	r3, [pc, #56]	@ (8006b54 <XSPIM_GetConfig+0xc4>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b10      	cmp	r3, #16
 8006b22:	d003      	beq.n	8006b2c <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]
}
 8006b2a:	e00c      	b.n	8006b46 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
 8006b2c:	4b09      	ldr	r3, [pc, #36]	@ (8006b54 <XSPIM_GetConfig+0xc4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b34:	2b40      	cmp	r3, #64	@ 0x40
 8006b36:	d103      	bne.n	8006b40 <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2270      	movs	r2, #112	@ 0x70
 8006b3c:	601a      	str	r2, [r3, #0]
}
 8006b3e:	e002      	b.n	8006b46 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2210      	movs	r2, #16
 8006b44:	601a      	str	r2, [r3, #0]
}
 8006b46:	bf00      	nop
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	5200b400 	.word	0x5200b400

08006b58 <BOOT_Application>:
  *  @addtogroup BOOT_XIP_Exported_Functions Boot XIP exported functions
  * @{
  */

BOOTStatus_TypeDef BOOT_Application(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
 8006b5e:	f000 f80e 	bl	8006b7e <MapMemory>
 8006b62:	4603      	mov	r3, r0
 8006b64:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d103      	bne.n	8006b74 <BOOT_Application+0x1c>
  {
    /* jump on the application */
    retr = JumpToApplication();
 8006b6c:	f000 f836 	bl	8006bdc <JumpToApplication>
 8006b70:	4603      	mov	r3, r0
 8006b72:	71fb      	strb	r3, [r7, #7]
  }
  return retr;
 8006b74:	79fb      	ldrb	r3, [r7, #7]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	71fb      	strb	r3, [r7, #7]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	71bb      	strb	r3, [r7, #6]
 8006b8c:	e01d      	b.n	8006bca <MapMemory+0x4c>
  {
    switch(EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE))
 8006b8e:	79bb      	ldrb	r3, [r7, #6]
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f94a 	bl	8006e2c <EXTMEM_MemoryMappedMode>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9e:	d002      	beq.n	8006ba6 <MapMemory+0x28>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00e      	beq.n	8006bc2 <MapMemory+0x44>
 8006ba4:	e00a      	b.n	8006bbc <MapMemory+0x3e>
    {
      case EXTMEM_ERROR_NOTSUPPORTED :
           if (EXTMEM_MEMORY_BOOTXIP ==  index)
 8006ba6:	79bb      	ldrb	r3, [r7, #6]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d102      	bne.n	8006bb2 <MapMemory+0x34>
           {
             retr = BOOT_ERROR_INCOMPATIBLEMEMORY;
 8006bac:	2304      	movs	r3, #4
 8006bae:	71fb      	strb	r3, [r7, #7]
           {
            /* We considers the memory will be not used any more */
            EXTMEM_DeInit(index);
           }
      case EXTMEM_OK:
      break;
 8006bb0:	e007      	b.n	8006bc2 <MapMemory+0x44>
            EXTMEM_DeInit(index);
 8006bb2:	79bb      	ldrb	r3, [r7, #6]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f8ff 	bl	8006db8 <EXTMEM_DeInit>
      break;
 8006bba:	e002      	b.n	8006bc2 <MapMemory+0x44>
      default :
        retr = BOOT_ERROR_MAPPEDMODEFAIL;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	71fb      	strb	r3, [r7, #7]
      break;
 8006bc0:	e000      	b.n	8006bc4 <MapMemory+0x46>
      break;
 8006bc2:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8006bc4:	79bb      	ldrb	r3, [r7, #6]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	71bb      	strb	r3, [r7, #6]
 8006bca:	79bb      	ldrb	r3, [r7, #6]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d9de      	bls.n	8006b8e <MapMemory+0x10>
    }
  }
  return retr;
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	@ 0x28
 8006be0:	af00      	add	r7, sp, #0
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  pFunction JumpToApp;
  uint32_t Application_vector;

  if (EXTMEM_OK != EXTMEM_GetMapAddress(EXTMEM_MEMORY_BOOTXIP, &Application_vector))
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	2000      	movs	r0, #0
 8006be8:	f000 f998 	bl	8006f1c <EXTMEM_GetMapAddress>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <JumpToApplication+0x1a>
  {
      return BOOT_ERROR_INCOMPATIBLEMEMORY;
 8006bf2:	2304      	movs	r3, #4
 8006bf4:	e072      	b.n	8006cdc <JumpToApplication+0x100>
  }

  /* Suspend SysTick */
  HAL_SuspendTick();
 8006bf6:	f7fa f919 	bl	8000e2c <HAL_SuspendTick>
  __ASM volatile ("dsb 0xF":::"memory");
 8006bfa:	f3bf 8f4f 	dsb	sy
}
 8006bfe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c00:	f3bf 8f6f 	isb	sy
}
 8006c04:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8006c06:	4b37      	ldr	r3, [pc, #220]	@ (8006ce4 <JumpToApplication+0x108>)
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	4a36      	ldr	r2, [pc, #216]	@ (8006ce4 <JumpToApplication+0x108>)
 8006c0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006c10:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006c12:	4b34      	ldr	r3, [pc, #208]	@ (8006ce4 <JumpToApplication+0x108>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006c1a:	f3bf 8f4f 	dsb	sy
}
 8006c1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c20:	f3bf 8f6f 	isb	sy
}
 8006c24:	bf00      	nop
}
 8006c26:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006c28:	4b2e      	ldr	r3, [pc, #184]	@ (8006ce4 <JumpToApplication+0x108>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006c30:	f3bf 8f4f 	dsb	sy
}
 8006c34:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8006c36:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce4 <JumpToApplication+0x108>)
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce4 <JumpToApplication+0x108>)
 8006c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c40:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c42:	f3bf 8f4f 	dsb	sy
}
 8006c46:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8006c48:	4b26      	ldr	r3, [pc, #152]	@ (8006ce4 <JumpToApplication+0x108>)
 8006c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c4e:	613b      	str	r3, [r7, #16]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	0b5b      	lsrs	r3, r3, #13
 8006c54:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c58:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	08db      	lsrs	r3, r3, #3
 8006c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c62:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8006c6c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8006c72:	491c      	ldr	r1, [pc, #112]	@ (8006ce4 <JumpToApplication+0x108>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	1e5a      	subs	r2, r3, #1
 8006c7e:	60ba      	str	r2, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1ef      	bne.n	8006c64 <JumpToApplication+0x88>
    } while(sets-- != 0U);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	1e5a      	subs	r2, r3, #1
 8006c88:	60fa      	str	r2, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e5      	bne.n	8006c5a <JumpToApplication+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006c8e:	f3bf 8f4f 	dsb	sy
}
 8006c92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c94:	f3bf 8f6f 	isb	sy
}
 8006c98:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8006c9a:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ca2:	697b      	ldr	r3, [r7, #20]

  /* Disable D-Cache---------------------------------------------------------*/
  SCB_DisableDCache();

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8006ca6:	b672      	cpsid	i
}
 8006ca8:	bf00      	nop
  __disable_irq();

  /* Apply offsets for image location and vector table offset */
  Application_vector += EXTMEM_XIP_IMAGE_OFFSET + EXTMEM_HEADER_OFFSET;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	607b      	str	r3, [r7, #4]

  SCB->VTOR = (uint32_t)Application_vector;
 8006cae:	4a0d      	ldr	r2, [pc, #52]	@ (8006ce4 <JumpToApplication+0x108>)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4u));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	623b      	str	r3, [r7, #32]
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*) Application_vector);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f383 8808 	msr	MSP, r3
}
 8006cc8:	bf00      	nop
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f383 8810 	msr	PRIMASK, r3
}
 8006cd4:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	4798      	blx	r3
  return BOOT_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3728      	adds	r7, #40	@ 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	e000ed00 	.word	0xe000ed00

08006ce8 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8006cf2:	23fb      	movs	r3, #251	@ 0xfb
 8006cf4:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d855      	bhi.n	8006da8 <EXTMEM_Init+0xc0>
  {
    retr = EXTMEM_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8006d00:	4a2c      	ldr	r2, [pc, #176]	@ (8006db4 <EXTMEM_Init+0xcc>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	21ac      	movs	r1, #172	@ 0xac
 8006d06:	fb01 f303 	mul.w	r3, r1, r3
 8006d0a:	4413      	add	r3, r2
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <EXTMEM_Init+0x30>
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d021      	beq.n	8006d5a <EXTMEM_Init+0x72>
 8006d16:	e041      	b.n	8006d9c <EXTMEM_Init+0xb4>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
 8006d18:	4a26      	ldr	r2, [pc, #152]	@ (8006db4 <EXTMEM_Init+0xcc>)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	21ac      	movs	r1, #172	@ 0xac
 8006d1e:	fb01 f303 	mul.w	r3, r1, r3
 8006d22:	4413      	add	r3, r2
 8006d24:	3304      	adds	r3, #4
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	4a22      	ldr	r2, [pc, #136]	@ (8006db4 <EXTMEM_Init+0xcc>)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	21ac      	movs	r1, #172	@ 0xac
 8006d2e:	fb01 f303 	mul.w	r3, r1, r3
 8006d32:	4413      	add	r3, r2
 8006d34:	3308      	adds	r3, #8
 8006d36:	7819      	ldrb	r1, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	22ac      	movs	r2, #172	@ 0xac
 8006d3c:	fb02 f303 	mul.w	r3, r2, r3
 8006d40:	3308      	adds	r3, #8
 8006d42:	4a1c      	ldr	r2, [pc, #112]	@ (8006db4 <EXTMEM_Init+0xcc>)
 8006d44:	4413      	add	r3, r2
 8006d46:	3304      	adds	r3, #4
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	f002 fc7b 	bl	8009644 <EXTMEM_DRIVER_NOR_SFDP_Init>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d026      	beq.n	8006da2 <EXTMEM_Init+0xba>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
 8006d54:	23fd      	movs	r3, #253	@ 0xfd
 8006d56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d58:	e023      	b.n	8006da2 <EXTMEM_Init+0xba>
    }
#endif /* EXTMEM_DRIVER_SDCARD == 1 */
#if EXTMEM_DRIVER_PSRAM == 1
	  case EXTMEM_PSRAM : {
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_PSRAM_OK != EXTMEM_DRIVER_PSRAM_Init(extmem_list_config[MemId].Handle,
 8006d5a:	4a16      	ldr	r2, [pc, #88]	@ (8006db4 <EXTMEM_Init+0xcc>)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	21ac      	movs	r1, #172	@ 0xac
 8006d60:	fb01 f303 	mul.w	r3, r1, r3
 8006d64:	4413      	add	r3, r2
 8006d66:	3304      	adds	r3, #4
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	4a12      	ldr	r2, [pc, #72]	@ (8006db4 <EXTMEM_Init+0xcc>)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	21ac      	movs	r1, #172	@ 0xac
 8006d70:	fb01 f303 	mul.w	r3, r1, r3
 8006d74:	4413      	add	r3, r2
 8006d76:	3308      	adds	r3, #8
 8006d78:	7819      	ldrb	r1, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	22ac      	movs	r2, #172	@ 0xac
 8006d7e:	fb02 f303 	mul.w	r3, r2, r3
 8006d82:	3308      	adds	r3, #8
 8006d84:	4a0b      	ldr	r2, [pc, #44]	@ (8006db4 <EXTMEM_Init+0xcc>)
 8006d86:	4413      	add	r3, r2
 8006d88:	3304      	adds	r3, #4
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	f000 f914 	bl	8006fb8 <EXTMEM_DRIVER_PSRAM_Init>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <EXTMEM_Init+0xbe>
                                                               extmem_list_config[MemId].ConfigType,
                                                               ClockInput,
                                                               &extmem_list_config[MemId].PsramObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
 8006d96:	23fd      	movs	r3, #253	@ 0xfd
 8006d98:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d9a:	e004      	b.n	8006da6 <EXTMEM_Init+0xbe>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8006d9c:	23fe      	movs	r3, #254	@ 0xfe
 8006d9e:	73fb      	strb	r3, [r7, #15]
        break;
 8006da0:	e002      	b.n	8006da8 <EXTMEM_Init+0xc0>
        break;
 8006da2:	bf00      	nop
 8006da4:	e000      	b.n	8006da8 <EXTMEM_Init+0xc0>
        break;
 8006da6:	bf00      	nop
      }
    }
  }
  return retr;
 8006da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	24000108 	.word	0x24000108

08006db8 <EXTMEM_DeInit>:

EXTMEM_StatusTypeDef EXTMEM_DeInit(uint32_t MemId)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8006dc0:	23fb      	movs	r3, #251	@ 0xfb
 8006dc2:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d828      	bhi.n	8006e1c <EXTMEM_DeInit+0x64>
  {
    retr = EXTMEM_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8006dce:	4a16      	ldr	r2, [pc, #88]	@ (8006e28 <EXTMEM_DeInit+0x70>)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	21ac      	movs	r1, #172	@ 0xac
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	4413      	add	r3, r2
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <EXTMEM_DeInit+0x2e>
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d00c      	beq.n	8006dfe <EXTMEM_DeInit+0x46>
 8006de4:	e017      	b.n	8006e16 <EXTMEM_DeInit+0x5e>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* UnInitialize the SFDP memory, the return is always OK no need to test the returned value */
        (void)EXTMEM_DRIVER_NOR_SFDP_DeInit(&extmem_list_config[MemId].NorSfdpObject);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	22ac      	movs	r2, #172	@ 0xac
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	3308      	adds	r3, #8
 8006df0:	4a0d      	ldr	r2, [pc, #52]	@ (8006e28 <EXTMEM_DeInit+0x70>)
 8006df2:	4413      	add	r3, r2
 8006df4:	3304      	adds	r3, #4
 8006df6:	4618      	mov	r0, r3
 8006df8:	f002 fcde 	bl	80097b8 <EXTMEM_DRIVER_NOR_SFDP_DeInit>
        break;
 8006dfc:	e00e      	b.n	8006e1c <EXTMEM_DeInit+0x64>
    }
#endif /* EXTMEM_DRIVER_SDCARD == 1 */
#if EXTMEM_DRIVER_PSRAM == 1
	  case EXTMEM_PSRAM : {
        /* UnInitialize the PSRAM memory, the return is always OK no need to test the returned value */
        (void)EXTMEM_DRIVER_PSRAM_DeInit(&extmem_list_config[MemId].PsramObject);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	22ac      	movs	r2, #172	@ 0xac
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	3308      	adds	r3, #8
 8006e08:	4a07      	ldr	r2, [pc, #28]	@ (8006e28 <EXTMEM_DeInit+0x70>)
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f938 	bl	8007084 <EXTMEM_DRIVER_PSRAM_DeInit>
        break;
 8006e14:	e002      	b.n	8006e1c <EXTMEM_DeInit+0x64>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
      default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8006e16:	23fe      	movs	r3, #254	@ 0xfe
 8006e18:	73fb      	strb	r3, [r7, #15]
        break;
 8006e1a:	bf00      	nop
      }
    }
  }
  return retr;
 8006e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	24000108 	.word	0x24000108

08006e2c <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8006e38:	23fb      	movs	r3, #251	@ 0xfb
 8006e3a:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d864      	bhi.n	8006f0c <EXTMEM_MemoryMappedMode+0xe0>
  {
    retr = EXTMEM_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8006e46:	4a34      	ldr	r2, [pc, #208]	@ (8006f18 <EXTMEM_MemoryMappedMode+0xec>)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	21ac      	movs	r1, #172	@ 0xac
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d050      	beq.n	8006efa <EXTMEM_MemoryMappedMode+0xce>
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	dc51      	bgt.n	8006f00 <EXTMEM_MemoryMappedMode+0xd4>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <EXTMEM_MemoryMappedMode+0x3a>
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d025      	beq.n	8006eb0 <EXTMEM_MemoryMappedMode+0x84>
 8006e64:	e04c      	b.n	8006f00 <EXTMEM_MemoryMappedMode+0xd4>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
 8006e66:	78fb      	ldrb	r3, [r7, #3]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d110      	bne.n	8006e8e <EXTMEM_MemoryMappedMode+0x62>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	22ac      	movs	r2, #172	@ 0xac
 8006e70:	fb02 f303 	mul.w	r3, r2, r3
 8006e74:	3308      	adds	r3, #8
 8006e76:	4a28      	ldr	r2, [pc, #160]	@ (8006f18 <EXTMEM_MemoryMappedMode+0xec>)
 8006e78:	4413      	add	r3, r2
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f002 fcaa 	bl	80097d6 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
 8006e82:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d03e      	beq.n	8006f06 <EXTMEM_MemoryMappedMode+0xda>
          {
            return EXTMEM_ERROR_DRIVER;
 8006e88:	f06f 0302 	mvn.w	r3, #2
 8006e8c:	e040      	b.n	8006f10 <EXTMEM_MemoryMappedMode+0xe4>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	22ac      	movs	r2, #172	@ 0xac
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	3308      	adds	r3, #8
 8006e98:	4a1f      	ldr	r2, [pc, #124]	@ (8006f18 <EXTMEM_MemoryMappedMode+0xec>)
 8006e9a:	4413      	add	r3, r2
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f002 fcba 	bl	8009818 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
 8006ea4:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d02d      	beq.n	8006f06 <EXTMEM_MemoryMappedMode+0xda>
          {
            return EXTMEM_ERROR_DRIVER;
 8006eaa:	f06f 0302 	mvn.w	r3, #2
 8006eae:	e02f      	b.n	8006f10 <EXTMEM_MemoryMappedMode+0xe4>
        break;
      }
#endif /* EXTMEM_DRIVER_NOR_SFDP == 1 */
#if EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM : {
        if (EXTMEM_ENABLE == State)
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d110      	bne.n	8006ed8 <EXTMEM_MemoryMappedMode+0xac>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_PSRAM_OK !=
              EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode(&extmem_list_config[MemId].PsramObject))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	22ac      	movs	r2, #172	@ 0xac
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	4a15      	ldr	r2, [pc, #84]	@ (8006f18 <EXTMEM_MemoryMappedMode+0xec>)
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f8e9 	bl	800709e <EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode>
 8006ecc:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_PSRAM_OK !=
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d01b      	beq.n	8006f0a <EXTMEM_MemoryMappedMode+0xde>
          {
            return EXTMEM_ERROR_DRIVER;
 8006ed2:	f06f 0302 	mvn.w	r3, #2
 8006ed6:	e01b      	b.n	8006f10 <EXTMEM_MemoryMappedMode+0xe4>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_PSRAM_OK !=
              EXTMEM_DRIVER_PSRAM_Disable_MemoryMappedMode(&extmem_list_config[MemId].PsramObject))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	22ac      	movs	r2, #172	@ 0xac
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8006f18 <EXTMEM_MemoryMappedMode+0xec>)
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f909 	bl	8007100 <EXTMEM_DRIVER_PSRAM_Disable_MemoryMappedMode>
 8006eee:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_PSRAM_OK !=
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <EXTMEM_MemoryMappedMode+0xde>
          {
            return EXTMEM_ERROR_DRIVER;
 8006ef4:	f06f 0302 	mvn.w	r3, #2
 8006ef8:	e00a      	b.n	8006f10 <EXTMEM_MemoryMappedMode+0xe4>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
 8006efa:	23ff      	movs	r3, #255	@ 0xff
 8006efc:	73fb      	strb	r3, [r7, #15]
    break;
 8006efe:	e005      	b.n	8006f0c <EXTMEM_MemoryMappedMode+0xe0>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8006f00:	23fe      	movs	r3, #254	@ 0xfe
 8006f02:	73fb      	strb	r3, [r7, #15]
        break;
 8006f04:	e002      	b.n	8006f0c <EXTMEM_MemoryMappedMode+0xe0>
        break;
 8006f06:	bf00      	nop
 8006f08:	e000      	b.n	8006f0c <EXTMEM_MemoryMappedMode+0xe0>
        break;
 8006f0a:	bf00      	nop
      }
    }
  }
  return retr;
 8006f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	24000108 	.word	0x24000108

08006f1c <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8006f26:	23fb      	movs	r3, #251	@ 0xfb
 8006f28:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d834      	bhi.n	8006f9a <EXTMEM_GetMapAddress+0x7e>
  {
    retr = EXTMEM_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8006f34:	4a1d      	ldr	r2, [pc, #116]	@ (8006fac <EXTMEM_GetMapAddress+0x90>)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	21ac      	movs	r1, #172	@ 0xac
 8006f3a:	fb01 f303 	mul.w	r3, r1, r3
 8006f3e:	4413      	add	r3, r2
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <EXTMEM_GetMapAddress+0x2e>
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d124      	bne.n	8006f94 <EXTMEM_GetMapAddress+0x78>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)       
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
 8006f4a:	4a18      	ldr	r2, [pc, #96]	@ (8006fac <EXTMEM_GetMapAddress+0x90>)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	21ac      	movs	r1, #172	@ 0xac
 8006f50:	fb01 f303 	mul.w	r3, r1, r3
 8006f54:	4413      	add	r3, r2
 8006f56:	3304      	adds	r3, #4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a14      	ldr	r2, [pc, #80]	@ (8006fb0 <EXTMEM_GetMapAddress+0x94>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d104      	bne.n	8006f6c <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 8006f68:	601a      	str	r2, [r3, #0]
       else
       { 
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
 8006f6a:	e016      	b.n	8006f9a <EXTMEM_GetMapAddress+0x7e>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
 8006f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8006fac <EXTMEM_GetMapAddress+0x90>)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	21ac      	movs	r1, #172	@ 0xac
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	4413      	add	r3, r2
 8006f78:	3304      	adds	r3, #4
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a0d      	ldr	r2, [pc, #52]	@ (8006fb4 <EXTMEM_GetMapAddress+0x98>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d104      	bne.n	8006f8e <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8006f8a:	601a      	str	r2, [r3, #0]
       break;
 8006f8c:	e005      	b.n	8006f9a <EXTMEM_GetMapAddress+0x7e>
          retr = EXTMEM_ERROR_DRIVER;
 8006f8e:	23fd      	movs	r3, #253	@ 0xfd
 8006f90:	73fb      	strb	r3, [r7, #15]
       break;
 8006f92:	e002      	b.n	8006f9a <EXTMEM_GetMapAddress+0x7e>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */      
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8006f94:	23fe      	movs	r3, #254	@ 0xfe
 8006f96:	73fb      	strb	r3, [r7, #15]
        break;
 8006f98:	bf00      	nop
      }
    }
  }
  return retr;
 8006f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	24000108 	.word	0x24000108
 8006fb0:	52005000 	.word	0x52005000
 8006fb4:	5200a000 	.word	0x5200a000

08006fb8 <EXTMEM_DRIVER_PSRAM_Init>:
  */

EXTMEM_DRIVER_PSRAM_StatusTypeDef EXTMEM_DRIVER_PSRAM_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config,
                                                           uint32_t ClockInput,
                                                           EXTMEM_DRIVER_PSRAM_ObjectTypeDef *PsramObject)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_PSRAM_StatusTypeDef retr = EXTMEM_DRIVER_PSRAM_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	77fb      	strb	r3, [r7, #31]

  /* initialize the instance */
  DEBUG_STR("initialize the instance")
  
  /* Initialize XSPI low layer */
  (void)SAL_XSPI_Init(&PsramObject->psram_private.SALObject, Peripheral);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68f9      	ldr	r1, [r7, #12]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 f958 	bl	8007286 <SAL_XSPI_Init>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&PsramObject->psram_private.SALObject);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fe4d 	bl	8007c78 <SAL_XSPI_DisableMapMode>

  /* Set the frequency prescaler */
  DEBUG_STR("set memory speed according freqIn and freqMax supported by the memory")
  if (HAL_OK != SAL_XSPI_SetClock(&PsramObject->psram_private.SALObject, ClockInput, PsramObject->psram_public.FreqMax, &ClockOut))
 8006fde:	6838      	ldr	r0, [r7, #0]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006fe4:	f107 0318 	add.w	r3, r7, #24
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	f000 f90d 	bl	8007208 <SAL_XSPI_SetClock>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <EXTMEM_DRIVER_PSRAM_Init+0x42>
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR;
 8006ff4:	2380      	movs	r3, #128	@ 0x80
 8006ff6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ff8:	e03e      	b.n	8007078 <EXTMEM_DRIVER_PSRAM_Init+0xc0>
  }

  /* Set the memory size */
  DEBUG_STR("set memory size according")
  (void)SAL_XSPI_MemoryConfig(&PsramObject->psram_private.SALObject, PARAM_FLASHSIZE, &PsramObject->psram_public.MemorySize);
 8006ffa:	6838      	ldr	r0, [r7, #0]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	3354      	adds	r3, #84	@ 0x54
 8007000:	461a      	mov	r2, r3
 8007002:	2104      	movs	r1, #4
 8007004:	f000 f972 	bl	80072ec <SAL_XSPI_MemoryConfig>

  /* Set the memory size */
  DEBUG_STR("set xspi link config")
  linkvalue = PHY_LINK_RAM8;
 8007008:	230a      	movs	r3, #10
 800700a:	75fb      	strb	r3, [r7, #23]
  (void)SAL_XSPI_MemoryConfig(&PsramObject->psram_private.SALObject, PARAM_PHY_LINK, &linkvalue);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	f107 0217 	add.w	r2, r7, #23
 8007012:	2100      	movs	r1, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f000 f969 	bl	80072ec <SAL_XSPI_MemoryConfig>

  /* Set the configuration to perform register operation */
  (void)SAL_XSPI_MemoryConfig(&PsramObject->psram_private.SALObject, PARAM_DUMMY_CYCLES, &PsramObject->psram_public.REG_DummyCycle);
 800701a:	6838      	ldr	r0, [r7, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	3369      	adds	r3, #105	@ 0x69
 8007020:	461a      	mov	r2, r3
 8007022:	2101      	movs	r1, #1
 8007024:	f000 f962 	bl	80072ec <SAL_XSPI_MemoryConfig>

  /* Execute the command sequence */
  for (uint8_t command_index = 0u; command_index < PsramObject->psram_public.NumberOfConfig; command_index++)
 8007028:	2300      	movs	r3, #0
 800702a:	77bb      	strb	r3, [r7, #30]
 800702c:	e00d      	b.n	800704a <EXTMEM_DRIVER_PSRAM_Init+0x92>
  {
    retr = PSRAM_ExecuteCommand(PsramObject, command_index);
 800702e:	7fbb      	ldrb	r3, [r7, #30]
 8007030:	4619      	mov	r1, r3
 8007032:	6838      	ldr	r0, [r7, #0]
 8007034:	f000 f879 	bl	800712a <PSRAM_ExecuteCommand>
 8007038:	4603      	mov	r3, r0
 800703a:	77fb      	strb	r3, [r7, #31]
    if (retr != EXTMEM_DRIVER_PSRAM_OK)
 800703c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d118      	bne.n	8007076 <EXTMEM_DRIVER_PSRAM_Init+0xbe>
  for (uint8_t command_index = 0u; command_index < PsramObject->psram_public.NumberOfConfig; command_index++)
 8007044:	7fbb      	ldrb	r3, [r7, #30]
 8007046:	3301      	adds	r3, #1
 8007048:	77bb      	strb	r3, [r7, #30]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007050:	7fba      	ldrb	r2, [r7, #30]
 8007052:	429a      	cmp	r2, r3
 8007054:	d3eb      	bcc.n	800702e <EXTMEM_DRIVER_PSRAM_Init+0x76>
    {
      goto error;
    }
  }

  switch(Config)
 8007056:	7afb      	ldrb	r3, [r7, #11]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d109      	bne.n	8007070 <EXTMEM_DRIVER_PSRAM_Init+0xb8>
  {
  case EXTMEM_LINK_CONFIG_16LINES:
    linkvalue = PHY_LINK_RAM16;
 800705c:	230b      	movs	r3, #11
 800705e:	75fb      	strb	r3, [r7, #23]
    (void)SAL_XSPI_MemoryConfig(&PsramObject->psram_private.SALObject, PARAM_PHY_LINK, &linkvalue);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	f107 0217 	add.w	r2, r7, #23
 8007066:	2100      	movs	r1, #0
 8007068:	4618      	mov	r0, r3
 800706a:	f000 f93f 	bl	80072ec <SAL_XSPI_MemoryConfig>
    break;
 800706e:	e003      	b.n	8007078 <EXTMEM_DRIVER_PSRAM_Init+0xc0>

  case EXTMEM_LINK_CONFIG_8LINES:
  default:
    retr = EXTMEM_DRIVER_PSRAM_ERROR;
 8007070:	2380      	movs	r3, #128	@ 0x80
 8007072:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007074:	e000      	b.n	8007078 <EXTMEM_DRIVER_PSRAM_Init+0xc0>
      goto error;
 8007076:	bf00      	nop
    break;
  }

error:
  return retr;
 8007078:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3720      	adds	r7, #32
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <EXTMEM_DRIVER_PSRAM_DeInit>:

EXTMEM_DRIVER_PSRAM_StatusTypeDef EXTMEM_DRIVER_PSRAM_DeInit(EXTMEM_DRIVER_PSRAM_ObjectTypeDef *PsramObject)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&PsramObject->psram_private.SALObject);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fdf2 	bl	8007c78 <SAL_XSPI_DisableMapMode>
  return EXTMEM_DRIVER_PSRAM_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode>:

EXTMEM_DRIVER_PSRAM_StatusTypeDef EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode(EXTMEM_DRIVER_PSRAM_ObjectTypeDef *PsramObject)
{
 800709e:	b590      	push	{r4, r7, lr}
 80070a0:	b087      	sub	sp, #28
 80070a2:	af02      	add	r7, sp, #8
 80070a4:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_PSRAM_StatusTypeDef retr = EXTMEM_DRIVER_PSRAM_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]

  /* configure the read wrap mode */
  if (HAL_OK != SAL_XSPI_ConfigureWrappMode(&PsramObject->psram_private.SALObject, 
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 106d 	ldrb.w	r1, [r3, #109]	@ 0x6d
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80070b8:	461a      	mov	r2, r3
 80070ba:	f000 fd2a 	bl	8007b12 <SAL_XSPI_ConfigureWrappMode>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode+0x2a>
                                            PsramObject->psram_public.WrapRead_command, 
                                            PsramObject->psram_public.Write_DummyCycle))
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_MAP_ENABLE;
 80070c4:	23fb      	movs	r3, #251	@ 0xfb
 80070c6:	73fb      	strb	r3, [r7, #15]
  }
   
  /* launch the memory mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&PsramObject->psram_private.SALObject, 
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 206e 	ldrb.w	r2, [r3, #110]	@ 0x6e
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 406a 	ldrb.w	r4, [r3, #106]	@ 0x6a
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	4623      	mov	r3, r4
 80070e6:	f000 fd50 	bl	8007b8a <SAL_XSPI_EnableMapMode>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <EXTMEM_DRIVER_PSRAM_Enable_MemoryMappedMode+0x56>
                                       PsramObject->psram_public.Read_command, 
                                       PsramObject->psram_public.Read_DummyCycle,
                                       PsramObject->psram_public.Write_command, 
                                       PsramObject->psram_public.Write_DummyCycle))
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_MAP_ENABLE;
 80070f0:	23fb      	movs	r3, #251	@ 0xfb
 80070f2:	73fb      	strb	r3, [r7, #15]
  }
  return retr;
 80070f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd90      	pop	{r4, r7, pc}

08007100 <EXTMEM_DRIVER_PSRAM_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_PSRAM_StatusTypeDef EXTMEM_DRIVER_PSRAM_Disable_MemoryMappedMode(EXTMEM_DRIVER_PSRAM_ObjectTypeDef *PsramObject)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_PSRAM_StatusTypeDef retr = EXTMEM_DRIVER_PSRAM_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]

  /* launch mass erase command */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&PsramObject->psram_private.SALObject))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fdb2 	bl	8007c78 <SAL_XSPI_DisableMapMode>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <EXTMEM_DRIVER_PSRAM_Disable_MemoryMappedMode+0x1e>
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_MAP_DISABLE;
 800711a:	23fa      	movs	r3, #250	@ 0xfa
 800711c:	73fb      	strb	r3, [r7, #15]
  }
  return retr;
 800711e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <PSRAM_ExecuteCommand>:
 * @param PsramObject psram memory object
 * @param Index command index
 * @return @ref EXTMEM_DRIVER_PSRAM_StatusTypeDef
 **/
EXTMEM_DRIVER_PSRAM_StatusTypeDef PSRAM_ExecuteCommand(EXTMEM_DRIVER_PSRAM_ObjectTypeDef *PsramObject, uint8_t Index)
{
 800712a:	b590      	push	{r4, r7, lr}
 800712c:	b087      	sub	sp, #28
 800712e:	af02      	add	r7, sp, #8
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  EXTMEM_DRIVER_PSRAM_StatusTypeDef retr = EXTMEM_DRIVER_PSRAM_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
  uint8_t regval[2];

  if (PsramObject->psram_public.ReadREGSize > 2u)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8007140:	2b02      	cmp	r3, #2
 8007142:	d902      	bls.n	800714a <PSRAM_ExecuteCommand+0x20>
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_REGSIZE;
 8007144:	23f9      	movs	r3, #249	@ 0xf9
 8007146:	73fb      	strb	r3, [r7, #15]
    goto error;
 8007148:	e058      	b.n	80071fc <PSRAM_ExecuteCommand+0xd2>
  }

  if (HAL_OK != SAL_XSPI_Read(&PsramObject->psram_private.SALObject, 
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 4066 	ldrb.w	r4, [r3, #102]	@ 0x66
                              PsramObject->psram_public.ReadREG,
                              PsramObject->psram_public.config[Index].REGAddress, 
 8007152:	78fa      	ldrb	r2, [r7, #3]
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	4613      	mov	r3, r2
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	4413      	add	r3, r2
 800715c:	440b      	add	r3, r1
 800715e:	335f      	adds	r3, #95	@ 0x5f
 8007160:	781b      	ldrb	r3, [r3, #0]
  if (HAL_OK != SAL_XSPI_Read(&PsramObject->psram_private.SALObject, 
 8007162:	4619      	mov	r1, r3
                              regval, PsramObject->psram_public.ReadREGSize))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
  if (HAL_OK != SAL_XSPI_Read(&PsramObject->psram_private.SALObject, 
 800716a:	461a      	mov	r2, r3
 800716c:	f107 030c 	add.w	r3, r7, #12
 8007170:	9200      	str	r2, [sp, #0]
 8007172:	460a      	mov	r2, r1
 8007174:	4621      	mov	r1, r4
 8007176:	f000 faba 	bl	80076ee <SAL_XSPI_Read>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <PSRAM_ExecuteCommand+0x5c>
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_READREG;
 8007180:	23ff      	movs	r3, #255	@ 0xff
 8007182:	73fb      	strb	r3, [r7, #15]
    goto error;
 8007184:	e03a      	b.n	80071fc <PSRAM_ExecuteCommand+0xd2>
  }

  MODIFY_REG(regval[0], 
 8007186:	7b3b      	ldrb	r3, [r7, #12]
 8007188:	b259      	sxtb	r1, r3
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4613      	mov	r3, r2
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	4413      	add	r3, r2
 8007194:	4403      	add	r3, r0
 8007196:	335d      	adds	r3, #93	@ 0x5d
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	b25b      	sxtb	r3, r3
 800719c:	43db      	mvns	r3, r3
 800719e:	b25b      	sxtb	r3, r3
 80071a0:	400b      	ands	r3, r1
 80071a2:	b259      	sxtb	r1, r3
 80071a4:	78fa      	ldrb	r2, [r7, #3]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	4413      	add	r3, r2
 80071ae:	4403      	add	r3, r0
 80071b0:	335e      	adds	r3, #94	@ 0x5e
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	b25b      	sxtb	r3, r3
 80071b6:	430b      	orrs	r3, r1
 80071b8:	b25b      	sxtb	r3, r3
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	733b      	strb	r3, [r7, #12]
             PsramObject->psram_public.config[Index].WriteMask, 
             PsramObject->psram_public.config[Index].WriteValue);

  if (HAL_OK != SAL_XSPI_Write(&PsramObject->psram_private.SALObject, 
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 4067 	ldrb.w	r4, [r3, #103]	@ 0x67
                               PsramObject->psram_public.WriteREG,
                               PsramObject->psram_public.config[Index].REGAddress, 
 80071c6:	78fa      	ldrb	r2, [r7, #3]
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	4613      	mov	r3, r2
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	4413      	add	r3, r2
 80071d0:	440b      	add	r3, r1
 80071d2:	335f      	adds	r3, #95	@ 0x5f
 80071d4:	781b      	ldrb	r3, [r3, #0]
  if (HAL_OK != SAL_XSPI_Write(&PsramObject->psram_private.SALObject, 
 80071d6:	4619      	mov	r1, r3
                               regval, PsramObject->psram_public.ReadREGSize))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
  if (HAL_OK != SAL_XSPI_Write(&PsramObject->psram_private.SALObject, 
 80071de:	461a      	mov	r2, r3
 80071e0:	f107 030c 	add.w	r3, r7, #12
 80071e4:	9200      	str	r2, [sp, #0]
 80071e6:	460a      	mov	r2, r1
 80071e8:	4621      	mov	r1, r4
 80071ea:	f000 fae8 	bl	80077be <SAL_XSPI_Write>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <PSRAM_ExecuteCommand+0xd0>
  {
    retr = EXTMEM_DRIVER_PSRAM_ERROR_WRITEREG;
 80071f4:	23fe      	movs	r3, #254	@ 0xfe
 80071f6:	73fb      	strb	r3, [r7, #15]
    goto error;
 80071f8:	e000      	b.n	80071fc <PSRAM_ExecuteCommand+0xd2>
  }

error:
 80071fa:	bf00      	nop
  return retr;
 80071fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	bd90      	pop	{r4, r7, pc}

08007208 <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	75fb      	strb	r3, [r7, #23]
 8007224:	e028      	b.n	8007278 <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	fbb2 f3f3 	udiv	r3, r2, r3
 800722e:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00d      	beq.n	8007252 <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	fbb2 f2f3 	udiv	r2, r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d302      	bcc.n	8007252 <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	3b01      	subs	r3, #1
 8007250:	613b      	str	r3, [r7, #16]
    divider++;
    divider++;
#endif

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	3301      	adds	r3, #1
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	fbb2 f2f3 	udiv	r2, r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCK::"); DEBUG_PARAM_INT(divider); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	430a      	orrs	r2, r1
 8007276:	60da      	str	r2, [r3, #12]
  }

  return retr;
 8007278:	7dfb      	ldrb	r3, [r7, #23]
}
 800727a:	4618      	mov	r0, r3
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b096      	sub	sp, #88	@ 0x58
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
 8007290:	f107 030c 	add.w	r3, r7, #12
 8007294:	224c      	movs	r2, #76	@ 0x4c
 8007296:	2100      	movs	r1, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f002 fad3 	bl	8009844 <memset>
 800729e:	235a      	movs	r3, #90	@ 0x5a
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	2301      	movs	r3, #1
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80072aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80072b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80072b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b8:	2308      	movs	r3, #8
 80072ba:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3304      	adds	r3, #4
 80072c6:	f107 010c 	add.w	r1, r7, #12
 80072ca:	224c      	movs	r2, #76	@ 0x4c
 80072cc:	4618      	mov	r0, r3
 80072ce:	f002 fae5 	bl	800989c <memcpy>
  SalXspi->CommandExtension = 0;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3758      	adds	r7, #88	@ 0x58
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParmetersType, void *ParamVal)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b098      	sub	sp, #96	@ 0x60
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	460b      	mov	r3, r1
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f107 0010 	add.w	r0, r7, #16
 8007306:	3304      	adds	r3, #4
 8007308:	224c      	movs	r2, #76	@ 0x4c
 800730a:	4619      	mov	r1, r3
 800730c:	f002 fac6 	bl	800989c <memcpy>

  switch (ParmetersType) {
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	2b04      	cmp	r3, #4
 8007314:	f200 812a 	bhi.w	800756c <SAL_XSPI_MemoryConfig+0x280>
 8007318:	a201      	add	r2, pc, #4	@ (adr r2, 8007320 <SAL_XSPI_MemoryConfig+0x34>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007335 	.word	0x08007335
 8007324:	0800755d 	.word	0x0800755d
 8007328:	0800752f 	.word	0x0800752f
 800732c:	0800756d 	.word	0x0800756d
 8007330:	08007537 	.word	0x08007537
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007344:	2b0b      	cmp	r3, #11
 8007346:	f200 80ed 	bhi.w	8007524 <SAL_XSPI_MemoryConfig+0x238>
 800734a:	a201      	add	r2, pc, #4	@ (adr r2, 8007350 <SAL_XSPI_MemoryConfig+0x64>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	08007381 	.word	0x08007381
 8007354:	08007381 	.word	0x08007381
 8007358:	08007381 	.word	0x08007381
 800735c:	08007381 	.word	0x08007381
 8007360:	080073b1 	.word	0x080073b1
 8007364:	080073b1 	.word	0x080073b1
 8007368:	080073e1 	.word	0x080073e1
 800736c:	08007415 	.word	0x08007415
 8007370:	08007445 	.word	0x08007445
 8007374:	0800747b 	.word	0x0800747b
 8007378:	080074b1 	.word	0x080074b1
 800737c:	080074eb 	.word	0x080074eb
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 8007380:	2301      	movs	r3, #1
 8007382:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8007384:	2300      	movs	r3, #0
 8007386:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8007388:	2300      	movs	r3, #0
 800738a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
 800738c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007390:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 8007392:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007396:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8007398:	2300      	movs	r3, #0
 800739a:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
 800739c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 80073a6:	2308      	movs	r3, #8
 80073a8:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80073ae:	e0bd      	b.n	800752c <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 80073b0:	2303      	movs	r3, #3
 80073b2:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 80073b4:	2300      	movs	r3, #0
 80073b6:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80073b8:	2300      	movs	r3, #0
 80073ba:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 80073bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80073c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 80073c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80073ca:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
 80073cc:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80073d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
 80073d6:	2306      	movs	r3, #6
 80073d8:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 80073da:	2300      	movs	r3, #0
 80073dc:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80073de:	e0a5      	b.n	800752c <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 80073e0:	2303      	movs	r3, #3
 80073e2:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 80073e4:	2300      	movs	r3, #0
 80073e6:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 80073e8:	2308      	movs	r3, #8
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 80073ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80073f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 80073f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80073f6:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80073f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80073fc:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
 80073fe:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8007402:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 8007404:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007408:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
 800740a:	2306      	movs	r3, #6
 800740c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800740e:	2300      	movs	r3, #0
 8007410:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8007412:	e08b      	b.n	800752c <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 8007414:	2301      	movs	r3, #1
 8007416:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8007418:	2300      	movs	r3, #0
 800741a:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800741c:	2300      	movs	r3, #0
 800741e:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 8007420:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007424:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 8007426:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800742a:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 800742c:	2300      	movs	r3, #0
 800742e:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 8007430:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007434:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 8007436:	2300      	movs	r3, #0
 8007438:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 800743a:	2308      	movs	r3, #8
 800743c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800743e:	2300      	movs	r3, #0
 8007440:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8007442:	e073      	b.n	800752c <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
 8007444:	2304      	movs	r3, #4
 8007446:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8007448:	2300      	movs	r3, #0
 800744a:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800744c:	2300      	movs	r3, #0
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 8007450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007454:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 8007456:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800745a:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800745c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 8007462:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007466:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 8007468:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800746c:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 800746e:	2308      	movs	r3, #8
 8007470:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
 8007472:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007476:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8007478:	e058      	b.n	800752c <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
 800747a:	2304      	movs	r3, #4
 800747c:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
 800747e:	2310      	movs	r3, #16
 8007480:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 8007482:	2308      	movs	r3, #8
 8007484:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 8007486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800748a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 800748c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007490:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8007492:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007496:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 8007498:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800749c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 800749e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074a2:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
 80074a4:	2314      	movs	r3, #20
 80074a6:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
 80074a8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80074ac:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80074ae:	e03d      	b.n	800752c <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 80074b0:	2304      	movs	r3, #4
 80074b2:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 80074b4:	2300      	movs	r3, #0
 80074b6:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80074b8:	2300      	movs	r3, #0
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 80074bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 80074c2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80074c6:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80074c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
 80074d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80074d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 80074d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074dc:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
 80074de:	230a      	movs	r3, #10
 80074e0:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
 80074e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80074e6:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80074e8:	e020      	b.n	800752c <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 80074ea:	2304      	movs	r3, #4
 80074ec:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 80074ee:	2300      	movs	r3, #0
 80074f0:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 80074f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 80074fc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007500:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8007502:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8007508:	2300      	movs	r3, #0
 800750a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
 800750c:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
 8007510:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8007512:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007516:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
 8007518:	230a      	movs	r3, #10
 800751a:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
 800751c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007520:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8007522:	e003      	b.n	800752c <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
 800752a:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
 800752c:	e022      	b.n	8007574 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BITS: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BITS"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 800752e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007532:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
 8007534:	e01e      	b.n	8007574 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800754a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800754e:	041a      	lsls	r2, r3, #16
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	609a      	str	r2, [r3, #8]
    break;
 800755a:	e00b      	b.n	8007574 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
 8007564:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8007568:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
 800756a:	e003      	b.n	8007574 <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
 8007572:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3304      	adds	r3, #4
 8007578:	f107 0110 	add.w	r1, r7, #16
 800757c:	224c      	movs	r2, #76	@ 0x4c
 800757e:	4618      	mov	r0, r3
 8007580:	f002 f98c 	bl	800989c <memcpy>
  return retr;
 8007584:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007588:	4618      	mov	r0, r3
 800758a:	3760      	adds	r7, #96	@ 0x60
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b098      	sub	sp, #96	@ 0x60
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f107 0010 	add.w	r0, r7, #16
 80075a4:	3304      	adds	r3, #4
 80075a6:	224c      	movs	r2, #76	@ 0x4c
 80075a8:	4619      	mov	r1, r3
 80075aa:	f002 f977 	bl	800989c <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x5A);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075b4:	6a39      	ldr	r1, [r7, #32]
 80075b6:	225a      	movs	r2, #90	@ 0x5a
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 fba6 	bl	8007d0a <XSPI_FormatCommand>
 80075be:	4603      	mov	r3, r0
 80075c0:	61bb      	str	r3, [r7, #24]

  s_command.Address     = Address;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles = SalXspi->SFDPDummyCycle;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075d0:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
 80075d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075d8:	d102      	bne.n	80075e0 <SAL_XSPI_GetSFDP+0x50>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 80075da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80075de:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 80075e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075e6:	d103      	bne.n	80075f0 <SAL_XSPI_GetSFDP+0x60>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
 80075e8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80075ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075ee:	e001      	b.n	80075f4 <SAL_XSPI_GetSFDP+0x64>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f107 0110 	add.w	r1, r7, #16
 80075fc:	2264      	movs	r2, #100	@ 0x64
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fbe6 	bl	8005dd0 <HAL_XSPI_Command>
 8007604:	4603      	mov	r3, r0
 8007606:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 800760a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <SAL_XSPI_GetSFDP+0x98>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2264      	movs	r2, #100	@ 0x64
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe fcdb 	bl	8005fd6 <HAL_XSPI_Receive>
 8007620:	4603      	mov	r3, r0
 8007622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007626:	e000      	b.n	800762a <SAL_XSPI_GetSFDP+0x9a>
    goto error;
 8007628:	bf00      	nop

error:
  if (retr != HAL_OK )
 800762a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800762e:	2b00      	cmp	r3, #0
 8007630:	d004      	beq.n	800763c <SAL_XSPI_GetSFDP+0xac>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe fe98 	bl	800636c <HAL_XSPI_Abort>
  }
  return retr;
 800763c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007640:	4618      	mov	r0, r3
 8007642:	3760      	adds	r7, #96	@ 0x60
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b098      	sub	sp, #96	@ 0x60
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f107 0010 	add.w	r0, r7, #16
 800765a:	3304      	adds	r3, #4
 800765c:	224c      	movs	r2, #76	@ 0x4c
 800765e:	4619      	mov	r1, r3
 8007660:	f002 f91c 	bl	800989c <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x9F);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800766a:	6a39      	ldr	r1, [r7, #32]
 800766c:	229f      	movs	r2, #159	@ 0x9f
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fb4b 	bl	8007d0a <XSPI_FormatCommand>
 8007674:	4603      	mov	r3, r0
 8007676:	61bb      	str	r3, [r7, #24]

  s_command.DataLength  = DataSize;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.AddressMode = HAL_XSPI_ADDRESS_NONE;
 800767c:	2300      	movs	r3, #0
 800767e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d105      	bne.n	8007692 <SAL_XSPI_GetId+0x4a>
  {
    s_command.DummyCycles       = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
 800768a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800768e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007690:	e003      	b.n	800769a <SAL_XSPI_GetId+0x52>
  }
  else
  {
    /* this behavior is valid for macromix and must be confirmed on the other memories */
    s_command.Address = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
 8007696:	2308      	movs	r3, #8
 8007698:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f107 0110 	add.w	r1, r7, #16
 80076a2:	2264      	movs	r2, #100	@ 0x64
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe fb93 	bl	8005dd0 <HAL_XSPI_Command>
 80076aa:	4603      	mov	r3, r0
 80076ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 80076b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10a      	bne.n	80076ce <SAL_XSPI_GetId+0x86>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2264      	movs	r2, #100	@ 0x64
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fc88 	bl	8005fd6 <HAL_XSPI_Receive>
 80076c6:	4603      	mov	r3, r0
 80076c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80076cc:	e000      	b.n	80076d0 <SAL_XSPI_GetId+0x88>
    goto error;
 80076ce:	bf00      	nop

error:
  if (retr != HAL_OK )
 80076d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d004      	beq.n	80076e2 <SAL_XSPI_GetId+0x9a>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe fe45 	bl	800636c <HAL_XSPI_Abort>
  }
  return retr;
 80076e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3760      	adds	r7, #96	@ 0x60
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b098      	sub	sp, #96	@ 0x60
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
 80076fa:	460b      	mov	r3, r1
 80076fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f107 0010 	add.w	r0, r7, #16
 8007704:	3304      	adds	r3, #4
 8007706:	224c      	movs	r2, #76	@ 0x4c
 8007708:	4619      	mov	r1, r3
 800770a:	f002 f8c7 	bl	800989c <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007714:	6a39      	ldr	r1, [r7, #32]
 8007716:	7afa      	ldrb	r2, [r7, #11]
 8007718:	4618      	mov	r0, r3
 800771a:	f000 faf6 	bl	8007d0a <XSPI_FormatCommand>
 800771e:	4603      	mov	r3, r0
 8007720:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
 8007726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007728:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007730:	2b05      	cmp	r3, #5
 8007732:	d006      	beq.n	8007742 <SAL_XSPI_Read+0x54>
 8007734:	2b05      	cmp	r3, #5
 8007736:	dc1a      	bgt.n	800776e <SAL_XSPI_Read+0x80>
 8007738:	2b01      	cmp	r3, #1
 800773a:	d014      	beq.n	8007766 <SAL_XSPI_Read+0x78>
 800773c:	2b02      	cmp	r3, #2
 800773e:	d00b      	beq.n	8007758 <SAL_XSPI_Read+0x6a>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
 8007740:	e015      	b.n	800776e <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8007742:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007746:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
 8007748:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800774c:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles = SalXspi->DTRDummyCycle;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8007754:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
 8007756:	e00b      	b.n	8007770 <SAL_XSPI_Read+0x82>
     s_command.AddressMode = HAL_XSPI_ADDRESS_2_LINES;
 8007758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800775c:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
 800775e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007762:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
 8007764:	e004      	b.n	8007770 <SAL_XSPI_Read+0x82>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
 8007766:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800776a:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
 800776c:	e000      	b.n	8007770 <SAL_XSPI_Read+0x82>
   break;
 800776e:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f107 0110 	add.w	r1, r7, #16
 8007778:	2264      	movs	r2, #100	@ 0x64
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fb28 	bl	8005dd0 <HAL_XSPI_Command>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8007786:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800778a:	2b00      	cmp	r3, #0
 800778c:	d107      	bne.n	800779e <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 faf6 	bl	8007d82 <XSPI_Receive>
 8007796:	4603      	mov	r3, r0
 8007798:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800779c:	e000      	b.n	80077a0 <SAL_XSPI_Read+0xb2>
    goto error;
 800779e:	bf00      	nop

error:
  if (retr != HAL_OK )
 80077a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe fddd 	bl	800636c <HAL_XSPI_Abort>
  }
  return retr;
 80077b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3760      	adds	r7, #96	@ 0x60
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b098      	sub	sp, #96	@ 0x60
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
 80077ca:	460b      	mov	r3, r1
 80077cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f107 0010 	add.w	r0, r7, #16
 80077d4:	3304      	adds	r3, #4
 80077d6:	224c      	movs	r2, #76	@ 0x4c
 80077d8:	4619      	mov	r1, r3
 80077da:	f002 f85f 	bl	800989c <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077e4:	6a39      	ldr	r1, [r7, #32]
 80077e6:	7afa      	ldrb	r2, [r7, #11]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fa8e 	bl	8007d0a <XSPI_FormatCommand>
 80077ee:	4603      	mov	r3, r0
 80077f0:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
 80077f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
 80077fa:	2300      	movs	r3, #0
 80077fc:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
 80077fe:	2300      	movs	r3, #0
 8007800:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f107 0110 	add.w	r1, r7, #16
 800780a:	2264      	movs	r2, #100	@ 0x64
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe fadf 	bl	8005dd0 <HAL_XSPI_Command>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
 8007818:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800781c:	2b00      	cmp	r3, #0
 800781e:	d107      	bne.n	8007830 <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fa9a 	bl	8007d5c <XSPI_Transmit>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800782e:	e000      	b.n	8007832 <SAL_XSPI_Write+0x74>
    goto error;
 8007830:	bf00      	nop

error:
  if (retr != HAL_OK )
 8007832:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe fd94 	bl	800636c <HAL_XSPI_Abort>
  }
  return retr;
 8007844:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007848:	4618      	mov	r0, r3
 800784a:	3760      	adds	r7, #96	@ 0x60
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b098      	sub	sp, #96	@ 0x60
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	461a      	mov	r2, r3
 800785c:	460b      	mov	r3, r1
 800785e:	72fb      	strb	r3, [r7, #11]
 8007860:	4613      	mov	r3, r2
 8007862:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f107 0010 	add.w	r0, r7, #16
 800786a:	3304      	adds	r3, #4
 800786c:	224c      	movs	r2, #76	@ 0x4c
 800786e:	4619      	mov	r1, r3
 8007870:	f002 f814 	bl	800989c <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800787a:	6a39      	ldr	r1, [r7, #32]
 800787c:	7afa      	ldrb	r2, [r7, #11]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fa43 	bl	8007d0a <XSPI_FormatCommand>
 8007884:	4603      	mov	r3, r0
 8007886:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8007888:	2300      	movs	r3, #0
 800788a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 8007890:	893b      	ldrh	r3, [r7, #8]
 8007892:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8007894:	2300      	movs	r3, #0
 8007896:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
 8007898:	893b      	ldrh	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
 800789e:	2300      	movs	r3, #0
 80078a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f107 0110 	add.w	r1, r7, #16
 80078aa:	2264      	movs	r2, #100	@ 0x64
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe fa8f 	bl	8005dd0 <HAL_XSPI_Command>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
 80078b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10c      	bne.n	80078da <SAL_XSPI_CommandSendData+0x8a>
 80078c0:	893b      	ldrh	r3, [r7, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2264      	movs	r2, #100	@ 0x64
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe fb0e 	bl	8005ef0 <HAL_XSPI_Transmit>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 80078da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fd40 	bl	800636c <HAL_XSPI_Abort>
  }
  return retr;
 80078ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3760      	adds	r7, #96	@ 0x60
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b098      	sub	sp, #96	@ 0x60
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	461a      	mov	r2, r3
 8007904:	460b      	mov	r3, r1
 8007906:	72fb      	strb	r3, [r7, #11]
 8007908:	4613      	mov	r3, r2
 800790a:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f107 0010 	add.w	r0, r7, #16
 8007912:	3304      	adds	r3, #4
 8007914:	224c      	movs	r2, #76	@ 0x4c
 8007916:	4619      	mov	r1, r3
 8007918:	f001 ffc0 	bl	800989c <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007922:	6a39      	ldr	r1, [r7, #32]
 8007924:	7afa      	ldrb	r2, [r7, #11]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f9ef 	bl	8007d0a <XSPI_FormatCommand>
 800792c:	4603      	mov	r3, r0
 800792e:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8007930:	2300      	movs	r3, #0
 8007932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
 8007934:	2300      	movs	r3, #0
 8007936:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 8007938:	893b      	ldrh	r3, [r7, #8]
 800793a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 800793c:	2300      	movs	r3, #0
 800793e:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
 8007940:	893b      	ldrh	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
 8007946:	2300      	movs	r3, #0
 8007948:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f107 0110 	add.w	r1, r7, #16
 8007952:	2264      	movs	r2, #100	@ 0x64
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fa3b 	bl	8005dd0 <HAL_XSPI_Command>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
 8007960:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10c      	bne.n	8007982 <SAL_XSPI_SendReadCommand+0x8a>
 8007968:	893b      	ldrh	r3, [r7, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d009      	beq.n	8007982 <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2264      	movs	r2, #100	@ 0x64
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe fb2d 	bl	8005fd6 <HAL_XSPI_Receive>
 800797c:	4603      	mov	r3, r0
 800797e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8007982:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fcec 	bl	800636c <HAL_XSPI_Abort>
  }
  return retr;
 8007994:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007998:	4618      	mov	r0, r3
 800799a:	3760      	adds	r7, #96	@ 0x60
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b098      	sub	sp, #96	@ 0x60
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	607a      	str	r2, [r7, #4]
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	460b      	mov	r3, r1
 80079ae:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f107 0010 	add.w	r0, r7, #16
 80079b6:	3304      	adds	r3, #4
 80079b8:	224c      	movs	r2, #76	@ 0x4c
 80079ba:	4619      	mov	r1, r3
 80079bc:	f001 ff6e 	bl	800989c <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079c6:	6a39      	ldr	r1, [r7, #32]
 80079c8:	7afa      	ldrb	r2, [r7, #11]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f99d 	bl	8007d0a <XSPI_FormatCommand>
 80079d0:	4603      	mov	r3, r0
 80079d2:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079de:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 80079e0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80079e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f107 0110 	add.w	r1, r7, #16
 80079f2:	2264      	movs	r2, #100	@ 0x64
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe f9eb 	bl	8005dd0 <HAL_XSPI_Command>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
 8007a00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <SAL_XSPI_CommandSendReadAddress+0x7c>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2264      	movs	r2, #100	@ 0x64
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fae0 	bl	8005fd6 <HAL_XSPI_Receive>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8007a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <SAL_XSPI_CommandSendReadAddress+0x8e>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fc9f 	bl	800636c <HAL_XSPI_Abort>
  }
  return retr;
 8007a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3760      	adds	r7, #96	@ 0x60
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t MatchValue, uint8_t MatchMask, uint32_t Timeout)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b09e      	sub	sp, #120	@ 0x78
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	461a      	mov	r2, r3
 8007a46:	460b      	mov	r3, r1
 8007a48:	72fb      	strb	r3, [r7, #11]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8007a54:	3304      	adds	r3, #4
 8007a56:	224c      	movs	r2, #76	@ 0x4c
 8007a58:	4619      	mov	r1, r3
 8007a5a:	f001 ff1f 	bl	800989c <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
 8007a5e:	7abb      	ldrb	r3, [r7, #10]
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8007a66:	61bb      	str	r3, [r7, #24]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007a70:	623b      	str	r3, [r7, #32]
 8007a72:	2310      	movs	r3, #16
 8007a74:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a7e:	7afa      	ldrb	r2, [r7, #11]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 f942 	bl	8007d0a <XSPI_FormatCommand>
 8007a86:	4603      	mov	r3, r0
 8007a88:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
 8007a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d106      	bne.n	8007aa6 <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    // patch cypress to force 1 line on status read
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
 8007a98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a9c:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
 8007aa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007aa8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007aac:	d107      	bne.n	8007abe <SAL_XSPI_CheckStatusRegister+0x84>
  {
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
 8007aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ab2:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 8007ab4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007ac6:	2264      	movs	r2, #100	@ 0x64
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fe f981 	bl	8005dd0 <HAL_XSPI_Command>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
 8007ad4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10b      	bne.n	8007af4 <SAL_XSPI_CheckStatusRegister+0xba>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f107 0114 	add.w	r1, r7, #20
 8007ae4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe fb17 	bl	800611c <HAL_XSPI_AutoPolling>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
 8007af4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <SAL_XSPI_CheckStatusRegister+0xcc>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fe fc33 	bl	800636c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8007b06:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3778      	adds	r7, #120	@ 0x78
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <SAL_XSPI_ConfigureWrappMode>:

HAL_StatusTypeDef SAL_XSPI_ConfigureWrappMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t WrapCommand, uint8_t WrapDummy)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b096      	sub	sp, #88	@ 0x58
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	70fb      	strb	r3, [r7, #3]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f107 0008 	add.w	r0, r7, #8
 8007b28:	3304      	adds	r3, #4
 8007b2a:	224c      	movs	r2, #76	@ 0x4c
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f001 feb5 	bl	800989c <memcpy>

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRAP_CFG;
 8007b32:	2303      	movs	r3, #3
 8007b34:	60bb      	str	r3, [r7, #8]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, WrapCommand);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b3c:	69b9      	ldr	r1, [r7, #24]
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 f8e2 	bl	8007d0a <XSPI_FormatCommand>
 8007b46:	4603      	mov	r3, r0
 8007b48:	613b      	str	r3, [r7, #16]
  s_command.DummyCycles = WrapDummy;
 8007b4a:	78bb      	ldrb	r3, [r7, #2]
 8007b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f107 0108 	add.w	r1, r7, #8
 8007b56:	2264      	movs	r2, #100	@ 0x64
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe f939 	bl	8005dd0 <HAL_XSPI_Command>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if ( retr  != HAL_OK)
 8007b64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b68:	2b00      	cmp	r3, #0
  {
    goto error;
  }

error:
 8007b6a:	bf00      	nop
  if (retr != HAL_OK )
 8007b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <SAL_XSPI_ConfigureWrappMode+0x6c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe fbf7 	bl	800636c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8007b7e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3758      	adds	r7, #88	@ 0x58
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <SAL_XSPI_EnableMapMode>:

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b098      	sub	sp, #96	@ 0x60
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	4608      	mov	r0, r1
 8007b94:	4611      	mov	r1, r2
 8007b96:	461a      	mov	r2, r3
 8007b98:	4603      	mov	r3, r0
 8007b9a:	70fb      	strb	r3, [r7, #3]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70bb      	strb	r3, [r7, #2]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f107 0010 	add.w	r0, r7, #16
 8007baa:	3304      	adds	r3, #4
 8007bac:	224c      	movs	r2, #76	@ 0x4c
 8007bae:	4619      	mov	r1, r3
 8007bb0:	f001 fe74 	bl	800989c <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8007bb4:	f107 0308 	add.w	r3, r7, #8
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	605a      	str	r2, [r3, #4]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	613b      	str	r3, [r7, #16]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bc8:	6a39      	ldr	r1, [r7, #32]
 8007bca:	78fa      	ldrb	r2, [r7, #3]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 f89c 	bl	8007d0a <XSPI_FormatCommand>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles = DummyRead;
 8007bd6:	78bb      	ldrb	r3, [r7, #2]
 8007bd8:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f107 0110 	add.w	r1, r7, #16
 8007be2:	2264      	movs	r2, #100	@ 0x64
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe f8f3 	bl	8005dd0 <HAL_XSPI_Command>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8007bf0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d12d      	bne.n	8007c54 <SAL_XSPI_EnableMapMode+0xca>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	613b      	str	r3, [r7, #16]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c02:	6a39      	ldr	r1, [r7, #32]
 8007c04:	787a      	ldrb	r2, [r7, #1]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 f87f 	bl	8007d0a <XSPI_FormatCommand>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles = DummyWrite;
 8007c10:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8007c14:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f107 0110 	add.w	r1, r7, #16
 8007c1e:	2264      	movs	r2, #100	@ 0x64
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fe f8d5 	bl	8005dd0 <HAL_XSPI_Command>
 8007c26:	4603      	mov	r3, r0
 8007c28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8007c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d111      	bne.n	8007c58 <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
 8007c38:	2350      	movs	r3, #80	@ 0x50
 8007c3a:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f107 0208 	add.w	r2, r7, #8
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe faf2 	bl	8006230 <HAL_XSPI_MemoryMapped>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007c52:	e002      	b.n	8007c5a <SAL_XSPI_EnableMapMode+0xd0>
    goto error;
 8007c54:	bf00      	nop
 8007c56:	e000      	b.n	8007c5a <SAL_XSPI_EnableMapMode+0xd0>
    goto error;
 8007c58:	bf00      	nop

error:
  if (retr != HAL_OK )
 8007c5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d004      	beq.n	8007c6c <SAL_XSPI_EnableMapMode+0xe2>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fb80 	bl	800636c <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8007c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3760      	adds	r7, #96	@ 0x60
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c80:	f3bf 8f4f 	dsb	sy
}
 8007c84:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fb6e 	bl	800636c <HAL_XSPI_Abort>
 8007c90:	4603      	mov	r3, r0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007cb6:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d11e      	bne.n	8007cfc <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d103      	bne.n	8007ccc <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
 8007cc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007cc8:	60bb      	str	r3, [r7, #8]
 8007cca:	e008      	b.n	8007cde <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cd2:	d102      	bne.n	8007cda <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60bb      	str	r3, [r7, #8]
 8007cd8:	e001      	b.n	8007cde <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	609a      	str	r2, [r3, #8]
    break;
 8007cf6:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	e000      	b.n	8007cfe <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	4603      	mov	r3, r0
 8007d12:	6039      	str	r1, [r7, #0]
 8007d14:	71fb      	strb	r3, [r7, #7]
 8007d16:	4613      	mov	r3, r2
 8007d18:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b10      	cmp	r3, #16
 8007d1e:	d114      	bne.n	8007d4a <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yes handled */
    retr = ((uint16_t)Command << 8u);
 8007d20:	79bb      	ldrb	r3, [r7, #6]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	021b      	lsls	r3, r3, #8
 8007d26:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d107      	bne.n	8007d3e <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
 8007d2e:	79bb      	ldrb	r3, [r7, #6]
 8007d30:	43db      	mvns	r3, r3
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	461a      	mov	r2, r3
 8007d36:	89fb      	ldrh	r3, [r7, #14]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	81fb      	strh	r3, [r7, #14]
 8007d3c:	e007      	b.n	8007d4e <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
 8007d3e:	79bb      	ldrb	r3, [r7, #6]
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	89fb      	ldrh	r3, [r7, #14]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	81fb      	strh	r3, [r7, #14]
 8007d48:	e001      	b.n	8007d4e <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
 8007d4a:	79bb      	ldrb	r3, [r7, #6]
 8007d4c:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
 8007d4e:	89fb      	ldrh	r3, [r7, #14]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <XSPI_Transmit>:


HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2264      	movs	r2, #100	@ 0x64
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe f8be 	bl	8005ef0 <HAL_XSPI_Transmit>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <XSPI_Receive>:
  * @param hxpsi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2264      	movs	r2, #100	@ 0x64
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe f91e 	bl	8005fd6 <HAL_XSPI_Receive>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);
  
  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]
    
    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f103 0008 	add.w	r0, r3, #8
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	f7ff fbe2 	bl	8007590 <SAL_XSPI_GetSFDP>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFPDREAD;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007dd6:	e01f      	b.n	8007e18 <SFDP_ReadHeader+0x70>
    }
    
    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);
    
    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 fc06 	bl	80095f0 <CheckSFDP_Signature>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <SFDP_ReadHeader+0x48>
 8007dea:	2b05      	cmp	r3, #5
 8007dec:	d005      	beq.n	8007dfa <SFDP_ReadHeader+0x52>
 8007dee:	e00a      	b.n	8007e06 <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
 8007df4:	2302      	movs	r3, #2
 8007df6:	73bb      	strb	r3, [r7, #14]
    break;
 8007df8:	e00a      	b.n	8007e10 <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8007dfa:	2304      	movs	r3, #4
 8007dfc:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	3301      	adds	r3, #1
 8007e02:	73bb      	strb	r3, [r7, #14]
      break;
 8007e04:	e004      	b.n	8007e10 <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8007e06:	2304      	movs	r3, #4
 8007e08:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	73bb      	strb	r3, [r7, #14]
      break;
 8007e0e:	bf00      	nop
    }
  } while(retry_counter < 2u);
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d9cf      	bls.n	8007db6 <SFDP_ReadHeader+0xe>

error:
 8007e16:	bf00      	nop
  return retr;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
 8007e24:	b590      	push	{r4, r7, lr}
 8007e26:	b089      	sub	sp, #36	@ 0x24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8007e2e:	2304      	movs	r3, #4
 8007e30:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
 8007e32:	4b2a      	ldr	r3, [pc, #168]	@ (8007edc <SFDP_GetHeader+0xb8>)
 8007e34:	f107 040c 	add.w	r4, r7, #12
 8007e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };
  
  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	77bb      	strb	r3, [r7, #30]
 8007e42:	e040      	b.n	8007ec6 <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");
    
    /* Configure the link */
    Object->sfpd_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
 8007e44:	7fbb      	ldrb	r3, [r7, #30]
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	3320      	adds	r3, #32
 8007e4a:	443b      	add	r3, r7
 8007e4c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f103 0008 	add.w	r0, r3, #8
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3364      	adds	r3, #100	@ 0x64
 8007e60:	461a      	mov	r2, r3
 8007e62:	2100      	movs	r1, #0
 8007e64:	f7ff fa42 	bl	80072ec <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, table_config[index].DummyCycle);
 8007e68:	7fbb      	ldrb	r3, [r7, #30]
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	3320      	adds	r3, #32
 8007e6e:	443b      	add	r3, r7
 8007e70:	f813 2c13 	ldrb.w	r2, [r3, #-19]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */    
    for (uint8_t IExt = 0u;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	777b      	strb	r3, [r7, #29]
 8007e7e:	e017      	b.n	8007eb0 <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, IExt);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	7f7a      	ldrb	r2, [r7, #29]
 8007e84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff ff8c 	bl	8007da8 <SFDP_ReadHeader>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
 8007e9a:	7fbb      	ldrb	r3, [r7, #30]
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	3320      	adds	r3, #32
 8007ea0:	443b      	add	r3, r7
 8007ea2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d909      	bls.n	8007ebe <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
 8007eaa:	7f7b      	ldrb	r3, [r7, #29]
 8007eac:	3301      	adds	r3, #1
 8007eae:	777b      	strb	r3, [r7, #29]
 8007eb0:	7f7b      	ldrb	r3, [r7, #29]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d804      	bhi.n	8007ec0 <SFDP_GetHeader+0x9c>
 8007eb6:	7ffb      	ldrb	r3, [r7, #31]
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d0e1      	beq.n	8007e80 <SFDP_GetHeader+0x5c>
 8007ebc:	e000      	b.n	8007ec0 <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
 8007ebe:	bf00      	nop
           ; index++) 
 8007ec0:	7fbb      	ldrb	r3, [r7, #30]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
 8007ec6:	7fbb      	ldrb	r3, [r7, #30]
 8007ec8:	2b07      	cmp	r3, #7
 8007eca:	d802      	bhi.n	8007ed2 <SFDP_GetHeader+0xae>
 8007ecc:	7ffb      	ldrb	r3, [r7, #31]
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d0b8      	beq.n	8007e44 <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
 8007ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3724      	adds	r7, #36	@ 0x24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd90      	pop	{r4, r7, pc}
 8007edc:	080098d8 	.word	0x080098d8

08007ee0 <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
 8007eec:	2308      	movs	r3, #8
 8007eee:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfpd_private.Sfdp_table_mask = 0;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
 8007ef8:	2278      	movs	r2, #120	@ 0x78
 8007efa:	2100      	movs	r1, #0
 8007efc:	485f      	ldr	r0, [pc, #380]	@ (800807c <SFDP_CollectData+0x19c>)
 8007efe:	f001 fca1 	bl	8009844 <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
 8007f06:	e027      	b.n	8007f58 <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[index]))
 8007f08:	7dfa      	ldrb	r2, [r7, #23]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4a5a      	ldr	r2, [pc, #360]	@ (800807c <SFDP_CollectData+0x19c>)
 8007f14:	4413      	add	r3, r2
 8007f16:	461a      	mov	r2, r3
 8007f18:	69b9      	ldr	r1, [r7, #24]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 ffae 	bl	8008e7c <sfdp_get_paraminfo>
 8007f20:	4603      	mov	r3, r0
 8007f22:	77fb      	strb	r3, [r7, #31]
 8007f24:	7ffb      	ldrb	r3, [r7, #31]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f040 80a2 	bne.w	8008070 <SFDP_CollectData+0x190>
    Object->sfpd_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007f32:	7dfa      	ldrb	r2, [r7, #23]
 8007f34:	4851      	ldr	r0, [pc, #324]	@ (800807c <SFDP_CollectData+0x19c>)
 8007f36:	4613      	mov	r3, r2
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4403      	add	r3, r0
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	ea41 0203 	orr.w	r2, r1, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	3301      	adds	r3, #1
 8007f56:	75fb      	strb	r3, [r7, #23]
 8007f58:	7dfa      	ldrb	r2, [r7, #23]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007f60:	3301      	adds	r3, #1
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d3d0      	bcc.n	8007f08 <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
 8007f66:	2300      	movs	r3, #0
 8007f68:	75bb      	strb	r3, [r7, #22]
 8007f6a:	e075      	b.n	8008058 <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
 8007f70:	7dba      	ldrb	r2, [r7, #22]
 8007f72:	4942      	ldr	r1, [pc, #264]	@ (800807c <SFDP_CollectData+0x19c>)
 8007f74:	4613      	mov	r3, r2
 8007f76:	005b      	lsls	r3, r3, #1
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	3308      	adds	r3, #8
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
 8007f84:	7dba      	ldrb	r2, [r7, #22]
 8007f86:	493d      	ldr	r1, [pc, #244]	@ (800807c <SFDP_CollectData+0x19c>)
 8007f88:	4613      	mov	r3, r2
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f98:	d029      	beq.n	8007fee <SFDP_CollectData+0x10e>
 8007f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f9e:	d829      	bhi.n	8007ff4 <SFDP_CollectData+0x114>
 8007fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa4:	d01d      	beq.n	8007fe2 <SFDP_CollectData+0x102>
 8007fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007faa:	d823      	bhi.n	8007ff4 <SFDP_CollectData+0x114>
 8007fac:	2b80      	cmp	r3, #128	@ 0x80
 8007fae:	d01b      	beq.n	8007fe8 <SFDP_CollectData+0x108>
 8007fb0:	2b80      	cmp	r3, #128	@ 0x80
 8007fb2:	d81f      	bhi.n	8007ff4 <SFDP_CollectData+0x114>
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d002      	beq.n	8007fbe <SFDP_CollectData+0xde>
 8007fb8:	2b40      	cmp	r3, #64	@ 0x40
 8007fba:	d00f      	beq.n	8007fdc <SFDP_CollectData+0xfc>
    case SFPD_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
 8007fbc:	e01a      	b.n	8007ff4 <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
 8007fbe:	7dba      	ldrb	r2, [r7, #22]
 8007fc0:	492e      	ldr	r1, [pc, #184]	@ (800807c <SFDP_CollectData+0x19c>)
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	3308      	adds	r3, #8
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8008080 <SFDP_CollectData+0x1a0>)
 8007fd4:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
 8007fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8008084 <SFDP_CollectData+0x1a4>)
 8007fd8:	613b      	str	r3, [r7, #16]
      break;
 8007fda:	e00c      	b.n	8007ff6 <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bit.data_BYTE;
 8007fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8008088 <SFDP_CollectData+0x1a8>)
 8007fde:	613b      	str	r3, [r7, #16]
      break;
 8007fe0:	e009      	b.n	8007ff6 <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
 8007fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800808c <SFDP_CollectData+0x1ac>)
 8007fe4:	613b      	str	r3, [r7, #16]
      break;
 8007fe6:	e006      	b.n	8007ff6 <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
 8007fe8:	4b29      	ldr	r3, [pc, #164]	@ (8008090 <SFDP_CollectData+0x1b0>)
 8007fea:	613b      	str	r3, [r7, #16]
      break;
 8007fec:	e003      	b.n	8007ff6 <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
 8007fee:	4b29      	ldr	r3, [pc, #164]	@ (8008094 <SFDP_CollectData+0x1b4>)
 8007ff0:	613b      	str	r3, [r7, #16]
      break;
 8007ff2:	e000      	b.n	8007ff6 <SFDP_CollectData+0x116>
      break;
 8007ff4:	bf00      	nop
    }
    if (ptr != NULL)
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d016      	beq.n	800802a <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f103 0008 	add.w	r0, r3, #8
 8008002:	7dba      	ldrb	r2, [r7, #22]
 8008004:	491d      	ldr	r1, [pc, #116]	@ (800807c <SFDP_CollectData+0x19c>)
 8008006:	4613      	mov	r3, r2
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	3304      	adds	r3, #4
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	f7ff fab9 	bl	8007590 <SAL_XSPI_GetSFDP>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address, 
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008024:	230c      	movs	r3, #12
 8008026:	77fb      	strb	r3, [r7, #31]
        goto error;
 8008028:	e022      	b.n	8008070 <SFDP_CollectData+0x190>
      }
    }

    if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
 800802a:	7dba      	ldrb	r2, [r7, #22]
 800802c:	4913      	ldr	r1, [pc, #76]	@ (800807c <SFDP_CollectData+0x19c>)
 800802e:	4613      	mov	r3, r2
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	440b      	add	r3, r1
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b08      	cmp	r3, #8
 800803c:	d109      	bne.n	8008052 <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfpd_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
 800803e:	4b10      	ldr	r3, [pc, #64]	@ (8008080 <SFDP_CollectData+0x1a0>)
 8008040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008044:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008048:	b2db      	uxtb	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
 8008052:	7dbb      	ldrb	r3, [r7, #22]
 8008054:	3301      	adds	r3, #1
 8008056:	75bb      	strb	r3, [r7, #22]
 8008058:	7dba      	ldrb	r2, [r7, #22]
 800805a:	4908      	ldr	r1, [pc, #32]	@ (800807c <SFDP_CollectData+0x19c>)
 800805c:	4613      	mov	r3, r2
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f47f af7f 	bne.w	8007f6c <SFDP_CollectData+0x8c>
    }
  }

error:
 800806e:	bf00      	nop
  return retr;
 8008070:	7ffb      	ldrb	r3, [r7, #31]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	24000260 	.word	0x24000260
 8008080:	240002d8 	.word	0x240002d8
 8008084:	240002dc 	.word	0x240002dc
 8008088:	24000338 	.word	0x24000338
 800808c:	24000358 	.word	0x24000358
 8008090:	24000340 	.word	0x24000340
 8008094:	240003c8 	.word	0x240003c8

08008098 <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_methode;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
 80080a0:	2307      	movs	r3, #7
 80080a2:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
 80080a4:	2308      	movs	r3, #8
 80080a6:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]
 80080b0:	e02e      	b.n	8008110 <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[0]);
 80080b2:	4a64      	ldr	r2, [pc, #400]	@ (8008244 <SFDP_MemoryReset+0x1ac>)
 80080b4:	6939      	ldr	r1, [r7, #16]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fee0 	bl	8008e7c <sfdp_get_paraminfo>
 80080bc:	4603      	mov	r3, r0
 80080be:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
 80080c0:	7dbb      	ldrb	r3, [r7, #22]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d118      	bne.n	80080f8 <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */        
      if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
 80080c6:	4b5f      	ldr	r3, [pc, #380]	@ (8008244 <SFDP_MemoryReset+0x1ac>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d114      	bne.n	80080f8 <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f103 0008 	add.w	r0, r3, #8
 80080d4:	4b5b      	ldr	r3, [pc, #364]	@ (8008244 <SFDP_MemoryReset+0x1ac>)
 80080d6:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address, 
                                       JEDEC_Basic.Params.data_BYTE, 
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
 80080d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008244 <SFDP_MemoryReset+0x1ac>)
 80080da:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4a5a      	ldr	r2, [pc, #360]	@ (8008248 <SFDP_MemoryReset+0x1b0>)
 80080e0:	f7ff fa56 	bl	8007590 <SAL_XSPI_GetSFDP>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 80080ea:	230c      	movs	r3, #12
 80080ec:	75bb      	strb	r3, [r7, #22]
 80080ee:	e003      	b.n	80080f8 <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	75bb      	strb	r3, [r7, #22]
          find = 1u;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
 80080f8:	7dbb      	ldrb	r3, [r7, #22]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10f      	bne.n	800811e <SFDP_MemoryReset+0x86>
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d00c      	beq.n	800811e <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */        
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	3308      	adds	r3, #8
 8008108:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	3301      	adds	r3, #1
 800810e:	73bb      	strb	r3, [r7, #14]
 8008110:	7bba      	ldrb	r2, [r7, #14]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008118:	3301      	adds	r3, #1
 800811a:	429a      	cmp	r2, r3
 800811c:	d3c9      	bcc.n	80080b2 <SFDP_MemoryReset+0x1a>
  }
  
  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
 800811e:	7dbb      	ldrb	r3, [r7, #22]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <SFDP_MemoryReset+0x92>
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d102      	bne.n	8008130 <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 800812a:	230c      	movs	r3, #12
 800812c:	75bb      	strb	r3, [r7, #22]
    goto error;
 800812e:	e083      	b.n	8008238 <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proced memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
 8008130:	4b46      	ldr	r3, [pc, #280]	@ (800824c <SFDP_MemoryReset+0x1b4>)
 8008132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008136:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d102      	bne.n	8008146 <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_methode = RESET_NONE;
 8008140:	2300      	movs	r3, #0
 8008142:	75fb      	strb	r3, [r7, #23]
 8008144:	e053      	b.n	80081ee <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8008146:	4b41      	ldr	r3, [pc, #260]	@ (800824c <SFDP_MemoryReset+0x1b4>)
 8008148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800814c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_methode = RESET_Fh_4DATA_8CLOCK;
 800815c:	2301      	movs	r3, #1
 800815e:	75fb      	strb	r3, [r7, #23]
 8008160:	e045      	b.n	80081ee <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8008162:	4b3a      	ldr	r3, [pc, #232]	@ (800824c <SFDP_MemoryReset+0x1b4>)
 8008164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008168:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_methode = RESET_Fh_4DATA_10CLOCK;
 8008178:	2302      	movs	r3, #2
 800817a:	75fb      	strb	r3, [r7, #23]
 800817c:	e037      	b.n	80081ee <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 800817e:	4b33      	ldr	r3, [pc, #204]	@ (800824c <SFDP_MemoryReset+0x1b4>)
 8008180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008184:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008188:	b2db      	uxtb	r3, r3
 800818a:	f003 0304 	and.w	r3, r3, #4
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_methode = RESET_Fh_4DATA_16CLOCK;
 8008194:	2303      	movs	r3, #3
 8008196:	75fb      	strb	r3, [r7, #23]
 8008198:	e029      	b.n	80081ee <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 800819a:	4b2c      	ldr	r3, [pc, #176]	@ (800824c <SFDP_MemoryReset+0x1b4>)
 800819c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081a0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_methode = RESET_INSTRUCTION_F0;
 80081b0:	2304      	movs	r3, #4
 80081b2:	75fb      	strb	r3, [r7, #23]
 80081b4:	e01b      	b.n	80081ee <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 80081b6:	4b25      	ldr	r3, [pc, #148]	@ (800824c <SFDP_MemoryReset+0x1b4>)
 80081b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081bc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 0310 	and.w	r3, r3, #16
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_methode = RESET_INSTRUCTION_66_99;
 80081cc:	2305      	movs	r3, #5
 80081ce:	75fb      	strb	r3, [r7, #23]
 80081d0:	e00d      	b.n	80081ee <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 80081d2:	4b1e      	ldr	r3, [pc, #120]	@ (800824c <SFDP_MemoryReset+0x1b4>)
 80081d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081d8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b1f      	cmp	r3, #31
 80081e0:	d902      	bls.n	80081e8 <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 80081e2:	230f      	movs	r3, #15
 80081e4:	75bb      	strb	r3, [r7, #22]
    goto error;
 80081e6:	e027      	b.n	8008238 <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80081e8:	230c      	movs	r3, #12
 80081ea:	75bb      	strb	r3, [r7, #22]
    goto error;
 80081ec:	e024      	b.n	8008238 <SFDP_MemoryReset+0x1a0>
  }
  
  switch(reset_methode)
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	2b05      	cmp	r3, #5
 80081f2:	d009      	beq.n	8008208 <SFDP_MemoryReset+0x170>
 80081f4:	2b05      	cmp	r3, #5
 80081f6:	dc1b      	bgt.n	8008230 <SFDP_MemoryReset+0x198>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01c      	beq.n	8008236 <SFDP_MemoryReset+0x19e>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	db17      	blt.n	8008230 <SFDP_MemoryReset+0x198>
 8008200:	3b01      	subs	r3, #1
 8008202:	2b03      	cmp	r3, #3
 8008204:	d814      	bhi.n	8008230 <SFDP_MemoryReset+0x198>
 8008206:	e010      	b.n	800822a <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x66, NULL, 0);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f103 0008 	add.w	r0, r3, #8
 800820e:	2300      	movs	r3, #0
 8008210:	2200      	movs	r2, #0
 8008212:	2166      	movs	r1, #102	@ 0x66
 8008214:	f7ff fb1c 	bl	8007850 <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x99, NULL, 0);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f103 0008 	add.w	r0, r3, #8
 800821e:	2300      	movs	r3, #0
 8008220:	2200      	movs	r2, #0
 8008222:	2199      	movs	r1, #153	@ 0x99
 8008224:	f7ff fb14 	bl	8007850 <SAL_XSPI_CommandSendData>
    break;
 8008228:	e006      	b.n	8008238 <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 800822a:	230f      	movs	r3, #15
 800822c:	75bb      	strb	r3, [r7, #22]
    break;
 800822e:	e003      	b.n	8008238 <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
 8008230:	2301      	movs	r3, #1
 8008232:	75bb      	strb	r3, [r7, #22]
    break;
 8008234:	e000      	b.n	8008238 <SFDP_MemoryReset+0x1a0>
    break;
 8008236:	bf00      	nop
  }
error :
  return retr;
 8008238:	7dbb      	ldrb	r3, [r7, #22]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	24000260 	.word	0x24000260
 8008248:	240002dc 	.word	0x240002dc
 800824c:	240002d8 	.word	0x240002d8

08008250 <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
 8008250:	b5b0      	push	{r4, r5, r7, lr}
 8008252:	b08c      	sub	sp, #48	@ 0x30
 8008254:	af02      	add	r7, sp, #8
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4bitAddress = 0u;
 8008260:	2300      	movs	r3, #0
 8008262:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;
  
  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
 8008274:	2307      	movs	r3, #7
 8008276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800827a:	f000 bd93 	b.w	8008da4 <SFDP_BuildGenericDriver+0xb54>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
 800827e:	4bba      	ldr	r3, [pc, #744]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	db13      	blt.n	80082ae <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfpd_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
 8008286:	4bb8      	ldr	r3, [pc, #736]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	3301      	adds	r3, #1
 800828c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <SFDP_BuildGenericDriver+0x48>
    return 32U;
 8008294:	2320      	movs	r3, #32
 8008296:	e003      	b.n	80082a0 <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	fab3 f383 	clz	r3, r3
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	f1c3 031f 	rsb	r3, r3, #31
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
 80082ac:	e005      	b.n	80082ba <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfpd_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
 80082ae:	4bae      	ldr	r3, [pc, #696]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfpd_private.FlashSize = Object->sfpd_private.FlashSize - 3u; /* divide by eight the value */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80082c0:	3b03      	subs	r3, #3
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfpd_private.FlashSize);
  FlashSize = Object->sfpd_private.FlashSize - 1u;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80082d0:	3b01      	subs	r3, #1
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3308      	adds	r3, #8
 80082da:	f107 0213 	add.w	r2, r7, #19
 80082de:	2104      	movs	r1, #4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff f803 	bl	80072ec <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfpd_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
 80082e6:	4ba0      	ldr	r3, [pc, #640]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 80082e8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80082ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	2301      	movs	r3, #1
 80082f6:	fa03 f202 	lsl.w	r2, r3, r2
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x02;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2202      	movs	r2, #2
 8008302:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfpd_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
 8008306:	4b98      	ldr	r3, [pc, #608]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008308:	f893 2020 	ldrb.w	r2, [r3, #32]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
 8008312:	4b95      	ldr	r3, [pc, #596]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008314:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfpd_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
 800831e:	4b92      	ldr	r3, [pc, #584]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008320:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
 800832a:	4b8f      	ldr	r3, [pc, #572]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 800832c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfpd_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
 8008336:	4b8c      	ldr	r3, [pc, #560]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008338:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
 8008342:	4b89      	ldr	r3, [pc, #548]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008344:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfpd_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
 800834e:	4b86      	ldr	r3, [pc, #536]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008350:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
 800835a:	4b83      	ldr	r3, [pc, #524]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 800835c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfpd_private.DriverInfo.EraseType1Command != 0x0u)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01d      	beq.n	80083ac <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfpd_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
 8008370:	4b7d      	ldr	r3, [pc, #500]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008372:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008376:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800837a:	b2db      	uxtb	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	4b7a      	ldr	r3, [pc, #488]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008382:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008386:	b2db      	uxtb	r3, r3
 8008388:	3301      	adds	r3, #1
 800838a:	fb02 f303 	mul.w	r3, r2, r3
 800838e:	4a76      	ldr	r2, [pc, #472]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008390:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8008394:	f3c2 0241 	ubfx	r2, r2, #1, #2
 8008398:	b2d2      	uxtb	r2, r2
 800839a:	4611      	mov	r1, r2
 800839c:	4a73      	ldr	r2, [pc, #460]	@ (800856c <SFDP_BuildGenericDriver+0x31c>)
 800839e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80083a2:	fb03 f202 	mul.w	r2, r3, r2
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfpd_private.DriverInfo.EraseType2Command != 0x0u)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01e      	beq.n	80083f4 <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfpd_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
 80083b6:	4b6c      	ldr	r3, [pc, #432]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 80083b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	461a      	mov	r2, r3
 80083c4:	4b68      	ldr	r3, [pc, #416]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 80083c6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80083ca:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	3301      	adds	r3, #1
 80083d2:	fb02 f303 	mul.w	r3, r2, r3
 80083d6:	4a64      	ldr	r2, [pc, #400]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 80083d8:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80083dc:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	4611      	mov	r1, r2
 80083e4:	4a61      	ldr	r2, [pc, #388]	@ (800856c <SFDP_BuildGenericDriver+0x31c>)
 80083e6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80083ea:	fb03 f202 	mul.w	r2, r3, r2
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfpd_private.DriverInfo.EraseType3Command != 0x0u)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d01d      	beq.n	800843a <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfpd_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
 80083fe:	4b5a      	ldr	r3, [pc, #360]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008404:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008408:	b2db      	uxtb	r3, r3
 800840a:	461a      	mov	r2, r3
 800840c:	4b56      	ldr	r3, [pc, #344]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 800840e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8008412:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8008416:	b2db      	uxtb	r3, r3
 8008418:	3301      	adds	r3, #1
 800841a:	fb02 f303 	mul.w	r3, r2, r3
 800841e:	4a52      	ldr	r2, [pc, #328]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008420:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8008422:	f3c2 12c1 	ubfx	r2, r2, #7, #2
 8008426:	b2d2      	uxtb	r2, r2
 8008428:	4611      	mov	r1, r2
 800842a:	4a50      	ldr	r2, [pc, #320]	@ (800856c <SFDP_BuildGenericDriver+0x31c>)
 800842c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008430:	fb03 f202 	mul.w	r2, r3, r2
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfpd_private.DriverInfo.EraseType4Command != 0x0u)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01e      	beq.n	8008482 <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfpd_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
 8008444:	4b48      	ldr	r3, [pc, #288]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008446:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800844a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800844e:	b2db      	uxtb	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	4b45      	ldr	r3, [pc, #276]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008454:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008458:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800845c:	b2db      	uxtb	r3, r3
 800845e:	3301      	adds	r3, #1
 8008460:	fb02 f303 	mul.w	r3, r2, r3
 8008464:	4a40      	ldr	r2, [pc, #256]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008466:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 800846a:	f3c2 1281 	ubfx	r2, r2, #6, #2
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	4611      	mov	r1, r2
 8008472:	4a3e      	ldr	r2, [pc, #248]	@ (800856c <SFDP_BuildGenericDriver+0x31c>)
 8008474:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008478:	fb03 f202 	mul.w	r2, r3, r2
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfpd_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
 8008482:	4b39      	ldr	r3, [pc, #228]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008488:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800848c:	b2db      	uxtb	r3, r3
 800848e:	461a      	mov	r2, r3
 8008490:	4b35      	ldr	r3, [pc, #212]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008492:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008496:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800849a:	b2db      	uxtb	r3, r3
 800849c:	3301      	adds	r3, #1
 800849e:	fb02 f303 	mul.w	r3, r2, r3
 80084a2:	4a31      	ldr	r2, [pc, #196]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 80084a4:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 80084a8:	f3c2 1241 	ubfx	r2, r2, #5, #2
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	4611      	mov	r1, r2
 80084b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008570 <SFDP_BuildGenericDriver+0x320>)
 80084b2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80084b6:	fb03 f202 	mul.w	r2, r3, r2
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfpd_private.DriverInfo.ReadWELCommand = 0x05;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2205      	movs	r2, #5
 80084c4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2205      	movs	r2, #5
 80084cc:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
 80084d0:	4b25      	ldr	r3, [pc, #148]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 80084d2:	791b      	ldrb	r3, [r3, #4]
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d104      	bne.n	80084e8 <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2250      	movs	r2, #80	@ 0x50
 80084e2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80084e6:	e003      	b.n	80084f0 <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2206      	movs	r2, #6
 80084ec:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
  The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
  This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
 80084f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 80084f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084f6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2206      	movs	r2, #6
 8008508:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800850c:	e046      	b.n	800859c <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
 800850e:	4b16      	ldr	r3, [pc, #88]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 8008510:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008514:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d004      	beq.n	800852c <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2206      	movs	r2, #6
 8008526:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800852a:	e037      	b.n	800859c <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
 800852c:	4b0e      	ldr	r3, [pc, #56]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 800852e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008532:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008536:	b2db      	uxtb	r3, r3
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d004      	beq.n	800854a <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2250      	movs	r2, #80	@ 0x50
 8008544:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8008548:	e028      	b.n	800859c <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
  use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
  power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
  status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
 800854a:	4b07      	ldr	r3, [pc, #28]	@ (8008568 <SFDP_BuildGenericDriver+0x318>)
 800854c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008550:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 0308 	and.w	r3, r3, #8
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2206      	movs	r2, #6
 8008562:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8008566:	e019      	b.n	800859c <SFDP_BuildGenericDriver+0x34c>
 8008568:	240002d8 	.word	0x240002d8
 800856c:	08009904 	.word	0x08009904
 8008570:	0800990c 	.word	0x0800990c
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
  enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
 8008574:	4b66      	ldr	r3, [pc, #408]	@ (8008710 <SFDP_BuildGenericDriver+0x4c0>)
 8008576:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800857a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800857e:	b2db      	uxtb	r3, r3
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2206      	movs	r2, #6
 800858c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8008590:	e004      	b.n	800859c <SFDP_BuildGenericDriver+0x34c>
  1xx_xxxxb: Reserved
  NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
 8008592:	230a      	movs	r3, #10
 8008594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8008598:	f000 bc04 	b.w	8008da4 <SFDP_BuildGenericDriver+0xb54>
  }

  if(0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d078      	beq.n	800869c <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
 80085aa:	4b5a      	ldr	r3, [pc, #360]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 80085ac:	7cdb      	ldrb	r3, [r3, #19]
 80085ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d034      	beq.n	8008622 <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfpd_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
 80085b8:	4b56      	ldr	r3, [pc, #344]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 80085ba:	7c5a      	ldrb	r2, [r3, #17]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
 80085c2:	4b54      	ldr	r3, [pc, #336]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 80085c4:	7cdb      	ldrb	r3, [r3, #19]
 80085c6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	461a      	mov	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfpd_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
 80085d4:	4b4f      	ldr	r3, [pc, #316]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 80085d6:	7cdb      	ldrb	r3, [r3, #19]
 80085d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
 80085e6:	4b4b      	ldr	r3, [pc, #300]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 80085e8:	7cdb      	ldrb	r3, [r3, #19]
 80085ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	461a      	mov	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      
      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
 80085f8:	4b46      	ldr	r3, [pc, #280]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 80085fa:	7cdb      	ldrb	r3, [r3, #19]
 80085fc:	f003 0310 	and.w	r3, r3, #16
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
 8008606:	4b43      	ldr	r3, [pc, #268]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 8008608:	7cdb      	ldrb	r3, [r3, #19]
 800860a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800860e:	b2db      	uxtb	r3, r3
 8008610:	461a      	mov	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
 8008618:	e003      	b.n	8008622 <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	22ff      	movs	r2, #255	@ 0xff
 800861e:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
 8008622:	4b3c      	ldr	r3, [pc, #240]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 8008624:	7ddb      	ldrb	r3, [r3, #23]
 8008626:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d073      	beq.n	8008718 <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfpd_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
 8008630:	4b38      	ldr	r3, [pc, #224]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 8008632:	7d5a      	ldrb	r2, [r3, #21]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
 800863a:	4b36      	ldr	r3, [pc, #216]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 800863c:	7ddb      	ldrb	r3, [r3, #23]
 800863e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8008642:	b2db      	uxtb	r3, r3
 8008644:	461a      	mov	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
 800864c:	4b31      	ldr	r3, [pc, #196]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 800864e:	7ddb      	ldrb	r3, [r3, #23]
 8008650:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008654:	b2db      	uxtb	r3, r3
 8008656:	461a      	mov	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
 800865e:	4b2d      	ldr	r3, [pc, #180]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 8008660:	7ddb      	ldrb	r3, [r3, #23]
 8008662:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8008666:	b2db      	uxtb	r3, r3
 8008668:	461a      	mov	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
 8008670:	4b28      	ldr	r3, [pc, #160]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 8008672:	7cdb      	ldrb	r3, [r3, #19]
 8008674:	f003 0310 	and.w	r3, r3, #16
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d009      	beq.n	8008692 <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
 800867e:	4b25      	ldr	r3, [pc, #148]	@ (8008714 <SFDP_BuildGenericDriver+0x4c4>)
 8008680:	7ddb      	ldrb	r3, [r3, #23]
 8008682:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008686:	b2db      	uxtb	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8008690:	e042      	b.n	8008718 <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	22ff      	movs	r2, #255	@ 0xff
 8008696:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800869a:	e03d      	b.n	8008718 <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfpd_private.DriverInfo.WELPosition     = 1;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = 0;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if(0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
 80086ac:	4b18      	ldr	r3, [pc, #96]	@ (8008710 <SFDP_BuildGenericDriver+0x4c0>)
 80086ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80086b2:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00c      	beq.n	80086da <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
        and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2205      	movs	r2, #5
 80086c4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 0u;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 80086d8:	e01e      	b.n	8008718 <SFDP_BuildGenericDriver+0x4c8>
      } else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
 80086da:	4b0d      	ldr	r3, [pc, #52]	@ (8008710 <SFDP_BuildGenericDriver+0x4c0>)
 80086dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80086e0:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00c      	beq.n	8008708 <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
        command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
        Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x70;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2270      	movs	r2, #112	@ 0x70
 80086f2:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 7u;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2207      	movs	r2, #7
 80086fa:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 8008706:	e007      	b.n	8008718 <SFDP_BuildGenericDriver+0x4c8>
      } else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
 8008708:	2309      	movs	r3, #9
 800870a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 800870e:	e349      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
 8008710:	240002d8 	.word	0x240002d8
 8008714:	24000358 	.word	0x24000358
      }
  }

  /* Set default value for instruction */
  Object->sfpd_private.DriverInfo.ReadInstruction     = 0x03U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2203      	movs	r2, #3
 800871c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFPD_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (Object->sfpd_private.Sfdp_table_mask == (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) 
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008726:	2b08      	cmp	r3, #8
 8008728:	f040 80a9 	bne.w	800887e <SFDP_BuildGenericDriver+0x62e>
  {
    dummyCycles = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	617b      	str	r3, [r7, #20]
    Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_1LINE)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800873e:	2b00      	cmp	r3, #0
 8008740:	d04c      	beq.n	80087dc <SFDP_BuildGenericDriver+0x58c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
 8008742:	4bb4      	ldr	r3, [pc, #720]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 8008744:	7c5b      	ldrb	r3, [r3, #17]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d015      	beq.n	8008776 <SFDP_BuildGenericDriver+0x526>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
 800874a:	4bb2      	ldr	r3, [pc, #712]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 800874c:	7c1b      	ldrb	r3, [r3, #16]
 800874e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008752:	b2db      	uxtb	r3, r3
 8008754:	461a      	mov	r2, r3
 8008756:	4baf      	ldr	r3, [pc, #700]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 8008758:	7c1b      	ldrb	r3, [r3, #16]
 800875a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800875e:	b2db      	uxtb	r3, r3
 8008760:	4413      	add	r3, r2
 8008762:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
 8008764:	4bab      	ldr	r3, [pc, #684]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 8008766:	7c5a      	ldrb	r2, [r3, #17]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
 8008776:	4ba7      	ldr	r3, [pc, #668]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 8008778:	7cdb      	ldrb	r3, [r3, #19]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d015      	beq.n	80087aa <SFDP_BuildGenericDriver+0x55a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
 800877e:	4ba5      	ldr	r3, [pc, #660]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 8008780:	7c9b      	ldrb	r3, [r3, #18]
 8008782:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008786:	b2db      	uxtb	r3, r3
 8008788:	461a      	mov	r2, r3
 800878a:	4ba2      	ldr	r3, [pc, #648]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 800878c:	7c9b      	ldrb	r3, [r3, #18]
 800878e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008792:	b2db      	uxtb	r3, r3
 8008794:	4413      	add	r3, r2
 8008796:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
 8008798:	4b9e      	ldr	r3, [pc, #632]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 800879a:	7cda      	ldrb	r2, [r3, #19]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
 80087aa:	4b9a      	ldr	r3, [pc, #616]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 80087ac:	7d1b      	ldrb	r3, [r3, #20]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d011      	beq.n	80087dc <SFDP_BuildGenericDriver+0x58c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
 80087b8:	4b96      	ldr	r3, [pc, #600]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 80087ba:	7e9b      	ldrb	r3, [r3, #26]
 80087bc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	4b93      	ldr	r3, [pc, #588]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 80087c6:	7e9b      	ldrb	r3, [r3, #26]
 80087c8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	4413      	add	r3, r2
 80087d0:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
 80087d2:	4b90      	ldr	r3, [pc, #576]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 80087d4:	7eda      	ldrb	r2, [r3, #27]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_2LINES)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d92c      	bls.n	8008840 <SFDP_BuildGenericDriver+0x5f0>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
 80087e6:	4b8b      	ldr	r3, [pc, #556]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 80087e8:	7d1b      	ldrb	r3, [r3, #20]
 80087ea:	f003 0310 	and.w	r3, r3, #16
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d020      	beq.n	8008836 <SFDP_BuildGenericDriver+0x5e6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
 80087f4:	4b87      	ldr	r3, [pc, #540]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 80087f6:	7f9b      	ldrb	r3, [r3, #30]
 80087f8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	4b84      	ldr	r3, [pc, #528]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 8008802:	7f9b      	ldrb	r3, [r3, #30]
 8008804:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008808:	b2db      	uxtb	r3, r3
 800880a:	4413      	add	r3, r2
 800880c:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
 800880e:	4b81      	ldr	r3, [pc, #516]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 8008810:	7fda      	ldrb	r2, [r3, #31]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2204      	movs	r2, #4
 800881c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fea7 	bl	8009574 <JEDEC_Basic_Manage4S4S4SEnableSequence>
 8008826:	4603      	mov	r3, r0
 8008828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
 800882c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008830:	2b00      	cmp	r3, #0
 8008832:	f040 82b4 	bne.w	8008d9e <SFDP_BuildGenericDriver+0xb4e>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, (uint8_t)dummyCycles);
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	b2da      	uxtb	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f103 0008 	add.w	r0, r3, #8
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3364      	adds	r3, #100	@ 0x64
 800884a:	461a      	mov	r2, r3
 800884c:	2100      	movs	r1, #0
 800884e:	f7fe fd4d 	bl	80072ec <SAL_XSPI_MemoryConfig>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <SFDP_BuildGenericDriver+0x610>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008858:	230c      	movs	r3, #12
 800885a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 800885e:	e2a1      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3308      	adds	r3, #8
 8008864:	f107 0214 	add.w	r2, r7, #20
 8008868:	2101      	movs	r1, #1
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fd3e 	bl	80072ec <SAL_XSPI_MemoryConfig>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <SFDP_BuildGenericDriver+0x62e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008876:	230c      	movs	r3, #12
 8008878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 800887c:	e292      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>

     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFPD_PARAMID_OCTAL_DDR == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_OCTAL_DDR)) 
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d069      	beq.n	8008960 <SFDP_BuildGenericDriver+0x710>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008892:	2b03      	cmp	r3, #3
 8008894:	d164      	bne.n	8008960 <SFDP_BuildGenericDriver+0x710>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800889c:	2b09      	cmp	r3, #9
 800889e:	d103      	bne.n	80088a8 <SFDP_BuildGenericDriver+0x658>
    {
      flag4bitAddress = 1u;
 80088a0:	2301      	movs	r3, #1
 80088a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80088a6:	e03a      	b.n	800891e <SFDP_BuildGenericDriver+0x6ce>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfpd_enter_octal_mode(Object))
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fbdb 	bl	8009064 <sfpd_enter_octal_mode>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d134      	bne.n	800891e <SFDP_BuildGenericDriver+0x6ce>
      {
        /* switch the memory interface configuration according the Access protocol field */
        flag4bitAddress = 1u;
 80088b4:	2301      	movs	r3, #1
 80088b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2209      	movs	r2, #9
 80088be:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f103 0008 	add.w	r0, r3, #8
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3364      	adds	r3, #100	@ 0x64
 80088cc:	461a      	mov	r2, r3
 80088ce:	2100      	movs	r1, #0
 80088d0:	f7fe fd0c 	bl	80072ec <SAL_XSPI_MemoryConfig>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <SFDP_BuildGenericDriver+0x692>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 80088da:	230c      	movs	r3, #12
 80088dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 80088e0:	e260      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
        }
        
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFDu)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80088e8:	2bfd      	cmp	r3, #253	@ 0xfd
 80088ea:	d109      	bne.n	8008900 <SFDP_BuildGenericDriver+0x6b0>
        {
          /* set 20 wait state */
          dummyCycles = 20;
 80088ec:	2314      	movs	r3, #20
 80088ee:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3308      	adds	r3, #8
 80088f4:	f107 0214 	add.w	r2, r7, #20
 80088f8:	2101      	movs	r1, #1
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fcf6 	bl	80072ec <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFEu)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008906:	2bfe      	cmp	r3, #254	@ 0xfe
 8008908:	d109      	bne.n	800891e <SFDP_BuildGenericDriver+0x6ce>
        {
          /* set 8 wait state */
          dummyCycles = 8;
 800890a:	2308      	movs	r3, #8
 800890c:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3308      	adds	r3, #8
 8008912:	f107 0214 	add.w	r2, r7, #20
 8008916:	2101      	movs	r1, #1
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fce7 	bl	80072ec <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008924:	f003 0308 	and.w	r3, r3, #8
 8008928:	2b00      	cmp	r3, #0
 800892a:	d019      	beq.n	8008960 <SFDP_BuildGenericDriver+0x710>
        (JEDEC_Basic.size > 16u))
 800892c:	4b39      	ldr	r3, [pc, #228]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 800892e:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
 8008930:	2b10      	cmp	r3, #16
 8008932:	d915      	bls.n	8008960 <SFDP_BuildGenericDriver+0x710>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16 bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
 8008934:	4b37      	ldr	r3, [pc, #220]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 8008936:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800893a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b01      	cmp	r3, #1
 8008942:	d903      	bls.n	800894c <SFDP_BuildGenericDriver+0x6fc>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8008944:	230f      	movs	r3, #15
 8008946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 800894a:	e22b      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
 800894c:	4b31      	ldr	r3, [pc, #196]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 800894e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8008952:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8008956:	b2db      	uxtb	r3, r3
 8008958:	461a      	mov	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 813c 	beq.w	8008be8 <SFDP_BuildGenericDriver+0x998>
  {
    if (0u == flag4bitAddress)
 8008970:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008974:	2b00      	cmp	r3, #0
 8008976:	f040 809e 	bne.w	8008ab6 <SFDP_BuildGenericDriver+0x866>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
 800897a:	4b26      	ldr	r3, [pc, #152]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 800897c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01c      	beq.n	80089c2 <SFDP_BuildGenericDriver+0x772>
      {
        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,0xB7, NULL, 0))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f103 0008 	add.w	r0, r3, #8
 800898e:	2300      	movs	r3, #0
 8008990:	2200      	movs	r2, #0
 8008992:	21b7      	movs	r1, #183	@ 0xb7
 8008994:	f7fe ff5c 	bl	8007850 <SAL_XSPI_CommandSendData>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <SFDP_BuildGenericDriver+0x756>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 800899e:	230c      	movs	r3, #12
 80089a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 80089a4:	e1fe      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
        }

        /* Set 4Bit addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3308      	adds	r3, #8
 80089aa:	2200      	movs	r2, #0
 80089ac:	2102      	movs	r1, #2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fc9c 	bl	80072ec <SAL_XSPI_MemoryConfig>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d06b      	beq.n	8008a92 <SFDP_BuildGenericDriver+0x842>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 80089ba:	230c      	movs	r3, #12
 80089bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 80089c0:	e1f0      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
        }

        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
 80089c2:	4b14      	ldr	r3, [pc, #80]	@ (8008a14 <SFDP_BuildGenericDriver+0x7c4>)
 80089c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d04e      	beq.n	8008a6e <SFDP_BuildGenericDriver+0x81e>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f103 0008 	add.w	r0, r3, #8
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 80089dc:	2300      	movs	r3, #0
 80089de:	2200      	movs	r2, #0
 80089e0:	f7fe ff36 	bl	8007850 <SAL_XSPI_CommandSendData>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <SFDP_BuildGenericDriver+0x7a2>
                                           Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 80089ea:	230c      	movs	r3, #12
 80089ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 80089f0:	e1d8      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f103 0008 	add.w	r0, r3, #8
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8008a04:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d103      	bne.n	8008a18 <SFDP_BuildGenericDriver+0x7c8>
 8008a10:	2301      	movs	r3, #1
 8008a12:	e002      	b.n	8008a1a <SFDP_BuildGenericDriver+0x7ca>
 8008a14:	240002d8 	.word	0x240002d8
 8008a18:	2300      	movs	r3, #0
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 8008a20:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8008a22:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8008a2a:	461c      	mov	r4, r3
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	40a3      	lsls	r3, r4
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8008a36:	9401      	str	r4, [sp, #4]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	f7fe fffc 	bl	8007a3a <SAL_XSPI_CheckStatusRegister>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <SFDP_BuildGenericDriver+0x800>
                                            1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008a48:	230c      	movs	r3, #12
 8008a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8008a4e:	e1a9      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
        }

        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0xB7, NULL, 0u))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f103 0008 	add.w	r0, r3, #8
 8008a56:	2300      	movs	r3, #0
 8008a58:	2200      	movs	r2, #0
 8008a5a:	21b7      	movs	r1, #183	@ 0xb7
 8008a5c:	f7fe fef8 	bl	8007850 <SAL_XSPI_CommandSendData>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d015      	beq.n	8008a92 <SFDP_BuildGenericDriver+0x842>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008a66:	230c      	movs	r3, #12
 8008a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8008a6c:	e19a      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
 8008a6e:	4ba3      	ldr	r3, [pc, #652]	@ (8008cfc <SFDP_BuildGenericDriver+0xaac>)
 8008a70:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <SFDP_BuildGenericDriver+0x842>
      {
        /* nothing to do */
        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
 8008a7c:	4b9f      	ldr	r3, [pc, #636]	@ (8008cfc <SFDP_BuildGenericDriver+0xaac>)
 8008a7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a82:	f003 0320 	and.w	r3, r3, #32
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d103      	bne.n	8008a92 <SFDP_BuildGenericDriver+0x842>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are don not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8008a8a:	230f      	movs	r3, #15
 8008a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8008a90:	e188      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>

      }

      /* Set 4Bit addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3308      	adds	r3, #8
 8008a96:	2200      	movs	r2, #0
 8008a98:	2102      	movs	r1, #2
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fc26 	bl	80072ec <SAL_XSPI_MemoryConfig>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <SFDP_BuildGenericDriver+0x85e>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008aa6:	230c      	movs	r3, #12
 8008aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8008aac:	e17a      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
      }
      
      /* Set the read function for 4Bit Address */
      Object->sfpd_private.DriverInfo.ReadInstruction = 0x13U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2213      	movs	r2, #19
 8008ab2:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config) && (PHY_LINK_1S1S1S == Object->sfpd_private.DriverInfo.SpiPhyLink))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d12e      	bne.n	8008b1e <SFDP_BuildGenericDriver+0x8ce>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d129      	bne.n	8008b1e <SFDP_BuildGenericDriver+0x8ce>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
 8008aca:	4b8d      	ldr	r3, [pc, #564]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008acc:	789b      	ldrb	r3, [r3, #2]
 8008ace:	f003 0320 	and.w	r3, r3, #32
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d022      	beq.n	8008b1e <SFDP_BuildGenericDriver+0x8ce>
 8008ad8:	4b89      	ldr	r3, [pc, #548]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008ada:	78db      	ldrb	r3, [r3, #3]
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01b      	beq.n	8008b1e <SFDP_BuildGenericDriver+0x8ce>
      {
        /* Patch micron write command 0x81 @0x0 0xE7 */
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2207      	movs	r2, #7
 8008aea:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f103 0008 	add.w	r0, r3, #8
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3364      	adds	r3, #100	@ 0x64
 8008af8:	461a      	mov	r2, r3
 8008afa:	2100      	movs	r1, #0
 8008afc:	f7fe fbf6 	bl	80072ec <SAL_XSPI_MemoryConfig>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <SFDP_BuildGenericDriver+0x8be>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008b06:	230c      	movs	r3, #12
 8008b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8008b0c:	e14a      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
        }
        Object->sfpd_private.DriverInfo.ReadInstruction = 0xCC;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	22cc      	movs	r2, #204	@ 0xcc
 8008b12:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x8E;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	228e      	movs	r2, #142	@ 0x8e
 8008b1a:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that macromix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) || 
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d004      	beq.n	8008b32 <SFDP_BuildGenericDriver+0x8e2>
        (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) || 
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d120      	bne.n	8008b74 <SFDP_BuildGenericDriver+0x924>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x12u;}
 8008b32:	4b73      	ldr	r3, [pc, #460]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <SFDP_BuildGenericDriver+0x8f8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2212      	movs	r2, #18
 8008b44:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x13u;}
 8008b48:	4b6d      	ldr	r3, [pc, #436]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <SFDP_BuildGenericDriver+0x90e>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2213      	movs	r2, #19
 8008b5a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x0Cu;}
 8008b5e:	4b68      	ldr	r3, [pc, #416]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <SFDP_BuildGenericDriver+0x924>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	220c      	movs	r2, #12
 8008b70:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }
    
    if (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D) 
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8008b7a:	2b08      	cmp	r3, #8
 8008b7c:	d120      	bne.n	8008bc0 <SFDP_BuildGenericDriver+0x970>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction  = 0x02u;}
 8008b7e:	4b60      	ldr	r3, [pc, #384]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008b80:	78db      	ldrb	r3, [r3, #3]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <SFDP_BuildGenericDriver+0x944>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xCCu;}
 8008b94:	4b5a      	ldr	r3, [pc, #360]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008b96:	789b      	ldrb	r3, [r3, #2]
 8008b98:	f003 0320 	and.w	r3, r3, #32
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <SFDP_BuildGenericDriver+0x95a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	22cc      	movs	r2, #204	@ 0xcc
 8008ba6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xFDu;}
 8008baa:	4b55      	ldr	r3, [pc, #340]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008bac:	789b      	ldrb	r3, [r3, #2]
 8008bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <SFDP_BuildGenericDriver+0x970>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	22fd      	movs	r2, #253	@ 0xfd
 8008bbc:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType1;
 8008bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008bc2:	791a      	ldrb	r2, [r3, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType2;
 8008bca:	4b4d      	ldr	r3, [pc, #308]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008bcc:	795a      	ldrb	r2, [r3, #5]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType3;
 8008bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008bd6:	799a      	ldrb	r2, [r3, #6]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType4;
 8008bde:	4b48      	ldr	r3, [pc, #288]	@ (8008d00 <SFDP_BuildGenericDriver+0xab0>)
 8008be0:	79da      	ldrb	r2, [r3, #7]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFPD_PARAMID_XSPI_V1_0 == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_XSPI_V1_0))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 80d5 	beq.w	8008da2 <SFDP_BuildGenericDriver+0xb52>
      && 
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      && 
 8008bfe:	2b09      	cmp	r3, #9
 8008c00:	d005      	beq.n	8008c0e <SFDP_BuildGenericDriver+0x9be>
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	f040 80ca 	bne.w	8008da2 <SFDP_BuildGenericDriver+0xb52>
  {
    uint32_t ClockOut = 0u;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
 8008c12:	4b3c      	ldr	r3, [pc, #240]	@ (8008d04 <SFDP_BuildGenericDriver+0xab4>)
 8008c14:	785b      	ldrb	r3, [r3, #1]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <SFDP_BuildGenericDriver+0x9d4>
    {
      Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
 8008c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8008d04 <SFDP_BuildGenericDriver+0xab4>)
 8008c1c:	785a      	ldrb	r2, [r3, #1]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }
    
    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
 8008c24:	4b37      	ldr	r3, [pc, #220]	@ (8008d04 <SFDP_BuildGenericDriver+0xab4>)
 8008c26:	7d1b      	ldrb	r3, [r3, #20]
 8008c28:	f003 031f 	and.w	r3, r3, #31
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00d      	beq.n	8008c4e <SFDP_BuildGenericDriver+0x9fe>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
 8008c32:	4b34      	ldr	r3, [pc, #208]	@ (8008d04 <SFDP_BuildGenericDriver+0xab4>)
 8008c34:	7d1b      	ldrb	r3, [r3, #20]
 8008c36:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3308      	adds	r3, #8
 8008c42:	f107 0214 	add.w	r2, r7, #20
 8008c46:	2101      	movs	r1, #1
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe fb4f 	bl	80072ec <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory freq according its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
 8008c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8008cfc <SFDP_BuildGenericDriver+0xaac>)
 8008c50:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8008c54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f8e8 	bl	8008e30 <sfdp_getfrequencevalue>
 8008c60:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfpd_private.DriverInfo.ClockIn)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d902      	bls.n	8008c72 <SFDP_BuildGenericDriver+0xa22>
    {
      /* Adjust the frequence with the ClokcIn */ 
      MaxFreqMhz = Object->sfpd_private.DriverInfo.ClockIn;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c70:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f103 0008 	add.w	r0, r3, #8
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8008c7c:	f107 030c 	add.w	r3, r7, #12
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	f7fe fac1 	bl	8007208 <SAL_XSPI_SetClock>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <SFDP_BuildGenericDriver+0xa44>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
 8008c8c:	230d      	movs	r3, #13
 8008c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8008c92:	e087      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2201      	movs	r2, #1
 8008c98:	701a      	strb	r2, [r3, #0]
    
    /* get the dummy cycle value according the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8008d08 <SFDP_BuildGenericDriver+0xab8>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d913      	bls.n	8008cca <SFDP_BuildGenericDriver+0xa7a>
 8008ca2:	4b18      	ldr	r3, [pc, #96]	@ (8008d04 <SFDP_BuildGenericDriver+0xab4>)
 8008ca4:	899b      	ldrh	r3, [r3, #12]
 8008ca6:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00c      	beq.n	8008cca <SFDP_BuildGenericDriver+0xa7a>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
 8008cb0:	4b14      	ldr	r3, [pc, #80]	@ (8008d04 <SFDP_BuildGenericDriver+0xab4>)
 8008cb2:	899b      	ldrh	r3, [r3, #12]
 8008cb4:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
 8008cbc:	4b11      	ldr	r3, [pc, #68]	@ (8008d04 <SFDP_BuildGenericDriver+0xab4>)
 8008cbe:	7b1b      	ldrb	r3, [r3, #12]
 8008cc0:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	623b      	str	r3, [r7, #32]
 8008cc8:	e046      	b.n	8008d58 <SFDP_BuildGenericDriver+0xb08>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8008d0c <SFDP_BuildGenericDriver+0xabc>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d91e      	bls.n	8008d10 <SFDP_BuildGenericDriver+0xac0>
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008d04 <SFDP_BuildGenericDriver+0xab4>)
 8008cd4:	7cdb      	ldrb	r3, [r3, #19]
 8008cd6:	f023 0307 	bic.w	r3, r3, #7
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d017      	beq.n	8008d10 <SFDP_BuildGenericDriver+0xac0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
 8008ce0:	4b08      	ldr	r3, [pc, #32]	@ (8008d04 <SFDP_BuildGenericDriver+0xab4>)
 8008ce2:	7cdb      	ldrb	r3, [r3, #19]
 8008ce4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
 8008cec:	4b05      	ldr	r3, [pc, #20]	@ (8008d04 <SFDP_BuildGenericDriver+0xab4>)
 8008cee:	8a5b      	ldrh	r3, [r3, #18]
 8008cf0:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	623b      	str	r3, [r7, #32]
 8008cf8:	e02e      	b.n	8008d58 <SFDP_BuildGenericDriver+0xb08>
 8008cfa:	bf00      	nop
 8008cfc:	240002d8 	.word	0x240002d8
 8008d00:	24000338 	.word	0x24000338
 8008d04:	24000340 	.word	0x24000340
 8008d08:	0bebc1ff 	.word	0x0bebc1ff
 8008d0c:	09e4f57f 	.word	0x09e4f57f
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4a27      	ldr	r2, [pc, #156]	@ (8008db0 <SFDP_BuildGenericDriver+0xb60>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d913      	bls.n	8008d40 <SFDP_BuildGenericDriver+0xaf0>
 8008d18:	4b26      	ldr	r3, [pc, #152]	@ (8008db4 <SFDP_BuildGenericDriver+0xb64>)
 8008d1a:	7c9b      	ldrb	r3, [r3, #18]
 8008d1c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00c      	beq.n	8008d40 <SFDP_BuildGenericDriver+0xaf0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
 8008d26:	4b23      	ldr	r3, [pc, #140]	@ (8008db4 <SFDP_BuildGenericDriver+0xb64>)
 8008d28:	7c9b      	ldrb	r3, [r3, #18]
 8008d2a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
 8008d32:	4b20      	ldr	r3, [pc, #128]	@ (8008db4 <SFDP_BuildGenericDriver+0xb64>)
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	f3c3 3304 	ubfx	r3, r3, #12, #5
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	623b      	str	r3, [r7, #32]
 8008d3e:	e00b      	b.n	8008d58 <SFDP_BuildGenericDriver+0xb08>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
 8008d40:	4b1c      	ldr	r3, [pc, #112]	@ (8008db4 <SFDP_BuildGenericDriver+0xb64>)
 8008d42:	8a1b      	ldrh	r3, [r3, #16]
 8008d44:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
 8008d4c:	4b19      	ldr	r3, [pc, #100]	@ (8008db4 <SFDP_BuildGenericDriver+0xb64>)
 8008d4e:	7c1b      	ldrb	r3, [r3, #16]
 8008d50:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	623b      	str	r3, [r7, #32]
    }
    
    /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
    if((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d017      	beq.n	8008d96 <SFDP_BuildGenericDriver+0xb46>
	  && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
 8008d66:	4b14      	ldr	r3, [pc, #80]	@ (8008db8 <SFDP_BuildGenericDriver+0xb68>)
 8008d68:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008d6c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00f      	beq.n	8008d96 <SFDP_BuildGenericDriver+0xb46>
    {
      /* Update the frequence with MaxFreqMhz information */
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
 8008d76:	6a39      	ldr	r1, [r7, #32]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fa5d 	bl	8009238 <sfpd_set_dummycycle>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10f      	bne.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
      {
        /* Set the dummy cycle corresponding */
        (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	3308      	adds	r3, #8
 8008d88:	f107 0214 	add.w	r2, r7, #20
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe faac 	bl	80072ec <SAL_XSPI_MemoryConfig>
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
 8008d94:	e006      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
      }
    }
    else
    {
      retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
 8008d96:	230e      	movs	r3, #14
 8008d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8008d9c:	e002      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
          goto error;
 8008d9e:	bf00      	nop
 8008da0:	e000      	b.n	8008da4 <SFDP_BuildGenericDriver+0xb54>
    }
  }

error :
 8008da2:	bf00      	nop
  return retr;
 8008da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3728      	adds	r7, #40	@ 0x28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bdb0      	pop	{r4, r5, r7, pc}
 8008db0:	07ed6b3f 	.word	0x07ed6b3f
 8008db4:	24000340 	.word	0x24000340
 8008db8:	24000358 	.word	0x24000358

08008dbc <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
 8008dbc:	b5b0      	push	{r4, r5, r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
 8008dc6:	23fb      	movs	r3, #251	@ 0xfb
 8008dc8:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d026      	beq.n	8008e22 <driver_check_FlagBUSY+0x66>
  {
    /* check if the busy flag is enabled */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f103 0008 	add.w	r0, r3, #8
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
                                               SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfpd_private.DriverInfo.WIPAddress,
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8008de6:	461d      	mov	r5, r3
                                               SFDPObject->sfpd_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8008dee:	461a      	mov	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8008df6:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8008dfa:	b2dc      	uxtb	r4, r3
                                               1u << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8008e02:	461a      	mov	r2, r3
 8008e04:	2301      	movs	r3, #1
 8008e06:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	9201      	str	r2, [sp, #4]
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	4623      	mov	r3, r4
 8008e12:	462a      	mov	r2, r5
 8008e14:	f7fe fe11 	bl	8007a3a <SAL_XSPI_CheckStatusRegister>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <driver_check_FlagBUSY+0x66>
                                               Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
 8008e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e30 <sfdp_getfrequencevalue>:
 * @brief this function returns the frequence corresponding to a frequecy
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
 8008e30:	b4b0      	push	{r4, r5, r7}
 8008e32:	b08b      	sub	sp, #44	@ 0x2c
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
 8008e38:	4b0e      	ldr	r3, [pc, #56]	@ (8008e74 <sfdp_getfrequencevalue+0x44>)
 8008e3a:	f107 040c 	add.w	r4, r7, #12
 8008e3e:	461d      	mov	r5, r3
 8008e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e48:	c403      	stmia	r4!, {r0, r1}
 8008e4a:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b09      	cmp	r3, #9
 8008e50:	d80a      	bhi.n	8008e68 <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	3328      	adds	r3, #40	@ 0x28
 8008e58:	443b      	add	r3, r7
 8008e5a:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	4b05      	ldr	r3, [pc, #20]	@ (8008e78 <sfdp_getfrequencevalue+0x48>)
 8008e62:	fb02 f303 	mul.w	r3, r2, r3
 8008e66:	e000      	b.n	8008e6a <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	372c      	adds	r7, #44	@ 0x2c
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bcb0      	pop	{r4, r5, r7}
 8008e72:	4770      	bx	lr
 8008e74:	080098e8 	.word	0x080098e8
 8008e78:	000f4240 	.word	0x000f4240

08008e7c <sfdp_get_paraminfo>:
 * @param sfdp_adress address of the SFDP table
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_adress, SFDP_ParameterTableTypeDef *Param_info)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
 8008e8c:	f107 0314 	add.w	r3, r7, #20
 8008e90:	2200      	movs	r2, #0
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, sfdp_adress, 
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f103 0008 	add.w	r0, r3, #8
 8008e9c:	f107 0214 	add.w	r2, r7, #20
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	f7fe fb74 	bl	8007590 <SAL_XSPI_GetSFDP>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFPDREAD;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008eb2:	e0d1      	b.n	8009058 <sfdp_get_paraminfo+0x1dc>
  }

  Param_info->type = SFPD_PARAMID_UNKNOWN;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
 8008eba:	7dfa      	ldrb	r2, [r7, #23]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
 8008ec0:	7ebb      	ldrb	r3, [r7, #26]
 8008ec2:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
 8008ec4:	7e7b      	ldrb	r3, [r7, #25]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
 8008eca:	7e3a      	ldrb	r2, [r7, #24]
 8008ecc:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
 8008ed2:	7efb      	ldrb	r3, [r7, #27]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d010      	beq.n	8008efa <sfdp_get_paraminfo+0x7e>
 8008ed8:	7efb      	ldrb	r3, [r7, #27]
 8008eda:	b25b      	sxtb	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	db0c      	blt.n	8008efa <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 8008ee0:	7efb      	ldrb	r3, [r7, #27]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFPD_PARAMID_VENDOR;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 8008ef0:	e0b2      	b.n	8009058 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_VENDOR;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 8008ef8:	e0ae      	b.n	8009058 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_VENDOR");
    }
  }
  else
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
 8008efa:	7d3b      	ldrb	r3, [r7, #20]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d102      	bne.n	8008f0a <sfdp_get_paraminfo+0x8e>
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_JEDEC;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2204      	movs	r2, #4
 8008f08:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_JEDEC");
    }

    if((0xFFu == sfdp_param_header.ID_msb))
 8008f0a:	7efb      	ldrb	r3, [r7, #27]
 8008f0c:	2bff      	cmp	r3, #255	@ 0xff
 8008f0e:	f040 80a2 	bne.w	8009056 <sfdp_get_paraminfo+0x1da>
    {
      switch(sfdp_param_header.ID_lsb)
 8008f12:	7d3b      	ldrb	r3, [r7, #20]
 8008f14:	2b0f      	cmp	r3, #15
 8008f16:	dc4b      	bgt.n	8008fb0 <sfdp_get_paraminfo+0x134>
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	da23      	bge.n	8008f64 <sfdp_get_paraminfo+0xe8>
        Param_info->type = SFPD_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_????");
        break;
 8008f1c:	e09a      	b.n	8009054 <sfdp_get_paraminfo+0x1d8>
      switch(sfdp_param_header.ID_lsb)
 8008f1e:	3b81      	subs	r3, #129	@ 0x81
 8008f20:	2b0d      	cmp	r3, #13
 8008f22:	f200 8097 	bhi.w	8009054 <sfdp_get_paraminfo+0x1d8>
 8008f26:	a201      	add	r2, pc, #4	@ (adr r2, 8008f2c <sfdp_get_paraminfo+0xb0>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008fd1 	.word	0x08008fd1
 8008f30:	08009055 	.word	0x08009055
 8008f34:	08009055 	.word	0x08009055
 8008f38:	08008fe1 	.word	0x08008fe1
 8008f3c:	08009055 	.word	0x08009055
 8008f40:	08009055 	.word	0x08009055
 8008f44:	08008ffb 	.word	0x08008ffb
 8008f48:	08009005 	.word	0x08009005
 8008f4c:	08009055 	.word	0x08009055
 8008f50:	08009055 	.word	0x08009055
 8008f54:	08009023 	.word	0x08009023
 8008f58:	08009055 	.word	0x08009055
 8008f5c:	08009037 	.word	0x08009037
 8008f60:	08009041 	.word	0x08009041
 8008f64:	2b0f      	cmp	r3, #15
 8008f66:	d875      	bhi.n	8009054 <sfdp_get_paraminfo+0x1d8>
 8008f68:	a201      	add	r2, pc, #4	@ (adr r2, 8008f70 <sfdp_get_paraminfo+0xf4>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008fbb 	.word	0x08008fbb
 8008f74:	08009055 	.word	0x08009055
 8008f78:	08009055 	.word	0x08009055
 8008f7c:	08008fd9 	.word	0x08008fd9
 8008f80:	08009055 	.word	0x08009055
 8008f84:	08008fe9 	.word	0x08008fe9
 8008f88:	08008ff1 	.word	0x08008ff1
 8008f8c:	08009055 	.word	0x08009055
 8008f90:	08009055 	.word	0x08009055
 8008f94:	0800900f 	.word	0x0800900f
 8008f98:	08009019 	.word	0x08009019
 8008f9c:	08009055 	.word	0x08009055
 8008fa0:	0800902d 	.word	0x0800902d
 8008fa4:	08009055 	.word	0x08009055
 8008fa8:	08009055 	.word	0x08009055
 8008fac:	0800904b 	.word	0x0800904b
 8008fb0:	2b8e      	cmp	r3, #142	@ 0x8e
 8008fb2:	dc4f      	bgt.n	8009054 <sfdp_get_paraminfo+0x1d8>
 8008fb4:	2b81      	cmp	r3, #129	@ 0x81
 8008fb6:	dab2      	bge.n	8008f1e <sfdp_get_paraminfo+0xa2>
        break;
 8008fb8:	e04c      	b.n	8009054 <sfdp_get_paraminfo+0x1d8>
        Param_info->type = SFPD_PARAMID_BASIC_SPIPROTOCOL;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE) ? SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE : sfdp_param_header.Length;
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	2b10      	cmp	r3, #16
 8008fc4:	bf38      	it	cc
 8008fc6:	2310      	movcc	r3, #16
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	721a      	strb	r2, [r3, #8]
        break;
 8008fce:	e042      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECTORMAP;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2210      	movs	r2, #16
 8008fd4:	601a      	str	r2, [r3, #0]
        break;
 8008fd6:	e03e      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RPMC;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	601a      	str	r2, [r3, #0]
        break;
 8008fde:	e03a      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2240      	movs	r2, #64	@ 0x40
 8008fe4:	601a      	str	r2, [r3, #0]
        break;
 8008fe6:	e036      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V1_0;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2280      	movs	r2, #128	@ 0x80
 8008fec:	601a      	str	r2, [r3, #0]
        break;
 8008fee:	e032      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V2_0;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ff6:	601a      	str	r2, [r3, #0]
        break;
 8008ff8:	e02d      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009000:	601a      	str	r2, [r3, #0]
        break;
 8009002:	e028      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800900a:	601a      	str	r2, [r3, #0]
        break;
 800900c:	e023      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009014:	601a      	str	r2, [r3, #0]
        break;
 8009016:	e01e      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_OCTAL_DDR;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800901e:	601a      	str	r2, [r3, #0]
        break;
 8009020:	e019      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_MSPT;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009028:	601a      	str	r2, [r3, #0]
        break;
 800902a:	e014      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_X4QUAD_DS;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009032:	601a      	str	r2, [r3, #0]
        break;
 8009034:	e00f      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_QUAD_DDR;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800903c:	601a      	str	r2, [r3, #0]
        break;
 800903e:	e00a      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECURE_PACKET_READ_WRITE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009046:	601a      	str	r2, [r3, #0]
        break;
 8009048:	e005      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RESERVED;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009050:	601a      	str	r2, [r3, #0]
        break;
 8009052:	e000      	b.n	8009056 <sfdp_get_paraminfo+0x1da>
        break;
 8009054:	bf00      	nop
    {
      SFDP_DEBUG_STR("-> the table is not conform to JEDEC standard");
    }
  }
  
error:
 8009056:	bf00      	nop
  return retr;
 8009058:	7ffb      	ldrb	r3, [r7, #31]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3720      	adds	r7, #32
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop

08009064 <sfpd_enter_octal_mode>:
 * @brief this function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8009064:	b590      	push	{r4, r7, lr}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand)
 8009070:	4b70      	ldr	r3, [pc, #448]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009072:	78db      	ldrb	r3, [r3, #3]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d032      	beq.n	80090de <sfpd_enter_octal_mode+0x7a>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
 8009078:	4b6e      	ldr	r3, [pc, #440]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 800907a:	789b      	ldrb	r3, [r3, #2]
 800907c:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
 800907e:	4b6d      	ldr	r3, [pc, #436]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009080:	785b      	ldrb	r3, [r3, #1]
 8009082:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
 8009084:	4b6b      	ldr	r3, [pc, #428]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
 800908a:	4b6a      	ldr	r3, [pc, #424]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 800908c:	79db      	ldrb	r3, [r3, #7]
 800908e:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
 8009090:	4b68      	ldr	r3, [pc, #416]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009092:	799b      	ldrb	r3, [r3, #6]
 8009094:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
 8009096:	4b67      	ldr	r3, [pc, #412]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009098:	795b      	ldrb	r3, [r3, #5]
 800909a:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
 800909c:	4b65      	ldr	r3, [pc, #404]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 800909e:	791b      	ldrb	r3, [r3, #4]
 80090a0:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f103 0008 	add.w	r0, r3, #8
 80090a8:	7a39      	ldrb	r1, [r7, #8]
                                        (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand - 1u)))
 80090aa:	4b62      	ldr	r3, [pc, #392]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80090ac:	78db      	ldrb	r3, [r3, #3]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29c      	uxth	r4, r3
 80090b2:	f107 0308 	add.w	r3, r7, #8
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	4623      	mov	r3, r4
 80090ba:	f7fe fbc9 	bl	8007850 <SAL_XSPI_CommandSendData>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <sfpd_enter_octal_mode+0x66>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 80090c4:	230b      	movs	r3, #11
 80090c6:	73fb      	strb	r3, [r7, #15]
       goto error;
 80090c8:	e0af      	b.n	800922a <sfpd_enter_octal_mode+0x1c6>
     }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 80090ca:	2164      	movs	r1, #100	@ 0x64
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7ff fe75 	bl	8008dbc <driver_check_FlagBUSY>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <sfpd_enter_octal_mode+0x7a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80090d8:	230c      	movs	r3, #12
 80090da:	73fb      	strb	r3, [r7, #15]
      goto error;
 80090dc:	e0a5      	b.n	800922a <sfpd_enter_octal_mode+0x1c6>
    }
  }
  
  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand)
 80090de:	4b55      	ldr	r3, [pc, #340]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80090e0:	7adb      	ldrb	r3, [r3, #11]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d032      	beq.n	800914c <sfpd_enter_octal_mode+0xe8>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
 80090e6:	4b53      	ldr	r3, [pc, #332]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80090e8:	7a9b      	ldrb	r3, [r3, #10]
 80090ea:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
 80090ec:	4b51      	ldr	r3, [pc, #324]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80090ee:	7a5b      	ldrb	r3, [r3, #9]
 80090f0:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
 80090f2:	4b50      	ldr	r3, [pc, #320]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80090f4:	7a1b      	ldrb	r3, [r3, #8]
 80090f6:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
 80090f8:	4b4e      	ldr	r3, [pc, #312]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80090fa:	7bdb      	ldrb	r3, [r3, #15]
 80090fc:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
 80090fe:	4b4d      	ldr	r3, [pc, #308]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009100:	7b9b      	ldrb	r3, [r3, #14]
 8009102:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
 8009104:	4b4b      	ldr	r3, [pc, #300]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009106:	7b5b      	ldrb	r3, [r3, #13]
 8009108:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
 800910a:	4b4a      	ldr	r3, [pc, #296]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 800910c:	7b1b      	ldrb	r3, [r3, #12]
 800910e:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f103 0008 	add.w	r0, r3, #8
 8009116:	7a39      	ldrb	r1, [r7, #8]
                                            (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand - 1u)))
 8009118:	4b46      	ldr	r3, [pc, #280]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 800911a:	7adb      	ldrb	r3, [r3, #11]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 800911c:	3b01      	subs	r3, #1
 800911e:	b29c      	uxth	r4, r3
 8009120:	f107 0308 	add.w	r3, r7, #8
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	4623      	mov	r3, r4
 8009128:	f7fe fb92 	bl	8007850 <SAL_XSPI_CommandSendData>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <sfpd_enter_octal_mode+0xd4>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 8009132:	230b      	movs	r3, #11
 8009134:	73fb      	strb	r3, [r7, #15]
       goto error;
 8009136:	e078      	b.n	800922a <sfpd_enter_octal_mode+0x1c6>
     }
     
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8009138:	2164      	movs	r1, #100	@ 0x64
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff fe3e 	bl	8008dbc <driver_check_FlagBUSY>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <sfpd_enter_octal_mode+0xe8>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009146:	230c      	movs	r3, #12
 8009148:	73fb      	strb	r3, [r7, #15]
      goto error;
 800914a:	e06e      	b.n	800922a <sfpd_enter_octal_mode+0x1c6>
    }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand)
 800914c:	4b39      	ldr	r3, [pc, #228]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 800914e:	7cdb      	ldrb	r3, [r3, #19]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d032      	beq.n	80091ba <sfpd_enter_octal_mode+0x156>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
 8009154:	4b37      	ldr	r3, [pc, #220]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009156:	7c9b      	ldrb	r3, [r3, #18]
 8009158:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
 800915a:	4b36      	ldr	r3, [pc, #216]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 800915c:	7c5b      	ldrb	r3, [r3, #17]
 800915e:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
 8009160:	4b34      	ldr	r3, [pc, #208]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009162:	7c1b      	ldrb	r3, [r3, #16]
 8009164:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
 8009166:	4b33      	ldr	r3, [pc, #204]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009168:	7ddb      	ldrb	r3, [r3, #23]
 800916a:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
 800916c:	4b31      	ldr	r3, [pc, #196]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 800916e:	7d9b      	ldrb	r3, [r3, #22]
 8009170:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
 8009172:	4b30      	ldr	r3, [pc, #192]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009174:	7d5b      	ldrb	r3, [r3, #21]
 8009176:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
 8009178:	4b2e      	ldr	r3, [pc, #184]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 800917a:	7d1b      	ldrb	r3, [r3, #20]
 800917c:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f103 0008 	add.w	r0, r3, #8
 8009184:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand - 1u)))
 8009186:	4b2b      	ldr	r3, [pc, #172]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 8009188:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 800918a:	3b01      	subs	r3, #1
 800918c:	b29c      	uxth	r4, r3
 800918e:	f107 0308 	add.w	r3, r7, #8
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	4623      	mov	r3, r4
 8009196:	f7fe fb5b 	bl	8007850 <SAL_XSPI_CommandSendData>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <sfpd_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 80091a0:	230b      	movs	r3, #11
 80091a2:	73fb      	strb	r3, [r7, #15]
      goto error;
 80091a4:	e041      	b.n	800922a <sfpd_enter_octal_mode+0x1c6>
    }

     /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 80091a6:	2164      	movs	r1, #100	@ 0x64
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff fe07 	bl	8008dbc <driver_check_FlagBUSY>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <sfpd_enter_octal_mode+0x156>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80091b4:	230c      	movs	r3, #12
 80091b6:	73fb      	strb	r3, [r7, #15]
      goto error;
 80091b8:	e037      	b.n	800922a <sfpd_enter_octal_mode+0x1c6>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand)
 80091ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80091bc:	7edb      	ldrb	r3, [r3, #27]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d032      	beq.n	8009228 <sfpd_enter_octal_mode+0x1c4>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
 80091c2:	4b1c      	ldr	r3, [pc, #112]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80091c4:	7e9b      	ldrb	r3, [r3, #26]
 80091c6:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
 80091c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80091ca:	7e5b      	ldrb	r3, [r3, #25]
 80091cc:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
 80091ce:	4b19      	ldr	r3, [pc, #100]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80091d0:	7e1b      	ldrb	r3, [r3, #24]
 80091d2:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
 80091d4:	4b17      	ldr	r3, [pc, #92]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80091d6:	7fdb      	ldrb	r3, [r3, #31]
 80091d8:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
 80091da:	4b16      	ldr	r3, [pc, #88]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80091dc:	7f9b      	ldrb	r3, [r3, #30]
 80091de:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
 80091e0:	4b14      	ldr	r3, [pc, #80]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80091e2:	7f5b      	ldrb	r3, [r3, #29]
 80091e4:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
 80091e6:	4b13      	ldr	r3, [pc, #76]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80091e8:	7f1b      	ldrb	r3, [r3, #28]
 80091ea:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f103 0008 	add.w	r0, r3, #8
 80091f2:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand - 1u)))
 80091f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009234 <sfpd_enter_octal_mode+0x1d0>)
 80091f6:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29c      	uxth	r4, r3
 80091fc:	f107 0308 	add.w	r3, r7, #8
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	4623      	mov	r3, r4
 8009204:	f7fe fb24 	bl	8007850 <SAL_XSPI_CommandSendData>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <sfpd_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 800920e:	230b      	movs	r3, #11
 8009210:	73fb      	strb	r3, [r7, #15]
      goto error;
 8009212:	e00a      	b.n	800922a <sfpd_enter_octal_mode+0x1c6>
    }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8009214:	2164      	movs	r1, #100	@ 0x64
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7ff fdd0 	bl	8008dbc <driver_check_FlagBUSY>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <sfpd_enter_octal_mode+0x1c4>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009222:	230c      	movs	r3, #12
 8009224:	73fb      	strb	r3, [r7, #15]
      goto error;
 8009226:	e000      	b.n	800922a <sfpd_enter_octal_mode+0x1c6>
    }
  }

error:
 8009228:	bf00      	nop
  return retr;
 800922a:	7bfb      	ldrb	r3, [r7, #15]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	bd90      	pop	{r4, r7, pc}
 8009234:	240003c8 	.word	0x240003c8

08009238 <sfpd_set_dummycycle>:
 * @brief this function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
 8009238:	b5b0      	push	{r4, r5, r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af02      	add	r7, sp, #8
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
 8009242:	4b6d      	ldr	r3, [pc, #436]	@ (80093f8 <sfpd_set_dummycycle+0x1c0>)
 8009244:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
 800924a:	2300      	movs	r3, #0
 800924c:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
 800924e:	4b6b      	ldr	r3, [pc, #428]	@ (80093fc <sfpd_set_dummycycle+0x1c4>)
 8009250:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009254:	f003 0310 	and.w	r3, r3, #16
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <sfpd_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
 800925e:	4b67      	ldr	r3, [pc, #412]	@ (80093fc <sfpd_set_dummycycle+0x1c4>)
 8009260:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009264:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009268:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <sfpd_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 800926e:	230c      	movs	r3, #12
 8009270:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009272:	e0bb      	b.n	80093ec <sfpd_set_dummycycle+0x1b4>
  }
  
  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
 8009274:	4b61      	ldr	r3, [pc, #388]	@ (80093fc <sfpd_set_dummycycle+0x1c4>)
 8009276:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800927a:	f003 0308 	and.w	r3, r3, #8
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d005      	beq.n	8009290 <sfpd_set_dummycycle+0x58>
  { 
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AdressRegisterOrModesSupported << 8;
 8009284:	4b5d      	ldr	r3, [pc, #372]	@ (80093fc <sfpd_set_dummycycle+0x1c4>)
 8009286:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800928a:	021b      	lsls	r3, r3, #8
 800928c:	613b      	str	r3, [r7, #16]
 800928e:	e001      	b.n	8009294 <sfpd_set_dummycycle+0x5c>
  }
  else
  {
    /* patch no really universal */
    Address = 1; 
 8009290:	2301      	movs	r3, #1
 8009292:	613b      	str	r3, [r7, #16]
  }
    
  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfpd_private.SALObject, 
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f103 0008 	add.w	r0, r3, #8
 800929a:	4b58      	ldr	r3, [pc, #352]	@ (80093fc <sfpd_set_dummycycle+0x1c4>)
 800929c:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 80092a0:	f107 0308 	add.w	r3, r7, #8
 80092a4:	2202      	movs	r2, #2
 80092a6:	9200      	str	r2, [sp, #0]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	f7fe fb79 	bl	80079a0 <SAL_XSPI_CommandSendReadAddress>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <sfpd_set_dummycycle+0x82>
                   (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, 
                   Address, 
                   (uint8_t *)localValue, 
                   2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80092b4:	230c      	movs	r3, #12
 80092b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092b8:	e098      	b.n	80093ec <sfpd_set_dummycycle+0x1b4>
  }
      
  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f103 0008 	add.w	r0, r3, #8
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 80092c6:	2300      	movs	r3, #0
 80092c8:	2200      	movs	r2, #0
 80092ca:	f7fe fac1 	bl	8007850 <SAL_XSPI_CommandSendData>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <sfpd_set_dummycycle+0xa2>
                                     Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80092d4:	230c      	movs	r3, #12
 80092d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092d8:	e088      	b.n	80093ec <sfpd_set_dummycycle+0x1b4>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f103 0008 	add.w	r0, r3, #8
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80092ec:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <sfpd_set_dummycycle+0xc4>
 80092f8:	2301      	movs	r3, #1
 80092fa:	e000      	b.n	80092fe <sfpd_set_dummycycle+0xc6>
 80092fc:	2300      	movs	r3, #0
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 8009304:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8009306:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800930e:	461c      	mov	r4, r3
 8009310:	2301      	movs	r3, #1
 8009312:	40a3      	lsls	r3, r4
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800931a:	9401      	str	r4, [sp, #4]
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	4613      	mov	r3, r2
 8009320:	462a      	mov	r2, r5
 8009322:	f7fe fb8a 	bl	8007a3a <SAL_XSPI_CheckStatusRegister>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <sfpd_set_dummycycle+0xfa>
                                            1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 800932c:	230c      	movs	r3, #12
 800932e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009330:	e05c      	b.n	80093ec <sfpd_set_dummycycle+0x1b4>
  }
    
  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
 8009332:	7a3b      	ldrb	r3, [r7, #8]
 8009334:	b25a      	sxtb	r2, r3
 8009336:	4b31      	ldr	r3, [pc, #196]	@ (80093fc <sfpd_set_dummycycle+0x1c4>)
 8009338:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800933c:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8009340:	b2db      	uxtb	r3, r3
 8009342:	3318      	adds	r3, #24
 8009344:	443b      	add	r3, r7
 8009346:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800934a:	4619      	mov	r1, r3
 800934c:	4b2b      	ldr	r3, [pc, #172]	@ (80093fc <sfpd_set_dummycycle+0x1c4>)
 800934e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009352:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009356:	b2db      	uxtb	r3, r3
 8009358:	fa01 f303 	lsl.w	r3, r1, r3
 800935c:	b25b      	sxtb	r3, r3
 800935e:	43db      	mvns	r3, r3
 8009360:	b25b      	sxtb	r3, r3
 8009362:	4013      	ands	r3, r2
 8009364:	b25b      	sxtb	r3, r3
 8009366:	b2db      	uxtb	r3, r3
 8009368:	723b      	strb	r3, [r7, #8]
                                    
  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
 800936a:	7a3a      	ldrb	r2, [r7, #8]
 800936c:	4b23      	ldr	r3, [pc, #140]	@ (80093fc <sfpd_set_dummycycle+0x1c4>)
 800936e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009372:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009376:	b2db      	uxtb	r3, r3
 8009378:	4619      	mov	r1, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	408b      	lsls	r3, r1
 800937e:	b2db      	uxtb	r3, r3
 8009380:	4313      	orrs	r3, r2
 8009382:	b2db      	uxtb	r3, r3
 8009384:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
 8009386:	7a3b      	ldrb	r3, [r7, #8]
 8009388:	727b      	strb	r3, [r7, #9]
     
  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f103 0008 	add.w	r0, r3, #8
 8009390:	4b1a      	ldr	r3, [pc, #104]	@ (80093fc <sfpd_set_dummycycle+0x1c4>)
 8009392:	f893 1020 	ldrb.w	r1, [r3, #32]
 8009396:	f107 0308 	add.w	r3, r7, #8
 800939a:	2202      	movs	r2, #2
 800939c:	9200      	str	r2, [sp, #0]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	f7fe fa0d 	bl	80077be <SAL_XSPI_Write>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <sfpd_set_dummycycle+0x178>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80093aa:	230c      	movs	r3, #12
 80093ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093ae:	e01d      	b.n	80093ec <sfpd_set_dummycycle+0x1b4>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 80093b0:	2164      	movs	r1, #100	@ 0x64
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff fd02 	bl	8008dbc <driver_check_FlagBUSY>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d002      	beq.n	80093c4 <sfpd_set_dummycycle+0x18c>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80093be:	230c      	movs	r3, #12
 80093c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093c2:	e013      	b.n	80093ec <sfpd_set_dummycycle+0x1b4>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, Address, (uint8_t *)localValue, 2u))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f103 0008 	add.w	r0, r3, #8
 80093ca:	4b0c      	ldr	r3, [pc, #48]	@ (80093fc <sfpd_set_dummycycle+0x1c4>)
 80093cc:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 80093d0:	f107 0308 	add.w	r3, r7, #8
 80093d4:	2202      	movs	r2, #2
 80093d6:	9200      	str	r2, [sp, #0]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	f7fe f988 	bl	80076ee <SAL_XSPI_Read>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <sfpd_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80093e4:	230c      	movs	r3, #12
 80093e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093e8:	e000      	b.n	80093ec <sfpd_set_dummycycle+0x1b4>
  }	
  
error :
 80093ea:	bf00      	nop
  return retr;  
 80093ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bdb0      	pop	{r4, r5, r7, pc}
 80093f6:	bf00      	nop
 80093f8:	1f0f0703 	.word	0x1f0f0703
 80093fc:	24000358 	.word	0x24000358

08009400 <JEDEC_Basic_ManageQuadEnableRequierement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequierement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8009408:	230f      	movs	r3, #15
 800940a:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];  
  
  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment & 0x7u)
 800940c:	4b58      	ldr	r3, [pc, #352]	@ (8009570 <JEDEC_Basic_ManageQuadEnableRequierement+0x170>)
 800940e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009412:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b07      	cmp	r3, #7
 800941a:	f200 80a1 	bhi.w	8009560 <JEDEC_Basic_ManageQuadEnableRequierement+0x160>
 800941e:	a201      	add	r2, pc, #4	@ (adr r2, 8009424 <JEDEC_Basic_ManageQuadEnableRequierement+0x24>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	08009561 	.word	0x08009561
 8009428:	08009561 	.word	0x08009561
 800942c:	08009445 	.word	0x08009445
 8009430:	08009561 	.word	0x08009561
 8009434:	080094c5 	.word	0x080094c5
 8009438:	08009561 	.word	0x08009561
 800943c:	08009561 	.word	0x08009561
 8009440:	08009561 	.word	0x08009561
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one. 
                 It is cleared via Write Status with one data byte where bit 6 is zero..*/
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f103 0008 	add.w	r0, r3, #8
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8009450:	2300      	movs	r3, #0
 8009452:	2200      	movs	r2, #0
 8009454:	f7fe fa50 	bl	80078f8 <SAL_XSPI_SendReadCommand>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <JEDEC_Basic_ManageQuadEnableRequierement+0x64>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800945e:	230c      	movs	r3, #12
 8009460:	73fb      	strb	r3, [r7, #15]
      goto error;
 8009462:	e080      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5u, (uint8_t *)&localValue[0], 1u))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f103 0008 	add.w	r0, r3, #8
 800946a:	f107 020c 	add.w	r2, r7, #12
 800946e:	2301      	movs	r3, #1
 8009470:	2105      	movs	r1, #5
 8009472:	f7fe fa41 	bl	80078f8 <SAL_XSPI_SendReadCommand>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <JEDEC_Basic_ManageQuadEnableRequierement+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800947c:	230c      	movs	r3, #12
 800947e:	73fb      	strb	r3, [r7, #15]
      goto error;
 8009480:	e071      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
 8009482:	7b3b      	ldrb	r3, [r7, #12]
 8009484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009488:	b2db      	uxtb	r3, r3
 800948a:	733b      	strb	r3, [r7, #12]
    
    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f103 0008 	add.w	r0, r3, #8
 8009492:	f107 020c 	add.w	r2, r7, #12
 8009496:	2301      	movs	r3, #1
 8009498:	2101      	movs	r1, #1
 800949a:	f7fe f9d9 	bl	8007850 <SAL_XSPI_CommandSendData>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <JEDEC_Basic_ManageQuadEnableRequierement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80094a4:	230c      	movs	r3, #12
 80094a6:	73fb      	strb	r3, [r7, #15]
      goto error;
 80094a8:	e05d      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
 80094aa:	2164      	movs	r1, #100	@ 0x64
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff fc85 	bl	8008dbc <driver_check_FlagBUSY>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <JEDEC_Basic_ManageQuadEnableRequierement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80094b8:	230c      	movs	r3, #12
 80094ba:	73fb      	strb	r3, [r7, #15]
      goto error;
 80094bc:	e053      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    retr = EXTMEM_SFDP_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	73fb      	strb	r3, [r7, #15]
    break;
 80094c2:	e050      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one. 
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero. 
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/
   
    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f103 0008 	add.w	r0, r3, #8
 80094ca:	f107 020c 	add.w	r2, r7, #12
 80094ce:	2302      	movs	r3, #2
 80094d0:	2105      	movs	r1, #5
 80094d2:	f7fe fa11 	bl	80078f8 <SAL_XSPI_SendReadCommand>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <JEDEC_Basic_ManageQuadEnableRequierement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80094dc:	230c      	movs	r3, #12
 80094de:	73fb      	strb	r3, [r7, #15]
      goto error;
 80094e0:	e041      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* update the status register */
    localValue[1] |= 2u;
 80094e2:	7b7b      	ldrb	r3, [r7, #13]
 80094e4:	f043 0302 	orr.w	r3, r3, #2
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	737b      	strb	r3, [r7, #13]
    
    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f103 0008 	add.w	r0, r3, #8
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 80094f8:	2300      	movs	r3, #0
 80094fa:	2200      	movs	r2, #0
 80094fc:	f7fe f9fc 	bl	80078f8 <SAL_XSPI_SendReadCommand>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <JEDEC_Basic_ManageQuadEnableRequierement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009506:	230c      	movs	r3, #12
 8009508:	73fb      	strb	r3, [r7, #15]
      goto error;
 800950a:	e02c      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f103 0008 	add.w	r0, r3, #8
 8009512:	f107 020c 	add.w	r2, r7, #12
 8009516:	2302      	movs	r3, #2
 8009518:	2101      	movs	r1, #1
 800951a:	f7fe f999 	bl	8007850 <SAL_XSPI_CommandSendData>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <JEDEC_Basic_ManageQuadEnableRequierement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009524:	230c      	movs	r3, #12
 8009526:	73fb      	strb	r3, [r7, #15]
      goto error;
 8009528:	e01d      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
 800952a:	2164      	movs	r1, #100	@ 0x64
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7ff fc45 	bl	8008dbc <driver_check_FlagBUSY>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d002      	beq.n	800953e <JEDEC_Basic_ManageQuadEnableRequierement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009538:	230c      	movs	r3, #12
 800953a:	73fb      	strb	r3, [r7, #15]
      goto error;
 800953c:	e013      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
 800953e:	23ff      	movs	r3, #255	@ 0xff
 8009540:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f103 0008 	add.w	r0, r3, #8
 8009548:	f107 020c 	add.w	r2, r7, #12
 800954c:	2302      	movs	r3, #2
 800954e:	2105      	movs	r1, #5
 8009550:	f7fe f9d2 	bl	80078f8 <SAL_XSPI_SendReadCommand>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <JEDEC_Basic_ManageQuadEnableRequierement+0x164>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800955a:	230c      	movs	r3, #12
 800955c:	73fb      	strb	r3, [r7, #15]
      goto error;
 800955e:	e002      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
 8009560:	bf00      	nop
 8009562:	e000      	b.n	8009566 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    break;
 8009564:	bf00      	nop
  }
error :  
  return retr;
 8009566:	7bfb      	ldrb	r3, [r7, #15]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	240002d8 	.word	0x240002d8

08009574 <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 800957c:	230f      	movs	r3, #15
 800957e:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
 8009580:	2300      	movs	r3, #0
 8009582:	73bb      	strb	r3, [r7, #14]
    /* 4-4-4 mode enable sequences, This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
    /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
    if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
 8009584:	4b19      	ldr	r3, [pc, #100]	@ (80095ec <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
 8009586:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8009588:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
    {
      retr = JEDEC_Basic_ManageQuadEnableRequierement(Object);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff ff32 	bl	8009400 <JEDEC_Basic_ManageQuadEnableRequierement>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]
      instruction = 0x38u;
 80095a0:	2338      	movs	r3, #56	@ 0x38
 80095a2:	73bb      	strb	r3, [r7, #14]
 80095a4:	e00c      	b.n	80095c0 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    }
    /* x_x1xxb: issue instruction 35h */
    else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
 80095a6:	4b11      	ldr	r3, [pc, #68]	@ (80095ec <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
 80095a8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80095aa:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d003      	beq.n	80095c0 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    {
      retr = EXTMEM_SFDP_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
      instruction = 0x35u;
 80095bc:	2335      	movs	r3, #53	@ 0x35
 80095be:	73bb      	strb	r3, [r7, #14]
device uses a read-modify-write sequence of operations:
Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
*/
    if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10c      	bne.n	80095e0 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d009      	beq.n	80095e0 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
    {
        (void)SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, instruction, NULL, 0u);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f103 0008 	add.w	r0, r3, #8
 80095d2:	7bb9      	ldrb	r1, [r7, #14]
 80095d4:	2300      	movs	r3, #0
 80095d6:	2200      	movs	r2, #0
 80095d8:	f7fe f98e 	bl	80078f8 <SAL_XSPI_SendReadCommand>
        /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
        retr = EXTMEM_SFDP_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
    
    // x1xxb: device uses a read-modify-write sequence of operations: read configuration using instruction 65h followed by address 800003h, clear bit 6, write configuration using instruction 71h followed by address 800003h.. This configuration is volatile.
    // 1xxxb: issue the Soft Reset 66/99 sequence, see 6.4.19
    // NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 disable sequence is issued.
  
  return retr;
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	240002d8 	.word	0x240002d8

080095f0 <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 80095fa:	2304      	movs	r3, #4
 80095fc:	73fb      	strb	r3, [r7, #15]
  
  /* check the magic number */
  switch(Signature)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	4a0e      	ldr	r2, [pc, #56]	@ (800963c <CheckSFDP_Signature+0x4c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d006      	beq.n	8009614 <CheckSFDP_Signature+0x24>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	4a0d      	ldr	r2, [pc, #52]	@ (8009640 <CheckSFDP_Signature+0x50>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d10e      	bne.n	800962c <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]
    break;
 8009612:	e00e      	b.n	8009632 <CheckSFDP_Signature+0x42>
  case 0x44505346U :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the Mtype settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfpd_private.SALObject, SAL_XSPI_ORDERINVERTED))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3308      	adds	r3, #8
 8009618:	2100      	movs	r1, #0
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fb3d 	bl	8007c9a <SAL_XSPI_UpdateMemoryType>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
 8009626:	2305      	movs	r3, #5
 8009628:	73fb      	strb	r3, [r7, #15]
    }
    break;
 800962a:	e001      	b.n	8009630 <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
 800962c:	bf00      	nop
 800962e:	e000      	b.n	8009632 <CheckSFDP_Signature+0x42>
    break;
 8009630:	bf00      	nop
  }
  return retr;
 8009632:	7bfb      	ldrb	r3, [r7, #15]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	44505346 	.word	0x44505346
 8009640:	50444653 	.word	0x50444653

08009644 <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08a      	sub	sp, #40	@ 0x28
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	607a      	str	r2, [r7, #4]
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	460b      	mov	r3, r1
 8009652:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFPD_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
 800965a:	2300      	movs	r3, #0
 800965c:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfpd_private, 0x0, sizeof(SFDPObject->sfpd_private));
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	3308      	adds	r3, #8
 8009662:	2298      	movs	r2, #152	@ 0x98
 8009664:	2100      	movs	r1, #0
 8009666:	4618      	mov	r0, r3
 8009668:	f000 f8ec 	bl	8009844 <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfpd_private.Config = Config;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	7afa      	ldrb	r2, [r7, #11]
 8009670:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfpd_private.DriverInfo.ClockIn = ClockInput;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfpd_private.SALObject, 8);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2208      	movs	r2, #8
 8009686:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfpd_private.SALObject, Peripheral);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	3308      	adds	r3, #8
 800968e:	68f9      	ldr	r1, [r7, #12]
 8009690:	4618      	mov	r0, r3
 8009692:	f7fd fdf8 	bl	8007286 <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	f103 0008 	add.w	r0, r3, #8
 800969c:	f107 0310 	add.w	r3, r7, #16
 80096a0:	4a44      	ldr	r2, [pc, #272]	@ (80097b4 <EXTMEM_DRIVER_NOR_SFDP_Init+0x170>)
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	f7fd fdb0 	bl	8007208 <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	3308      	adds	r3, #8
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fe fae3 	bl	8007c78 <SAL_XSPI_DisableMapMode>

  /* analyse the SFPD structure to get driver information */
  SFDP_DEBUG_STR("4 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
 80096b2:	f107 031c 	add.w	r3, r7, #28
 80096b6:	4619      	mov	r1, r3
 80096b8:	6838      	ldr	r0, [r7, #0]
 80096ba:	f7fe fbb3 	bl	8007e24 <SFDP_GetHeader>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 80096c4:	23ff      	movs	r3, #255	@ 0xff
 80096c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 80096ca:	e06c      	b.n	80097a6 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
 80096cc:	6838      	ldr	r0, [r7, #0]
 80096ce:	f7fe fce3 	bl	8008098 <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
 80096d2:	200a      	movs	r0, #10
 80096d4:	f7f7 fb86 	bl	8000de4 <HAL_Delay>

  /* analyse the SFPD structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
 80096d8:	f107 031c 	add.w	r3, r7, #28
 80096dc:	4619      	mov	r1, r3
 80096de:	6838      	ldr	r0, [r7, #0]
 80096e0:	f7fe fba0 	bl	8007e24 <SFDP_GetHeader>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 80096ea:	23ff      	movs	r3, #255	@ 0xff
 80096ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 80096f0:	e059      	b.n	80097a6 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Save information from the SFDP table */
  SFDPObject->sfpd_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
 80096f2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  SFDPObject->sfpd_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
 80096fc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	3308      	adds	r3, #8
 800970a:	f107 0114 	add.w	r1, r7, #20
 800970e:	2204      	movs	r2, #4
 8009710:	4618      	mov	r0, r3
 8009712:	f7fd ff99 	bl	8007648 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfpd_private.ManuID = DataID[0];
 8009716:	7d3a      	ldrb	r2, [r7, #20]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
 800971e:	6838      	ldr	r0, [r7, #0]
 8009720:	f7fe fbde 	bl	8007ee0 <SFDP_CollectData>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <EXTMEM_DRIVER_NOR_SFDP_Init+0xee>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 800972a:	23ff      	movs	r3, #255	@ 0xff
 800972c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8009730:	e039      	b.n	80097a6 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK !=  SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
 8009732:	f107 031b 	add.w	r3, r7, #27
 8009736:	4619      	mov	r1, r3
 8009738:	6838      	ldr	r0, [r7, #0]
 800973a:	f7fe fd89 	bl	8008250 <SFDP_BuildGenericDriver>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d003      	beq.n	800974c <EXTMEM_DRIVER_NOR_SFDP_Init+0x108>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
 8009744:	23fd      	movs	r3, #253	@ 0xfd
 8009746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800974a:	e02c      	b.n	80097a6 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
 800974c:	7efb      	ldrb	r3, [r7, #27]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10d      	bne.n	800976e <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d009      	beq.n	800976e <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	f103 0008 	add.w	r0, r3, #8
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	f107 0310 	add.w	r3, r7, #16
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	f7fd fd4d 	bl	8007208 <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
 800976e:	f107 031c 	add.w	r3, r7, #28
 8009772:	4619      	mov	r1, r3
 8009774:	6838      	ldr	r0, [r7, #0]
 8009776:	f7fe fb17 	bl	8007da8 <SFDP_ReadHeader>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <EXTMEM_DRIVER_NOR_SFDP_Init+0x144>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
 8009780:	23f2      	movs	r3, #242	@ 0xf2
 8009782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8009786:	e00e      	b.n	80097a6 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  (void)memset(DataID, 0xAA, sizeof(DataID));
 8009788:	f107 0314 	add.w	r3, r7, #20
 800978c:	2206      	movs	r2, #6
 800978e:	21aa      	movs	r1, #170	@ 0xaa
 8009790:	4618      	mov	r0, r3
 8009792:	f000 f857 	bl	8009844 <memset>
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	3308      	adds	r3, #8
 800979a:	f107 0114 	add.w	r1, r7, #20
 800979e:	2204      	movs	r2, #4
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fd ff51 	bl	8007648 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
 80097a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3728      	adds	r7, #40	@ 0x28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	02faf080 	.word	0x02faf080

080097b8 <EXTMEM_DRIVER_NOR_SFDP_DeInit>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_DeInit(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  SFDPObject->sfpd_private.FlashSize = 0;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  return EXTMEM_DRIVER_NOR_SFDP_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 80097d6:	b590      	push	{r4, r7, lr}
 80097d8:	b087      	sub	sp, #28
 80097da:	af02      	add	r7, sp, #8
 80097dc:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f103 0008 	add.w	r0, r3, #8
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfpd_private.SALObject.Commandbase.DummyCycles,
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80097fa:	2400      	movs	r4, #0
 80097fc:	9400      	str	r4, [sp, #0]
 80097fe:	f7fe f9c4 	bl	8007b8a <SAL_XSPI_EnableMapMode>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfpd_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
 8009808:	23f3      	movs	r3, #243	@ 0xf3
 800980a:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
 800980c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	bd90      	pop	{r4, r7, pc}

08009818 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3308      	adds	r3, #8
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe fa25 	bl	8007c78 <SAL_XSPI_DisableMapMode>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
 8009834:	23f3      	movs	r3, #243	@ 0xf3
 8009836:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
 8009838:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <memset>:
 8009844:	4402      	add	r2, r0
 8009846:	4603      	mov	r3, r0
 8009848:	4293      	cmp	r3, r2
 800984a:	d100      	bne.n	800984e <memset+0xa>
 800984c:	4770      	bx	lr
 800984e:	f803 1b01 	strb.w	r1, [r3], #1
 8009852:	e7f9      	b.n	8009848 <memset+0x4>

08009854 <__libc_init_array>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	4d0d      	ldr	r5, [pc, #52]	@ (800988c <__libc_init_array+0x38>)
 8009858:	4c0d      	ldr	r4, [pc, #52]	@ (8009890 <__libc_init_array+0x3c>)
 800985a:	1b64      	subs	r4, r4, r5
 800985c:	10a4      	asrs	r4, r4, #2
 800985e:	2600      	movs	r6, #0
 8009860:	42a6      	cmp	r6, r4
 8009862:	d109      	bne.n	8009878 <__libc_init_array+0x24>
 8009864:	4d0b      	ldr	r5, [pc, #44]	@ (8009894 <__libc_init_array+0x40>)
 8009866:	4c0c      	ldr	r4, [pc, #48]	@ (8009898 <__libc_init_array+0x44>)
 8009868:	f000 f826 	bl	80098b8 <_init>
 800986c:	1b64      	subs	r4, r4, r5
 800986e:	10a4      	asrs	r4, r4, #2
 8009870:	2600      	movs	r6, #0
 8009872:	42a6      	cmp	r6, r4
 8009874:	d105      	bne.n	8009882 <__libc_init_array+0x2e>
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	f855 3b04 	ldr.w	r3, [r5], #4
 800987c:	4798      	blx	r3
 800987e:	3601      	adds	r6, #1
 8009880:	e7ee      	b.n	8009860 <__libc_init_array+0xc>
 8009882:	f855 3b04 	ldr.w	r3, [r5], #4
 8009886:	4798      	blx	r3
 8009888:	3601      	adds	r6, #1
 800988a:	e7f2      	b.n	8009872 <__libc_init_array+0x1e>
 800988c:	0800991c 	.word	0x0800991c
 8009890:	0800991c 	.word	0x0800991c
 8009894:	0800991c 	.word	0x0800991c
 8009898:	08009920 	.word	0x08009920

0800989c <memcpy>:
 800989c:	440a      	add	r2, r1
 800989e:	4291      	cmp	r1, r2
 80098a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80098a4:	d100      	bne.n	80098a8 <memcpy+0xc>
 80098a6:	4770      	bx	lr
 80098a8:	b510      	push	{r4, lr}
 80098aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098b2:	4291      	cmp	r1, r2
 80098b4:	d1f9      	bne.n	80098aa <memcpy+0xe>
 80098b6:	bd10      	pop	{r4, pc}

080098b8 <_init>:
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	bf00      	nop
 80098bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098be:	bc08      	pop	{r3}
 80098c0:	469e      	mov	lr, r3
 80098c2:	4770      	bx	lr

080098c4 <_fini>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	bf00      	nop
 80098c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ca:	bc08      	pop	{r3}
 80098cc:	469e      	mov	lr, r3
 80098ce:	4770      	bx	lr
